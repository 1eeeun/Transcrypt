{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/transcrypt/modules/turtle/__javascript__/turtle.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/transcrypt/modules/turtle/__init__.py"
	],
	"sourcesContent": [
		"def abs (vec2D):\n\treturn Math.sqrt (vec2D [0] * vec2D [0] + vec2D [1] * vec2D [1])\n\n_ns = 'http://www.w3.org/2000/svg'\n_svg = document.createElementNS (_ns, 'svg')\ndocument.body.appendChild (_svg)\n\n_width = 0\n_height = 0\n_offset = 0\n\t\t\ndef rightSize (self):\n\tnonlocal _width\n\tnonlocal _height\n\tnonlocal _offset\n\t\n\t_width = window.innerWidth\n\t_height = window.innerHeight\n\t_offset = [_width // 2, _height // 2]\n\t\n\t_svg.setAttribute ('width', _width)\n\t_svg.setAttribute ('height', _height)\n\t\nwindow.onresize = rightSize\nrightSize ()\n\t\nclass Turtle:\n\tdef __init__ (self):\n\t\tself.reset ()\n\t\t\n\tdef reset (self):\n\t\tself.clear ()\t\n\t\tself.pensize (1)\n\t\tself.color ('black')\n\t\tself._heading = Math.PI / 2\n\t\tself.home ()\n\t\tself.down ()\n\t\t\n\tdef clear (self):\n\t\tself._path = []\n\t\t\n\tdef done (self):\n\t\tpath = document.createElementNS (_ns, 'path')\n\t\tpath.setAttribute ('stroke', 'none' if self._pencolor == None else self._pencolor)\n\t\tpath.setAttribute ('fill', 'none' if self._fillcolor == None else self._fillcolor)\t\t\t\n\t\tpath.setAttribute ('fill-rule', 'evenodd')\n\t\t\t\n\t\tpath.setAttribute ('d', self._path)\n\t\t_svg.appendChild (path)\n\t\t\n\tdef pensize (self, width):\n\t\tif width == None:\n\t\t\treturn self._pensize\n\t\telse:\n\t\t\tself._pensize = width\n\t\n\tdef color (self, pencolor, fillcolor = None):\n\t\tself._pencolor = pencolor\n\t\tself._fillcolor = fillcolor\n\t\n\tdef home (self):\n\t\tself.goto (0, 0)\n\t\n\tdef goto (self, x, y = None):\n\t\tif y == None:\n\t\t\tself._position = x\n\t\telse:\n\t\t\tself._position = [x, y]\n\t\t\t\n\t\tself._path.append ('{} {} {}'.format ('M', self._position [0] + _offset [0], self._position [1] + _offset [1]))\n\t\t\t\n\tdef position (self):\n\t\treturn self._position [:]\n\t\t\n\tdef pos (self):\n\t\treturn self.position ()\n\t\t\n\tdef distance (self, x, y = None):\n\t\tif y == None:\n\t\t\tother = x\n\t\telse:\n\t\t\tother = [x, y]\n\t\t\t\n\t\tdX = other [0] - self._position [0]\n\t\tdY = other [1] - self._position [1]\n\t\t\n\t\treturn Math.sqrt (dX * dX + dY * dY)\n\t\t\t\n\tdef up (self):\n\t\tself._down = False\n\t\t\n\tdef down (self):\n\t\tself._down = True\n\t\t\n\tdef forward (self, length):\n\t\tdelta = [Math.sin (self._heading), Math.cos (self._heading)]\t\t\t\n\n\t\tself._position [0] += length * delta [0]\n\t\tself._position [1] += length * delta [1]\n\t\t\n\t\tself._path.append ('{} {} {}'.format ('L' if self._down else 'M', self._position [0] + _offset [0], self._position [1] + _offset [1]))\n\t\t\n\tdef back (self, length):\n\t\tself.forward (-length)\n\t\t\n\tdef left (self, angle):\n\t\tself._heading = (self._heading + Math.PI * angle / 180) % (2 * Math.PI)\n\t\t\t\n\tdef right (self, angle): \n\t\tself.left (-angle)\n\t\t\n\tdef begin_fill (self):\n\t\tpass\n\t\n\tdef end_fill (self):\n\t\tpass\n\t\t\n_defaultTurtle = Turtle ()\n\t\ndef reset ():\t\t\t\t\t\t\t_defaultTurtle.reset ()\ndef clear ():\t\t\t\t\t\t\t_defaultTurtle.clear ()\ndef done ():\t\t\t\t\t\t\t_defaultTurtle.done ()\ndef pensize (width):\t\t\t\t\t_defaultTurtle.pensize (width)\ndef color (pencolor, fillcolor = None):\t_defaultTurtle.color (pencolor, fillcolor)\ndef home ():\t\t\t\t\t\t\t_defaultTurtle.home ()\ndef goto (x, y = None):\t\t\t\t\t_defaultTurtle.goto (x, y)\ndef position ():\t\t\t\t\t\treturn _defaultTurtle.position ()\ndef pos ():\t\t\t\t\t\t\t\treturn _defaultTurtle.pos ()\ndef distance (x, y = None):\t\t\t\treturn _defaultTurtle.distance (x, y)\ndef up ():\t\t\t\t\t\t\t\t_defaultTurtle.up ()\ndef down ():\t\t\t\t\t\t\t_defaultTurtle.down ()\ndef forward (length):\t\t\t\t\t_defaultTurtle.forward (length)\ndef back (length):\t\t\t\t\t\t_defaultTurtle.back (lenght)\ndef left (angle):\t\t\t\t\t\t_defaultTurtle.left (angle)\ndef right (angle):\t\t\t\t\t\t_defaultTurtle.right (angle)\ndef begin_fill ():\t\t\t\t\t\t_defaultTurtle.begin_fill ()\ndef end_fill ():\t\t\t\t\t\t_defaultTurtle.end_fill ()\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAKA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}