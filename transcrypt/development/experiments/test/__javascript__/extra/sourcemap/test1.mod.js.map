{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/experiments/test/__javascript__/test1.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/experiments/test/test1.py"
	],
	"sourcesContent": [
		"#! /usr/bin/env python\n\n\"\"\"\n\"PYSTONE\" Benchmark Program\n\nVersion:        Python/1.1 (corresponds to C/1.1 plus 2 Pystone fixes)\n\nAuthor:         Reinhold P. Weicker,  CACM Vol 27, No 10, 10/84 pg. 1013.\n\n                Translated from ADA to C by Rick Richardson.\n                Every method to preserve ADA-likeness has been used,\n                at the expense of C-ness.\n\n                Translated from C to Python by Guido van Rossum.\n\nVersion History:\n\n                Version 1.1 corrects two bugs in version 1.0:\n\n                First, it leaked memory: in Proc1(), NextRecord ends\n                up having a pointer to itself.  I have corrected this\n                by zapping NextRecord.PtrComp at the end of Proc1().\n\n                Second, Proc3() used the operator != to compare a\n                record to None.  This is rather inefficient and not\n                true to the intention of the original benchmark (where\n                a pointer comparison to None is intended; the !=\n                operator attempts to find a method __cmp__ to do value\n                comparison of the record).  Version 1.1 runs 5-10\n                percent faster than version 1.0, so benchmark figures\n                of different versions can't be compared directly.\n\n\"\"\"\n\nLOOPS = 50000\n\nfrom time import clock\n\n__version__ = \"1.1\"\n\n[Ident1, Ident2, Ident3, Ident4, Ident5] = range(1, 6)\n\nclass Record:\n\n    def __init__(self, PtrComp = None, Discr = 0, EnumComp = 0,\n                       IntComp = 0, StringComp = 0):\n        self.PtrComp = PtrComp\n        self.Discr = Discr\n        self.EnumComp = EnumComp\n        self.IntComp = IntComp\n        self.StringComp = StringComp\n\n    def copy(self):\n        return Record(self.PtrComp, self.Discr, self.EnumComp,\n                      self.IntComp, self.StringComp)\n\nTRUE = 1\nFALSE = 0\n\ndef main(loops=LOOPS):\n    benchtime, stones = pystones(loops)\n    print (f\"Pystone({__version__}) time for {loops} passes = {benchtime}\")\n    print (f\"This machine benchmarks at {stones} pystones/second\")\n\n\ndef pystones(loops=LOOPS):\n    return Proc0(loops)\n\nIntGlob = 0\nBoolGlob = FALSE\nChar1Glob = '\\0'\nChar2Glob = '\\0'\nArray1Glob = [0]*51\nArray2Glob = map(lambda x: x[:], [Array1Glob]*51)\nPtrGlb = None\nPtrGlbNext = None\n\ndef Proc0(loops=LOOPS):\n    global IntGlob\n    global BoolGlob\n    global Char1Glob\n    global Char2Glob\n    global Array1Glob\n    global Array2Glob\n    global PtrGlb\n    global PtrGlbNext\n\n    starttime = clock()\n    for i in range(loops):\n        pass\n    nulltime = clock() - starttime\n\n    PtrGlbNext = Record()\n    PtrGlb = Record()\n    PtrGlb.PtrComp = PtrGlbNext\n    PtrGlb.Discr = Ident1\n    PtrGlb.EnumComp = Ident3\n    PtrGlb.IntComp = 40\n    PtrGlb.StringComp = \"DHRYSTONE PROGRAM, SOME STRING\"\n    String1Loc = \"DHRYSTONE PROGRAM, 1'ST STRING\"\n    Array2Glob[8][7] = 10\n\n    starttime = clock()\n\n    for i in range(loops):\n        Proc5()\n        Proc4()\n        IntLoc1 = 2\n        IntLoc2 = 3\n        String2Loc = \"DHRYSTONE PROGRAM, 2'ND STRING\"\n        EnumLoc = Ident2\n        BoolGlob = not Func2(String1Loc, String2Loc)\n        while IntLoc1 < IntLoc2:\n            IntLoc3 = 5 * IntLoc1 - IntLoc2\n            IntLoc3 = Proc7(IntLoc1, IntLoc2)\n            IntLoc1 = IntLoc1 + 1\n        Proc8(Array1Glob, Array2Glob, IntLoc1, IntLoc3)\n        PtrGlb = Proc1(PtrGlb)\n        CharIndex = 'A'\n        while CharIndex <= Char2Glob:\n            if EnumLoc == Func1(CharIndex, 'C'):\n                EnumLoc = Proc6(Ident1)\n            CharIndex = chr(ord(CharIndex)+1)\n        IntLoc3 = IntLoc2 * IntLoc1\n        IntLoc2 = IntLoc3 / IntLoc1\n        IntLoc2 = 7 * (IntLoc3 - IntLoc2) - IntLoc1\n        IntLoc1 = Proc2(IntLoc1)\n\n    benchtime = clock() - starttime - nulltime\n    if benchtime == 0.0:\n        loopsPerBenchtime = 0.0\n    else:\n        loopsPerBenchtime = (loops / benchtime)\n    return benchtime, loopsPerBenchtime\n\ndef Proc1(PtrParIn):\n    PtrParIn.PtrComp = NextRecord = PtrGlb.copy()\n    PtrParIn.IntComp = 5\n    NextRecord.IntComp = PtrParIn.IntComp\n    NextRecord.PtrComp = PtrParIn.PtrComp\n    NextRecord.PtrComp = Proc3(NextRecord.PtrComp)\n    if NextRecord.Discr == Ident1:\n        NextRecord.IntComp = 6\n        NextRecord.EnumComp = Proc6(PtrParIn.EnumComp)\n        NextRecord.PtrComp = PtrGlb.PtrComp\n        NextRecord.IntComp = Proc7(NextRecord.IntComp, 10)\n    else:\n        PtrParIn = NextRecord.copy()\n    NextRecord.PtrComp = None\n    return PtrParIn\n\ndef Proc2(IntParIO):\n    IntLoc = IntParIO + 10\n    while 1:\n        if Char1Glob == 'A':\n            IntLoc = IntLoc - 1\n            IntParIO = IntLoc - IntGlob\n            EnumLoc = Ident1\n        if EnumLoc == Ident1:\n            break\n    return IntParIO\n\ndef Proc3(PtrParOut):\n    global IntGlob\n\n    if PtrGlb is not None:\n        PtrParOut = PtrGlb.PtrComp\n    else:\n        IntGlob = 100\n    PtrGlb.IntComp = Proc7(10, IntGlob)\n    return PtrParOut\n\ndef Proc4():\n    global Char2Glob\n\n    BoolLoc = Char1Glob == 'A'\n    BoolLoc = BoolLoc or BoolGlob\n    Char2Glob = 'B'\n\ndef Proc5():\n    global Char1Glob\n    global BoolGlob\n\n    Char1Glob = 'A'\n    BoolGlob = FALSE\n\ndef Proc6(EnumParIn):\n    EnumParOut = EnumParIn\n    if not Func3(EnumParIn):\n        EnumParOut = Ident4\n    if EnumParIn == Ident1:\n        EnumParOut = Ident1\n    elif EnumParIn == Ident2:\n        if IntGlob > 100:\n            EnumParOut = Ident1\n        else:\n            EnumParOut = Ident4\n    elif EnumParIn == Ident3:\n        EnumParOut = Ident2\n    elif EnumParIn == Ident4:\n        pass\n    elif EnumParIn == Ident5:\n        EnumParOut = Ident3\n    return EnumParOut\n\ndef Proc7(IntParI1, IntParI2):\n    IntLoc = IntParI1 + 2\n    IntParOut = IntParI2 + IntLoc\n    return IntParOut\n\ndef Proc8(Array1Par, Array2Par, IntParI1, IntParI2):\n    global IntGlob\n\n    IntLoc = IntParI1 + 5\n    Array1Par[IntLoc] = IntParI2\n    Array1Par[IntLoc+1] = Array1Par[IntLoc]\n    Array1Par[IntLoc+30] = IntLoc\n    for IntIndex in range(IntLoc, IntLoc+2):\n        Array2Par[IntLoc][IntIndex] = IntLoc\n    Array2Par[IntLoc][IntLoc-1] = Array2Par[IntLoc][IntLoc-1] + 1\n    Array2Par[IntLoc+20][IntLoc] = Array1Par[IntLoc]\n    IntGlob = 5\n\ndef Func1(CharPar1, CharPar2):\n    CharLoc1 = CharPar1\n    CharLoc2 = CharLoc1\n    if CharLoc2 != CharPar2:\n        return Ident1\n    else:\n        return Ident2\n\ndef Func2(StrParI1, StrParI2):\n    IntLoc = 1\n    while IntLoc <= 1:\n        if Func1(StrParI1[IntLoc], StrParI2[IntLoc+1]) == Ident1:\n            CharLoc = 'A'\n            IntLoc = IntLoc + 1\n    if CharLoc >= 'W' and CharLoc <= 'Z':\n        IntLoc = 7\n    if CharLoc == 'X':\n        return TRUE\n    else:\n        if StrParI1 > StrParI2:\n            IntLoc = IntLoc + 7\n            return TRUE\n        else:\n            return FALSE\n\ndef Func3(EnumParIn):\n    EnumLoc = EnumParIn\n    if EnumLoc == Ident3: return TRUE\n    return FALSE\n\nif __name__ == '__main__':\n    import sys\n    def error(msg):\n        print >>sys.stderr, msg,\n        print >>sys.stderr, \"usage: %s [number_of_loops]\" % sys.argv[0]\n        sys.exit(100)\n    nargs = len(sys.argv) - 1\n    if nargs > 1:\n        error(\"%d arguments are too many;\" % nargs)\n    elif nargs == 1:\n        try: loops = int(sys.argv[1])\n        except ValueError:\n            error(\"Invalid argument %r;\" % sys.argv[1])\n    else:\n        loops = LOOPS\n    main(loops)"
	],
	"mappings": "AAAA;AA4QA;AA5QA;AAkCA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AAAA;AAEA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}