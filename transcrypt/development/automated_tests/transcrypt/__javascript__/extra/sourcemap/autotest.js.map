{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/__javascript__/autotest.js",
	"sources": [
		"",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/org/transcrypt/__javascript__/__core__.mod.js",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/org/transcrypt/__base__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/org/transcrypt/__standard__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/org/transcrypt/__javascript__/__builtin__.mod.js",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/arguments/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/attribs_by_name/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/callable_test/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/classes/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/cmath/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/complex_numbers/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/conditional_expressions/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/control_structures/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/data_structures/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/decorators/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/dict_comprehensions/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/dictionaries/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/div_issues/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/div_issues/issue55/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/div_issues/issue55/a.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/div_issues/issue55/sub1.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/div_issues/issue55/sub2/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/div_issues/issue55/sub3.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/div_pulls/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/docstrings/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/exceptions/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/extended_slices/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/general_functions/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/indices_and_slices/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/itertools/__javascript__/__init__.mod.js",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/lambda_functions/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/list_comprehensions/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/local_classes/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/math/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/metaclasses/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/module_builtin/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/module_cmath/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/module_math/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/modules/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod1/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod1/mod11/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod1/mod11/mod111.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod1/mod11/mod112.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod2/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod2/mod21.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod2/mod22.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod3.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/nonlocals/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/operator_overloading/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/org/transcrypt/autotester/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/org/transcrypt/autotester/html.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/properties/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/reprtest/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/set_comprehensions/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/simple_and_augmented_assignment/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/truthyness/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/tuple_assignment/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/autotest.py"
	],
	"sourcesContent": [
		"__pragma__ ('padding')",
		"    var __all__ = {};\n    var __world__ = __all__;\n    \n    // Nested object creator, part of the nesting may already exist and have attributes\n    var __nest__ = function (headObject, tailNames, value) {\n        // In some cases this will be a global object, e.g. 'window'\n        var current = headObject;\n        \n        if (tailNames != '') {  // Split on empty string doesn't give empty list\n            // Find the last already created object in tailNames\n            var tailChain = tailNames.split ('.');\n            var firstNewIndex = tailChain.length;\n            for (var index = 0; index < tailChain.length; index++) {\n                if (!current.hasOwnProperty (tailChain [index])) {\n                    firstNewIndex = index;\n                    break;\n                }\n                current = current [tailChain [index]];\n            }\n            \n            // Create the rest of the objects, if any\n            for (var index = firstNewIndex; index < tailChain.length; index++) {\n                current [tailChain [index]] = {};\n                current = current [tailChain [index]];\n            }\n        }\n        \n        // Insert it new attributes, it may have been created earlier and have other attributes\n        for (var attrib in value) {\n            current [attrib] = value [attrib];          \n        }       \n    };\n    __all__.__nest__ = __nest__;\n    \n    // Initialize module if not yet done and return its globals\n    var __init__ = function (module) {\n        if (!module.__inited__) {\n            module.__all__.__init__ (module.__all__);\n            module.__inited__ = true;\n        }\n        return module.__all__;\n    };\n    __all__.__init__ = __init__;\n    \n    \n__pragma__ ('ifdef', '__esv6__')\n    // Proxy switch, controlled by __pragma__ ('proxy') and __pragma ('noproxy')\n    var __proxy__ = false;  // No use assigning it to __all__, only its transient state is important\n__pragma__ ('endif')\n    \n    \n    // Since we want to assign functions, a = b.f should make b.f produce a bound function\n    // So __get__ should be called by a property rather then a function\n    // Factory __get__ creates one of three curried functions for func\n    // Which one is produced depends on what's to the left of the dot of the corresponding JavaScript property\n    var __get__ = function (self, func, quotedFuncName) {\n        if (self) {\n            if (self.hasOwnProperty ('__class__') || typeof self == 'string' || self instanceof String) {           // Object before the dot\n                if (quotedFuncName) {                                   // Memoize call since fcall is on, by installing bound function in instance\n                    Object.defineProperty (self, quotedFuncName, {      // Will override the non-own property, next time it will be called directly\n                        value: function () {                            // So next time just call curry function that calls function\n                            var args = [] .slice.apply (arguments);\n                            return func.apply (null, [self] .concat (args));\n                        },              \n                        writable: true,\n                        enumerable: true,\n                        configurable: true\n                    });\n                }\n                return function () {                                    // Return bound function, code dupplication for efficiency if no memoizing\n                    var args = [] .slice.apply (arguments);             // So multilayer search prototype, apply __get__, call curry func that calls func\n                    return func.apply (null, [self] .concat (args));\n                };\n            }\n            else {                                                      // Class before the dot\n                return func;                                            // Return static method\n            }\n        }\n        else {                                                          // Nothing before the dot\n            return func;                                                // Return free function\n        }\n    }\n    __all__.__get__ = __get__;\n        \n    // Mother of all metaclasses        \n    var py_metatype = {\n        __name__: 'type',\n        __bases__: [],\n        \n        // Overridable class creation worker\n        __new__: function (meta, name, bases, attribs) {\n            // Create the class cls, a functor, which the class creator function will return\n            var cls = function () {                     // If cls is called with arg0, arg1, etc, it calls its __new__ method with [arg0, arg1, etc]\n                var args = [] .slice.apply (arguments); // It has a __new__ method, not yet but at call time, since it is copied from the parent in the loop below\n                return cls.__new__ (args);              // Each Python class directly or indirectly derives from object, which has the __new__ method\n            };                                          // If there are no bases in the Python source, the compiler generates [object] for this parameter\n            \n            // Copy all methods, including __new__, properties and static attributes from base classes to new cls object\n            // The new class object will simply be the prototype of its instances\n            // JavaScript prototypical single inheritance will do here, since any object has only one class\n            // This has nothing to do with Python multiple inheritance, that is implemented explictly in the copy loop below\n            for (var index = bases.length - 1; index >= 0; index--) {   // Reversed order, since class vars of first base should win\n                var base = bases [index];\n                for (var attrib in base) {\n                    var descrip = Object.getOwnPropertyDescriptor (base, attrib);\n                    Object.defineProperty (cls, attrib, descrip);\n                }           \n__pragma__ ('ifdef', '__esv6__')\n\n                for (var symbol of Object.getOwnPropertySymbols (base)) {\n                    var descrip = Object.getOwnPropertyDescriptor (base, symbol);\n                    Object.defineProperty (cls, symbol, descrip);\n                }\n                \n__pragma__ ('endif')\n            }\n            \n            // Add class specific attributes to the created cls object\n            cls.__metaclass__ = meta;\n            cls.__name__ = name;\n            cls.__bases__ = bases;\n            \n            // Add own methods, properties and own static attributes to the created cls object\n            for (var attrib in attribs) {\n                var descrip = Object.getOwnPropertyDescriptor (attribs, attrib);\n                Object.defineProperty (cls, attrib, descrip);\n            }\n__pragma__ ('ifdef', '__esv6__')\n\n            for (var symbol of Object.getOwnPropertySymbols (attribs)) {\n                var descrip = Object.getOwnPropertyDescriptor (attribs, symbol);\n                Object.defineProperty (cls, symbol, descrip);\n            }\n            \n__pragma__ ('endif')\n            // Return created cls object\n            return cls;\n        }\n    };\n    py_metatype.__metaclass__ = py_metatype;\n    __all__.py_metatype = py_metatype;\n    \n    // Mother of all classes\n    var object = {\n        __init__: function (self) {},\n        \n        __metaclass__: py_metatype, // By default, all classes have metaclass type, since they derive from object\n        __name__: 'object',\n        __bases__: [],\n            \n        // Object creator function is inherited by all classes (so in principle it could be made global)\n        __new__: function (args) {  // Args are just the constructor args       \n            // In JavaScript the Python class is the prototype of the Python object\n            // In this way methods and static attributes will be available both with a class and an object before the dot\n            // The descriptor produced by __get__ will return the right method flavor\n            var instance = Object.create (this, {__class__: {value: this, enumerable: true}});\n            \n__pragma__ ('ifdef', '__esv6__')\n        if ('__getattr__' in this || '__setattr__' in this) {\n            instance = new Proxy (instance, {\n                get: function (target, name) {\n                    var result = target [name];\n                    if (result == undefined) {  // Target doesn't have attribute named name\n                        return target.__getattr__ (name);\n                    }\n                    else {\n                        return result;\n                    }\n                },\n                set: function (target, name, value) {\n                    try {\n                        target.__setattr__ (name, value);\n                    }\n                    catch (exception) {         // Target doesn't have a __setattr__ method\n                        target [name] = value;\n                    }\n                    return true;\n                }\n            })\n        }\n__pragma__ ('endif')\n\n            // Call constructor\n            this.__init__.apply (null, [instance] .concat (args));\n\n            // Return constructed instance\n            return instance;\n        }   \n    };\n    __all__.object = object;\n    \n    // Class creator facade function, calls class creation worker\n    var __class__ = function (name, bases, attribs, meta) {         // Parameter meta is optional\n        if (meta == undefined) {\n            meta = bases [0] .__metaclass__;\n        }\n                \n        return meta.__new__ (meta, name, bases, attribs);\n    }\n    __all__.__class__ = __class__;\n    \n    // Define __pragma__ to preserve '<all>' and '</all>', since it's never generated as a function, must be done early, so here\n    var __pragma__ = function () {};\n    __all__.__pragma__ = __pragma__;\n    \n    ",
		"# This module is avaible both in the Python and Transcrypt environments\n# It is included in-between the __core__ and the __builtin__ module, so the latter can adapt __envir__\n# In Transcrypt, __base__ is available inline, it isn't nested and cannot be imported in the normal way\n\nclass __Envir__:\n    def __init__ (self):\n        self.interpreter_name = 'python'\n        self.transpiler_name = 'transcrypt'\n        self.transpiler_version = '3.6.3'\n        self.target_subdir = '__javascript__'\n        \n__envir__ = __Envir__ ()",
		"# This module is avaible solely in the Transcrypt environment\n# It is included after the __builtin__ module, since it uses its facilities\n# In Transcrypt, __standard__ is available inline, it isn't nested and cannot be imported in the normal way\n\n__pragma__ ('skip')\ncopy = Math = __typeof__ = __repr__ = document = console = window = 0\n__pragma__ ('noskip')\n\n__pragma__ ('nokwargs')\n__pragma__ ('noalias', 'sort')\n\nclass Exception:\n    __pragma__ ('kwargs')\n    def __init__ (self, *args, **kwargs):\n        self.__args__ = args\n        try:\n            self.stack = kwargs.error.stack # Integrate with JavaScript Error object\n        except:\n            self.stack = 'No stack trace available'\n    __pragma__ ('nokwargs')\n        \n    def __repr__ (self):\n        if len (self.__args__):\n            return '{}{}'.format (self.__class__.__name__, repr (tuple (self.__args__)))\n        else:\n            return '{}()'.format (self.__class__.__name__)\n            \n    def __str__ (self):\n        if len (self.__args__) > 1:\n            return str (tuple (self.__args__))\n        elif len (self.__args__):\n            return str (self.__args__ [0])\n        else:\n            return ''\n        \nclass IterableError (Exception):\n    def __init__ (self, error):\n        Exception.__init__ (self, 'Can\\'t iterate over non-iterable', error = error)\n            \nclass StopIteration (Exception):\n    def __init__ (self, error):\n        Exception.__init__ (self, 'Iterator exhausted', error = error)\n        \nclass ValueError (Exception,):\n    def __init__ (self, error):\n        Exception.__init__ (self, 'Erroneous value', error = error)\n    \nclass KeyError (Exception,):\n    def __init__ (self, error):\n        Exception.__init__ (self, 'Invalid key', error = error)\n    \nclass AssertionError (Exception):\n    def __init__ (self, message, error):\n        if message:\n            Exception.__init__ (self, message, error = error)\n        else:\n            Exception.__init__ (self, error = error)\n\nclass NotImplementedError (Exception):\n    def __init__(self, message, error):\n        Exception.__init__(self, message, error = error)\n\nclass IndexError(Exception):\n    def __init__(self, message, error):\n        Exception.__init__(self, message, error = error)\n\nclass AttributeError(Exception):\n    def __init__(self, message, error):\n        Exception.__init__(self, message, error = error)\n\n# Warnings Exceptions\n# N.B. This is a limited subset of the warnings defined in\n# the cpython implementation to keep things small for now.\n\nclass Warning (Exception):\n    ''' Warning Base Class\n    '''\n    pass\n\nclass UserWarning (Warning):\n    pass\n\nclass DeprecationWarning (Warning):\n    pass\n\nclass RuntimeWarning (Warning):\n    pass\n\n__pragma__ ('kwargs')\n\ndef __sort__ (iterable, key = None, reverse = False):               # Used by py_sort, can deal with kwargs\n    if key:\n        iterable.sort (lambda a, b: 1 if key (a) > key (b) else -1) # JavaScript sort, case '==' is irrelevant for sorting\n    else:\n        iterable.sort ()                                            # JavaScript sort\n        \n    if reverse:\n        iterable.reverse ()\n        \ndef sorted (iterable, key = None, reverse = False):\n    if type (iterable) == dict:\n        result = copy (iterable.keys ()) \n    else:       \n        result = copy (iterable)\n        \n    __sort__ (result, key, reverse)\n    return result\n\n__pragma__ ('nokwargs')\n\ndef map (func, iterable):\n    return [func (item) for item in iterable]\n\n\ndef filter (func, iterable):\n    return [item for item in iterable if func (item)]\n    \n__pragma__ ('ifdef', '__complex__')\nclass complex:\n    def __init__ (self, real, imag = None):\n        if imag == None:\n            if type (real) == complex:\n                self.real = real.real\n                self.imag = real.imag\n            else:\n                self.real = real\n                self.imag = 0\n        else:\n            self.real = real\n            self.imag = imag\n            \n    def __neg__ (self):\n        return complex (-self.real, -self.imag)\n        \n    def __exp__ (self):\n        modulus = Math.exp (self.real)\n        return complex (modulus * Math.cos (self.imag), modulus * Math.sin (self.imag))\n    \n    def __log__ (self):\n        return complex (Math.log (Math.sqrt (self.real * self.real + self.imag * self.imag)), Math.atan2 (self.imag, self.real))\n        \n    def __pow__ (self, other):  # a ** b = exp (b log a)\n        return (self.__log__ () .__mul__ (other)) .__exp__ ()\n        \n    def __rpow__ (self, real):  # real ** comp -> comp.__rpow__ (real)\n        return self.__mul__ (Math.log (real)) .__exp__ ()\n        \n    def __mul__ (self, other):\n        if __typeof__ (other) is 'number':\n            return complex (self.real * other, self.imag * other)\n        else:\n            return complex (self.real * other.real - self.imag * other.imag, self.real * other.imag + self.imag * other.real)\n        \n    def __rmul__ (self, real):  # real + comp -> comp.__rmul__ (real)\n        return complex (self.real * real, self.imag * real)\n        \n    def __div__ (self, other):\n        if __typeof__ (other) is 'number':\n            return complex (self.real / other, self.imag / other)\n        else:\n            denom = other.real * other.real + other.imag * other.imag\n            return complex (\n                (self.real * other.real + self.imag * other.imag) / denom,\n                (self.imag * other.real - self.real * other.imag) / denom\n            )\n        \n    def __rdiv__ (self, real):  # real / comp -> comp.__rdiv__ (real)\n        denom = self.real * self.real\n        return complex (\n            (real * self.real) / denom,\n            (real * self.imag) / denom\n        )\n        \n    def __add__ (self, other):\n        if __typeof__ (other) is 'number':\n            return complex (self.real + other, self.imag)\n        else:   # Assume other is complex\n            return complex (self.real + other.real, self.imag + other.imag)\n        \n    def __radd__ (self, real):  # real + comp -> comp.__radd__ (real)\n        return complex (self.real + real, self.imag)\n        \n    def __sub__ (self, other):\n        if __typeof__ (other) is 'number':\n            return complex (self.real - other, self.imag)\n        else:\n            return complex (self.real - other.real, self.imag - other.imag)\n        \n    def __rsub__ (self, real):  # real - comp -> comp.__rsub__ (real)\n        return complex (real - self.real, -self.imag)\n        \n    def __repr__ (self):\n        return '({}{}{}j)'.format (self.real, '+' if self.imag >= 0 else '', self.imag)\n            \n    def __str__ (self):\n        return __repr__ (self) [1 : -1]\n        \n__pragma__ ('endif')\n\nclass __Terminal__:\n    '''\n    Printing to either the console or to html happens async, but is blocked by calling window.prompt.\n    So while all input and print statements are encountered in normal order, the print's exit immediately without yet having actually printed\n    This means the next input takes control, blocking actual printing and so on indefinitely\n    The effect is that everything's only printed after all inputs are done\n    To prevent that, what's needed is to only execute the next window.prompt after actual printing has been done\n    Since we've no way to find out when that is, a timeout is used.\n    '''\n\n    def __init__ (self):\n        self.buffer = ''\n    \n        try:\n            self.element = document.getElementById ('__terminal__')\n        except:\n            self.element = None\n            \n        if self.element:\n            self.element.style.overflowX = 'auto'\n            self.element.style.boxSizing = 'border-box'\n            self.element.style.padding = '5px'\n            self.element.innerHTML = '_'\n        \n    __pragma__ ('kwargs')\n        \n    def print (self, *args, sep = ' ', end = '\\n'):\n        self.buffer = '{}{}{}'.format (self.buffer, sep.join ([str (arg) for arg in args]), end) [-4096 : ] \n        \n        if self.element:\n            self.element.innerHTML = self.buffer.replace ('\\n', '<br>')\n            self.element.scrollTop = self.element.scrollHeight\n        else:\n            console.log (sep.join ([str (arg) for arg in args]))\n        \n    def input (self, question):\n        self.print ('{}'.format (question), end = '')\n        answer = window.prompt ('\\n'.join (self.buffer.split ('\\n') [-16:]))\n        self.print (answer)\n        return answer\n        \n    __pragma__ ('nokwargs')\n    \n__terminal__ = __Terminal__ ()\n",
		"\n    // Initialize non-nested modules __base__ and __standard__ and make its names available directly and via __all__\n    // They can't do that itself, because they're regular Python modules\n    // The compiler recognizes their names and generates them inline rather than nesting them\n    // In this way it isn't needed to import them everywhere\n\n    // __base__\n\n    __nest__ (__all__, '', __init__ (__all__.org.transcrypt.__base__));\n    var __envir__ = __all__.__envir__;\n\n    // __standard__\n\n    __nest__ (__all__, '', __init__ (__all__.org.transcrypt.__standard__));\n\n    var Exception = __all__.Exception;\n    var IterableError = __all__.IterableError;\n    var StopIteration = __all__.StopIteration;\n    var ValueError = __all__.ValueError;\n    var KeyError = __all__.KeyError;\n    var AssertionError = __all__.AssertionError;\n    var NotImplementedError = __all__.NotImplementedError;\n    var IndexError = __all__.IndexError;\n    var AttributeError = __all__.AttributeError;\n\n    // Warnings Exceptions\n    var Warning = __all__.Warning;\n    var UserWarning = __all__.UserWarning;\n    var DeprecationWarning = __all__.DeprecationWarning;\n    var RuntimeWarning = __all__.RuntimeWarning;\n\n    var __sort__ = __all__.__sort__;\n    var sorted = __all__.sorted;\n\n    var map = __all__.map;\n    var filter = __all__.filter;\n\n__pragma__ ('ifdef', '__complex__')\n    var complex = __all__.complex;\n__pragma__ ('endif')\n    __all__.print = __all__.__terminal__.print;\n    __all__.input = __all__.__terminal__.input;\n\n    var __terminal__ = __all__.__terminal__;\n    var print = __all__.print;\n    var input = __all__.input;\n\n    // Complete __envir__, that was created in __base__, for non-stub mode\n    __envir__.executor_name = __envir__.transpiler_name;\n\n    // Make make __main__ available in browser\n    var __main__ = {__file__: ''};\n    __all__.main = __main__;\n\n    // Define current exception, there's at most one exception in the air at any time\n    var __except__ = null;\n    __all__.__except__ = __except__;\n    \n     // Creator of a marked dictionary, used to pass **kwargs parameter\n    var __kwargtrans__ = function (anObject) {\n        anObject.__kwargtrans__ = null; // Removable marker\n        anObject.constructor = Object;\n        return anObject;\n    }\n    __all__.__kwargtrans__ = __kwargtrans__;\n\n    // Property installer function, no member since that would bloat classes\n    var property = function (getter, setter) {  // Returns a property descriptor rather than a property\n        if (!setter) {  // ??? Make setter optional instead of dummy?\n            setter = function () {};\n        }\n        return {get: function () {return getter (this)}, set: function (value) {setter (this, value)}, enumerable: true};\n    }\n    __all__.property = property;\n\n    // Assert function, call to it only generated when compiling with --dassert option\n    function assert (condition, message) {  // Message may be undefined\n        if (!condition) {\n            throw AssertionError (message, new Error ());\n        }\n    }\n\n    __all__.assert = assert;\n\n    var __merge__ = function (object0, object1) {\n        var result = {};\n        for (var attrib in object0) {\n            result [attrib] = object0 [attrib];\n        }\n        for (var attrib in object1) {\n            result [attrib] = object1 [attrib];\n        }\n        return result;\n    };\n    __all__.__merge__ = __merge__;\n\n    // Manipulating attributes by name\n\n    var dir = function (obj) {\n        var aList = [];\n        for (var aKey in obj) {\n            aList.push (aKey);\n        }\n        aList.sort ();\n        return aList;\n    };\n\n    var setattr = function (obj, name, value) {\n        obj [name] = value;\n    };\n\n    __all__.setattr = setattr;\n\n    var getattr = function (obj, name) {\n        return obj [name];\n    };\n\n    __all__.getattr= getattr;\n\n    var hasattr = function (obj, name) {\n        return name in obj;\n    };\n    __all__.hasattr = hasattr;\n\n    var delattr = function (obj, name) {\n        delete obj [name];\n    };\n    __all__.delattr = (delattr);\n\n    // The __in__ function, used to mimic Python's 'in' operator\n    // In addition to CPython's semantics, the 'in' operator is also allowed to work on objects, avoiding a counterintuitive separation between Python dicts and JavaScript objects\n    // In general many Transcrypt compound types feature a deliberate blend of Python and JavaScript facilities, facilitating efficient integration with JavaScript libraries\n    // If only Python objects and Python dicts are dealt with in a certain context, the more pythonic 'hasattr' is preferred for the objects as opposed to 'in' for the dicts\n    var __in__ = function (element, container) {\n        if (py_typeof (container) == dict) {        // Currently only implemented as an augmented JavaScript object\n            return container.hasOwnProperty (element);\n        }\n        else {                                      // Parameter 'element' itself is an array, string or a plain, non-dict JavaScript object\n            return (\n                container.indexOf ?                 // If it has an indexOf\n                container.indexOf (element) > -1 :  // it's an array or a string,\n                container.hasOwnProperty (element)  // else it's a plain, non-dict JavaScript object\n            );\n        }\n    };\n    __all__.__in__ = __in__;\n\n    // Find out if an attribute is special\n    var __specialattrib__ = function (attrib) {\n        return (attrib.startswith ('__') && attrib.endswith ('__')) || attrib == 'constructor' || attrib.startswith ('py_');\n    };\n    __all__.__specialattrib__ = __specialattrib__;\n\n    // Len function for any object\n    var len = function (anObject) {\n        if (anObject) {\n            var l = anObject.length;\n            if (l == undefined) {\n                var result = 0;\n                for (var attrib in anObject) {\n                    if (!__specialattrib__ (attrib)) {\n                        result++;\n                    }\n                }\n                return result;\n            }\n            else {\n                return l;\n            }\n        }\n        else {\n            return 0;\n        }\n    };\n    __all__.len = len;\n\n    // General conversions\n\n    function __i__ (any) {  //  Conversion to iterable\n        return py_typeof (any) == dict ? any.py_keys () : any;\n    }\n\n    function __t__ (any) {  // Conversion to truthyness, __ ([1, 2, 3]) returns [1, 2, 3], needed for nonempty selection: l = list1 or list2]\n        return (['boolean', 'number'] .indexOf (typeof any) >= 0 || any instanceof Function || len (any)) ? any : false;\n        // JavaScript functions have a length attribute, denoting the number of parameters\n        // Python objects are JavaScript functions, but their length doesn't matter, only their existence\n        // By the term 'any instanceof Function' we make sure that Python objects aren't rejected when their length equals zero\n    }\n    __all__.__t__ = __t__;\n\n    var bool = function (any) {     // Always truly returns a bool, rather than something truthy or falsy\n        return !!__t__ (any);\n    };\n    bool.__name__ = 'bool';         // So it can be used as a type with a name\n    __all__.bool = bool;\n\n    var float = function (any) {\n        if (any == 'inf') {\n            return Infinity;\n        }\n        else if (any == '-inf') {\n            return -Infinity;\n        }\n        else if (isNaN (any)) {\n            throw ValueError (new Error ());\n        }\n        else {\n            return +any;\n        }\n    };\n    float.__name__ = 'float';\n    __all__.float = float;\n\n    var int = function (any) {\n        return float (any) | 0\n    };\n    int.__name__ = 'int';\n    __all__.int = int;\n\n    var py_typeof = function (anObject) {\n        var aType = typeof anObject;\n        if (aType == 'object') {    // Directly trying '__class__ in anObject' turns out to wreck anObject in Chrome if its a primitive\n            try {\n                return anObject.__class__;\n            }\n            catch (exception) {\n                return aType;\n            }\n        }\n        else {\n            return (    // Odly, the braces are required here\n                aType == 'boolean' ? bool :\n                aType == 'string' ? str :\n                aType == 'number' ? (anObject % 1 == 0 ? int : float) :\n                null\n            );\n        }\n    };\n    __all__.py_typeof = py_typeof;\n\n    var isinstance = function (anObject, classinfo) {\n        function isA (queryClass) {\n            if (queryClass == classinfo) {\n                return true;\n            }\n            for (var index = 0; index < queryClass.__bases__.length; index++) {\n                if (isA (queryClass.__bases__ [index], classinfo)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        if (classinfo instanceof Array) {   // Assume in most cases it isn't, then making it recursive rather than two functions saves a call\n__pragma__ ('ifdef', '__esv6__')\n            for (let aClass of classinfo) {\n__pragma__ ('else')\n            for (var index = 0; index < classinfo.length; index++) {\n                var aClass = classinfo [index];\n__pragma__ ('endif')\n                if (isinstance (anObject, aClass)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        try {                   // Most frequent use case first\n            return '__class__' in anObject ? isA (anObject.__class__) : anObject instanceof classinfo;\n        }\n        catch (exception) {     // Using isinstance on primitives asumed rare\n            var aType = py_typeof (anObject);\n            return aType == classinfo || (aType == bool && classinfo == int);\n        }\n    };\n    __all__.isinstance = isinstance;\n\n    var callable = function (anObject) {\n        if ( typeof anObject == 'object' && '__call__' in anObject ) {\n            return true;\n        }\n        else {\n            return typeof anObject === 'function';\n        }\n    };\n    __all__.callable = callable;\n\n    // Repr function uses __repr__ method, then __str__, then toString\n    var repr = function (anObject) {\n        try {\n            return anObject.__repr__ ();\n        }\n        catch (exception) {\n            try {\n                return anObject.__str__ ();\n            }\n            catch (exception) { // anObject has no __repr__ and no __str__\n                try {\n                    if (anObject == null) {\n                        return 'None';\n                    }\n                    else if (anObject.constructor == Object) {\n                        var result = '{';\n                        var comma = false;\n                        for (var attrib in anObject) {\n                            if (!__specialattrib__ (attrib)) {\n                                if (attrib.isnumeric ()) {\n                                    var attribRepr = attrib;                // If key can be interpreted as numerical, we make it numerical\n                                }                                           // So we accept that '1' is misrepresented as 1\n                                else {\n                                    var attribRepr = '\\'' + attrib + '\\'';  // Alpha key in dict\n                                }\n\n                                if (comma) {\n                                    result += ', ';\n                                }\n                                else {\n                                    comma = true;\n                                }\n                                result += attribRepr + ': ' + repr (anObject [attrib]);\n                            }\n                        }\n                        result += '}';\n                        return result;\n                    }\n                    else {\n                        return typeof anObject == 'boolean' ? anObject.toString () .capitalize () : anObject.toString ();\n                    }\n                }\n                catch (exception) {\n                    console.log ('ERROR: Could not evaluate repr (<object of type ' + typeof anObject + '>)');\n                    console.log (exception);\n                    return '???';\n                }\n            }\n        }\n    };\n    __all__.repr = repr;\n\n    // Char from Unicode or ASCII\n    var chr = function (charCode) {\n        return String.fromCharCode (charCode);\n    };\n    __all__.chr = chr;\n\n    // Unicode or ASCII from char\n    var ord = function (aChar) {\n        return aChar.charCodeAt (0);\n    };\n    __all__.org = ord;\n\n    // Maximum of n numbers\n    var max = Math.max;\n    __all__.max = max;\n\n    // Minimum of n numbers\n    var min = Math.min;\n    __all__.min = min;\n\n    // Absolute value\n__pragma__ ('ifdef', '__complex__')\n    var abs = function (x) {\n        try {\n            return Math.abs (x);\n        }\n        catch (exception) {\n            return Math.sqrt (x.real * x.real + x.imag * x.imag);\n        }\n    };\n__pragma__ ('else')\n    var abs = Math.abs;\n    __all__.abs = abs;\n__pragma__ ('endif')\n\n    // Bankers rounding\n    var round = function (number, ndigits) {\n        if (ndigits) {\n            var scale = Math.pow (10, ndigits);\n            number *= scale;\n        }\n\n        var rounded = Math.round (number);\n        if (rounded - number == 0.5 && rounded % 2) {   // Has rounded up to odd, should have rounded down to even\n            rounded -= 1;\n        }\n\n        if (ndigits) {\n            rounded /= scale;\n        }\n\n        return rounded;\n    };\n    __all__.round = round;\n\n    // BEGIN unified iterator model\n\n    function __jsUsePyNext__ () {       // Add as 'next' method to make Python iterator JavaScript compatible\n        try {\n            var result = this.__next__ ();\n            return {value: result, done: false};\n        }\n        catch (exception) {\n            return {value: undefined, done: true};\n        }\n    }\n\n    function __pyUseJsNext__ () {       // Add as '__next__' method to make JavaScript iterator Python compatible\n        var result = this.next ();\n        if (result.done) {\n            throw StopIteration (new Error ());\n        }\n        else {\n            return result.value;\n        }\n    }\n\n    function py_iter (iterable) {                   // Alias for Python's iter function, produces a universal iterator / iterable, usable in Python and JavaScript\n        if (typeof iterable == 'string' || '__iter__' in iterable) {    // JavaScript Array or string or Python iterable (string has no 'in')\n            var result = iterable.__iter__ ();                          // Iterator has a __next__\n            result.next = __jsUsePyNext__;                              // Give it a next\n        }\n        else if ('selector' in iterable) {                              // Assume it's a JQuery iterator\n            var result = list (iterable) .__iter__ ();                  // Has a __next__\n            result.next = __jsUsePyNext__;                              // Give it a next\n        }\n        else if ('next' in iterable) {                                  // It's a JavaScript iterator already,  maybe a generator, has a next and may have a __next__\n            var result = iterable\n            if (! ('__next__' in result)) {                             // If there's no danger of recursion\n                result.__next__ = __pyUseJsNext__;                      // Give it a __next__\n            }\n        }\n        else if (Symbol.iterator in iterable) {                         // It's a JavaScript iterable such as a typed array, but not an iterator\n            var result = iterable [Symbol.iterator] ();                 // Has a next\n            result.__next__ = __pyUseJsNext__;                          // Give it a __next__\n        }\n        else {\n            throw IterableError (new Error ()); // No iterator at all\n        }\n        result [Symbol.iterator] = function () {return result;};\n        return result;\n    }\n\n    function py_next (iterator) {               // Called only in a Python context, could receive Python or JavaScript iterator\n        try {                                   // Primarily assume Python iterator, for max speed\n            var result = iterator.__next__ ();\n        }\n        catch (exception) {                     // JavaScript iterators are the exception here\n            var result = iterator.next ();\n            if (result.done) {\n                throw StopIteration (new Error ());\n            }\n            else {\n                return result.value;\n            }\n        }\n        if (result == undefined) {\n            throw StopIteration (new Error ());\n        }\n        else {\n            return result;\n        }\n    }\n\n    function __PyIterator__ (iterable) {\n        this.iterable = iterable;\n        this.index = 0;\n    }\n\n    __PyIterator__.prototype.__next__ = function () {\n        if (this.index < this.iterable.length) {\n            return this.iterable [this.index++];\n        }\n        else {\n            throw StopIteration (new Error ());\n        }\n    };\n\n    function __JsIterator__ (iterable) {\n        this.iterable = iterable;\n        this.index = 0;\n    }\n\n    __JsIterator__.prototype.next = function () {\n        if (this.index < this.iterable.py_keys.length) {\n            return {value: this.index++, done: false};\n        }\n        else {\n            return {value: undefined, done: true};\n        }\n    };\n\n    // END unified iterator model\n\n    // Reversed function for arrays\n    var py_reversed = function (iterable) {\n        iterable = iterable.slice ();\n        iterable.reverse ();\n        return iterable;\n    };\n    __all__.py_reversed = py_reversed;\n\n    // Zip method for arrays\n    var zip = function () {\n        var args = [] .slice.call (arguments);\n        var shortest = args.length == 0 ? [] : args.reduce (    // Find shortest array in arguments\n            function (array0, array1) {\n                return array0.length < array1.length ? array0 : array1;\n            }\n        );\n        return shortest.map (                   // Map each element of shortest array\n            function (current, index) {         // To the result of this function\n                return args.map (               // Map each array in arguments\n                    function (current) {        // To the result of this function\n                        return current [index]; // Namely it's index't entry\n                    }\n                );\n            }\n        );\n    };\n    __all__.zip = zip;\n\n    // Range method, returning an array\n    function range (start, stop, step) {\n        if (stop == undefined) {\n            // one param defined\n            stop = start;\n            start = 0;\n        }\n        if (step == undefined) {\n            step = 1;\n        }\n        if ((step > 0 && start >= stop) || (step < 0 && start <= stop)) {\n            return [];\n        }\n        var result = [];\n        for (var i = start; step > 0 ? i < stop : i > stop; i += step) {\n            result.push(i);\n        }\n        return result;\n    };\n    __all__.range = range;\n\n    // Any, all and sum\n\n__pragma__ ('ifdef', '__esv6__')\n    function any (iterable) {\n        for (let item of iterable) {\n            if (bool (item)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    function all (iterable) {\n        for (let item of iterable) {\n            if (! bool (item)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function sum (iterable) {\n        let result = 0;\n        for (let item of iterable) {\n            result += item;\n        }\n        return result;\n    }\n__pragma__ ('else')\n    function any (iterable) {\n        for (var index = 0; index < iterable.length; index++) {\n            if (bool (iterable [index])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    function all (iterable) {\n        for (var index = 0; index < iterable.length; index++) {\n            if (! bool (iterable [index])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function sum (iterable) {\n        var result = 0;\n        for (var index = 0; index < iterable.length; index++) {\n            result += iterable [index];\n        }\n        return result;\n    }\n__pragma__ ('endif')\n\n    __all__.any = any;\n    __all__.all = all;\n    __all__.sum = sum;\n\n    // Enumerate method, returning a zipped list\n    function enumerate (iterable) {\n        return zip (range (len (iterable)), iterable);\n    }\n    __all__.enumerate = enumerate;\n\n    // Shallow and deepcopy\n\n    function copy (anObject) {\n        if (anObject == null || typeof anObject == \"object\") {\n            return anObject;\n        }\n        else {\n            var result = {};\n            for (var attrib in obj) {\n                if (anObject.hasOwnProperty (attrib)) {\n                    result [attrib] = anObject [attrib];\n                }\n            }\n            return result;\n        }\n    }\n    __all__.copy = copy;\n\n    function deepcopy (anObject) {\n        if (anObject == null || typeof anObject == \"object\") {\n            return anObject;\n        }\n        else {\n            var result = {};\n            for (var attrib in obj) {\n                if (anObject.hasOwnProperty (attrib)) {\n                    result [attrib] = deepcopy (anObject [attrib]);\n                }\n            }\n            return result;\n        }\n    }\n    __all__.deepcopy = deepcopy;\n\n    // List extensions to Array\n\n    function list (iterable) {                                      // All such creators should be callable without new\n__pragma__ ('ifdef', '__esv6__')\n        var instance = iterable ? Array.from (iterable) : [];\n__pragma__ ('else')\n        var instance = iterable ? [] .slice.apply (iterable) : [];  // Spread iterable, n.b. array.slice (), so array before dot\n__pragma__ ('endif')\n        // Sort is the normal JavaScript sort, Python sort is a non-member function\n        return instance;\n    }\n    __all__.list = list;\n    Array.prototype.__class__ = list;   // All arrays are lists (not only if constructed by the list ctor), unless constructed otherwise\n    list.__name__ = 'list';\n\n    /*\n    Array.from = function (iterator) { // !!! remove\n        result = [];\n        for (item of iterator) {\n            result.push (item);\n        }\n        return result;\n    }\n    */\n\n    Array.prototype.__iter__ = function () {return new __PyIterator__ (this);};\n\n    Array.prototype.__getslice__ = function (start, stop, step) {\n        if (start < 0) {\n            start = this.length + start;\n        }\n\n        if (stop == null) {\n            stop = this.length;\n        }\n        else if (stop < 0) {\n            stop = this.length + stop;\n        }\n        else if (stop > this.length) {\n            stop = this.length;\n        }\n\n        var result = list ([]);\n        for (var index = start; index < stop; index += step) {\n            result.push (this [index]);\n        }\n\n        return result;\n    };\n\n    Array.prototype.__setslice__ = function (start, stop, step, source) {\n        if (start < 0) {\n            start = this.length + start;\n        }\n\n        if (stop == null) {\n            stop = this.length;\n        }\n        else if (stop < 0) {\n            stop = this.length + stop;\n        }\n\n        if (step == null) { // Assign to 'ordinary' slice, replace subsequence\n            Array.prototype.splice.apply (this, [start, stop - start] .concat (source));\n        }\n        else {              // Assign to extended slice, replace designated items one by one\n            var sourceIndex = 0;\n            for (var targetIndex = start; targetIndex < stop; targetIndex += step) {\n                this [targetIndex] = source [sourceIndex++];\n            }\n        }\n    };\n\n    Array.prototype.__repr__ = function () {\n        if (this.__class__ == set && !this.length) {\n            return 'set()';\n        }\n\n        var result = !this.__class__ || this.__class__ == list ? '[' : this.__class__ == tuple ? '(' : '{';\n\n        for (var index = 0; index < this.length; index++) {\n            if (index) {\n                result += ', ';\n            }\n            result += repr (this [index]);\n        }\n\n        if (this.__class__ == tuple && this.length == 1) {\n            result += ',';\n        }\n\n        result += !this.__class__ || this.__class__ == list ? ']' : this.__class__ == tuple ? ')' : '}';;\n        return result;\n    };\n\n    Array.prototype.__str__ = Array.prototype.__repr__;\n\n    Array.prototype.append = function (element) {\n        this.push (element);\n    };\n\n    Array.prototype.clear = function () {\n        this.length = 0;\n    };\n\n    Array.prototype.extend = function (aList) {\n        this.push.apply (this, aList);\n    };\n\n    Array.prototype.insert = function (index, element) {\n        this.splice (index, 0, element);\n    };\n\n    Array.prototype.remove = function (element) {\n        var index = this.indexOf (element);\n        if (index == -1) {\n            throw KeyError (new Error ());\n        }\n        this.splice (index, 1);\n    };\n\n    Array.prototype.index = function (element) {\n        return this.indexOf (element);\n    };\n\n    Array.prototype.py_pop = function (index) {\n        if (index == undefined) {\n            return this.pop ();  // Remove last element\n        }\n        else {\n            return this.splice (index, 1) [0];\n        }\n    };\n\n    Array.prototype.py_sort = function () {\n        __sort__.apply  (null, [this].concat ([] .slice.apply (arguments)));    // Can't work directly with arguments\n        // Python params: (iterable, key = None, reverse = False)\n        // py_sort is called with the Transcrypt kwargs mechanism, and just passes the params on to __sort__\n        // __sort__ is def'ed with the Transcrypt kwargs mechanism\n    };\n\n    Array.prototype.__add__ = function (aList) {\n        return list (this.concat (aList));\n    };\n\n    Array.prototype.__mul__ = function (scalar) {\n        var result = this;\n        for (var i = 1; i < scalar; i++) {\n            result = result.concat (this);\n        }\n        return result;\n    };\n\n    Array.prototype.__rmul__ = Array.prototype.__mul__;\n\n    // Tuple extensions to Array\n\n    function tuple (iterable) {\n        var instance = iterable ? [] .slice.apply (iterable) : [];\n        instance.__class__ = tuple; // Not all arrays are tuples\n        return instance;\n    }\n    __all__.tuple = tuple;\n    tuple.__name__ = 'tuple';\n\n    // Set extensions to Array\n    // N.B. Since sets are unordered, set operations will occasionally alter the 'this' array by sorting it\n\n    function set (iterable) {\n        var instance = [];\n        if (iterable) {\n            for (var index = 0; index < iterable.length; index++) {\n                instance.add (iterable [index]);\n            }\n\n\n        }\n        instance.__class__ = set;   // Not all arrays are sets\n        return instance;\n    }\n    __all__.set = set;\n    set.__name__ = 'set';\n\n    Array.prototype.__bindexOf__ = function (element) { // Used to turn O (n^2) into O (n log n)\n    // Since sorting is lex, compare has to be lex. This also allows for mixed lists\n\n        element += '';\n\n        var mindex = 0;\n        var maxdex = this.length - 1;\n\n        while (mindex <= maxdex) {\n            var index = (mindex + maxdex) / 2 | 0;\n            var middle = this [index] + '';\n\n            if (middle < element) {\n                mindex = index + 1;\n            }\n            else if (middle > element) {\n                maxdex = index - 1;\n            }\n            else {\n                return index;\n            }\n        }\n\n        return -1;\n    };\n\n    Array.prototype.add = function (element) {\n        if (this.indexOf (element) == -1) { // Avoid duplicates in set\n            this.push (element);\n        }\n    };\n\n    Array.prototype.discard = function (element) {\n        var index = this.indexOf (element);\n        if (index != -1) {\n            this.splice (index, 1);\n        }\n    };\n\n    Array.prototype.isdisjoint = function (other) {\n        this.sort ();\n        for (var i = 0; i < other.length; i++) {\n            if (this.__bindexOf__ (other [i]) != -1) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    Array.prototype.issuperset = function (other) {\n        this.sort ();\n        for (var i = 0; i < other.length; i++) {\n            if (this.__bindexOf__ (other [i]) == -1) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    Array.prototype.issubset = function (other) {\n        return set (other.slice ()) .issuperset (this); // Sort copy of 'other', not 'other' itself, since it may be an ordered sequence\n    };\n\n    Array.prototype.union = function (other) {\n        var result = set (this.slice () .sort ());\n        for (var i = 0; i < other.length; i++) {\n            if (result.__bindexOf__ (other [i]) == -1) {\n                result.push (other [i]);\n            }\n        }\n        return result;\n    };\n\n    Array.prototype.intersection = function (other) {\n        this.sort ();\n        var result = set ();\n        for (var i = 0; i < other.length; i++) {\n            if (this.__bindexOf__ (other [i]) != -1) {\n                result.push (other [i]);\n            }\n        }\n        return result;\n    };\n\n    Array.prototype.difference = function (other) {\n        var sother = set (other.slice () .sort ());\n        var result = set ();\n        for (var i = 0; i < this.length; i++) {\n            if (sother.__bindexOf__ (this [i]) == -1) {\n                result.push (this [i]);\n            }\n        }\n        return result;\n    };\n\n    Array.prototype.symmetric_difference = function (other) {\n        return this.union (other) .difference (this.intersection (other));\n    };\n\n    Array.prototype.py_update = function () {   // O (n)\n        var updated = [] .concat.apply (this.slice (), arguments) .sort ();\n        this.clear ();\n        for (var i = 0; i < updated.length; i++) {\n            if (updated [i] != updated [i - 1]) {\n                this.push (updated [i]);\n            }\n        }\n    };\n\n    Array.prototype.__eq__ = function (other) { // Also used for list\n        if (this.length != other.length) {\n            return false;\n        }\n        if (this.__class__ == set) {\n            this.sort ();\n            other.sort ();\n        }\n        for (var i = 0; i < this.length; i++) {\n            if (this [i] != other [i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    Array.prototype.__ne__ = function (other) { // Also used for list\n        return !this.__eq__ (other);\n    };\n\n    Array.prototype.__le__ = function (other) {\n        return this.issubset (other);\n    };\n\n    Array.prototype.__ge__ = function (other) {\n        return this.issuperset (other);\n    };\n\n    Array.prototype.__lt__ = function (other) {\n        return this.issubset (other) && !this.issuperset (other);\n    };\n\n    Array.prototype.__gt__ = function (other) {\n        return this.issuperset (other) && !this.issubset (other);\n    };\n\n    // String extensions\n\n    function str (stringable) {\n        try {\n            return stringable.__str__ ();\n        }\n        catch (exception) {\n            try {\n                return repr (stringable);\n            }\n            catch (exception) {\n                return String (stringable); // No new, so no permanent String object but a primitive in a temporary 'just in time' wrapper\n            }\n        }\n    };\n    __all__.str = str;\n\n    String.prototype.__class__ = str;   // All strings are str\n    str.__name__ = 'str';\n\n    String.prototype.__iter__ = function () {new __PyIterator__ (this);};\n\n    String.prototype.__repr__ = function () {\n        return (this.indexOf ('\\'') == -1 ? '\\'' + this + '\\'' : '\"' + this + '\"') .py_replace ('\\t', '\\\\t') .py_replace ('\\n', '\\\\n');\n    };\n\n    String.prototype.__str__ = function () {\n        return this;\n    };\n\n    String.prototype.capitalize = function () {\n        return this.charAt (0).toUpperCase () + this.slice (1);\n    };\n\n    String.prototype.endswith = function (suffix) {\n        return suffix == '' || this.slice (-suffix.length) == suffix;\n    };\n\n    String.prototype.find  = function (sub, start) {\n        return this.indexOf (sub, start);\n    };\n\n    String.prototype.__getslice__ = function (start, stop, step) {\n        if (start < 0) {\n            start = this.length + start;\n        }\n\n        if (stop == null) {\n            stop = this.length;\n        }\n        else if (stop < 0) {\n            stop = this.length + stop;\n        }\n\n        var result = '';\n        if (step == 1) {\n            result = this.substring (start, stop);\n        }\n        else {\n            for (var index = start; index < stop; index += step) {\n                result = result.concat (this.charAt(index));\n            }\n        }\n        return result;\n    }\n\n    // Since it's worthwhile for the 'format' function to be able to deal with *args, it is defined as a property\n    // __get__ will produce a bound function if there's something before the dot\n    // Since a call using *args is compiled to e.g. <object>.<function>.apply (null, args), the function has to be bound already\n    // Otherwise it will never be, because of the null argument\n    // Using 'this' rather than 'null' contradicts the requirement to be able to pass bound functions around\n    // The object 'before the dot' won't be available at call time in that case, unless implicitly via the function bound to it\n    // While for Python methods this mechanism is generated by the compiler, for JavaScript methods it has to be provided manually\n    // Call memoizing is unattractive here, since every string would then have to hold a reference to a bound format method\n    Object.defineProperty (String.prototype, 'format', {\n        get: function () {return __get__ (this, function (self) {\n            var args = tuple ([] .slice.apply (arguments).slice (1));\n            var autoIndex = 0;\n            return self.replace (/\\{(\\w*)\\}/g, function (match, key) {\n                if (key == '') {\n                    key = autoIndex++;\n                }\n                if (key == +key) {  // So key is numerical\n                    return args [key] == undefined ? match : str (args [key]);\n                }\n                else {              // Key is a string\n                    for (var index = 0; index < args.length; index++) {\n                        // Find first 'dict' that has that key and the right field\n                        if (typeof args [index] == 'object' && args [index][key] != undefined) {\n                            return str (args [index][key]); // Return that field field\n                        }\n                    }\n                    return match;\n                }\n            });\n        });},\n        enumerable: true\n    });\n\n    String.prototype.isnumeric = function () {\n        return !isNaN (parseFloat (this)) && isFinite (this);\n    };\n\n    String.prototype.join = function (strings) {\n__pragma__ ('ifdef', '__esv6__')\n        strings = Array.from (strings); // Much faster than iterating through strings char by char\n__pragma__ ('endif')\n        return strings.join (this);\n    };\n\n    String.prototype.lower = function () {\n        return this.toLowerCase ();\n    };\n\n    String.prototype.py_replace = function (old, aNew, maxreplace) {\n        return this.split (old, maxreplace) .join (aNew);\n    };\n\n    String.prototype.lstrip = function () {\n        return this.replace (/^\\s*/g, '');\n    };\n\n    String.prototype.rfind = function (sub, start) {\n        return this.lastIndexOf (sub, start);\n    };\n\n    String.prototype.rsplit = function (sep, maxsplit) {    // Combination of general whitespace sep and positive maxsplit neither supported nor checked, expensive and rare\n        if (sep == undefined || sep == null) {\n            sep = /\\s+/;\n            var stripped = this.strip ();\n        }\n        else {\n            var stripped = this;\n        }\n\n        if (maxsplit == undefined || maxsplit == -1) {\n            return stripped.split (sep);\n        }\n        else {\n            var result = stripped.split (sep);\n            if (maxsplit < result.length) {\n                var maxrsplit = result.length - maxsplit;\n                return [result.slice (0, maxrsplit) .join (sep)] .concat (result.slice (maxrsplit));\n            }\n            else {\n                return result;\n            }\n        }\n    };\n\n    String.prototype.rstrip = function () {\n        return this.replace (/\\s*$/g, '');\n    };\n\n    String.prototype.py_split = function (sep, maxsplit) {  // Combination of general whitespace sep and positive maxsplit neither supported nor checked, expensive and rare\n        if (sep == undefined || sep == null) {\n            sep = /\\s+/;\n            var stripped = this.strip ();\n        }\n        else {\n            var stripped = this;\n        }\n\n        if (maxsplit == undefined || maxsplit == -1) {\n            return stripped.split (sep);\n        }\n        else {\n            var result = stripped.split (sep);\n            if (maxsplit < result.length) {\n                return result.slice (0, maxsplit).concat ([result.slice (maxsplit).join (sep)]);\n            }\n            else {\n                return result;\n            }\n        }\n    };\n\n    String.prototype.startswith = function (prefix) {\n        return this.indexOf (prefix) == 0;\n    };\n\n    String.prototype.strip = function () {\n        return this.trim ();\n    };\n\n    String.prototype.upper = function () {\n        return this.toUpperCase ();\n    };\n\n    String.prototype.__mul__ = function (scalar) {\n        var result = this;\n        for (var i = 1; i < scalar; i++) {\n            result = result + this;\n        }\n        return result;\n    };\n\n    String.prototype.__rmul__ = String.prototype.__mul__;\n\n    // Dict extensions to object\n\n    function __keys__ () {\n        var keys = [];\n        for (var attrib in this) {\n            if (!__specialattrib__ (attrib)) {\n                keys.push (attrib);\n            }\n        }\n        return keys;\n    }\n\n    function __items__ () {\n        var items = [];\n        for (var attrib in this) {\n            if (!__specialattrib__ (attrib)) {\n                items.push ([attrib, this [attrib]]);\n            }\n        }\n        return items;\n    }\n\n    function __del__ (key) {\n        delete this [key];\n    }\n\n    function __clear__ () {\n        for (var attrib in this) {\n            delete this [attrib];\n        }\n    }\n\n    function __getdefault__ (aKey, aDefault) {  // Each Python object already has a function called __get__, so we call this one __getdefault__\n        var result = this [aKey];\n        return result == undefined ? (aDefault == undefined ? null : aDefault) : result;\n    }\n\n    function __setdefault__ (aKey, aDefault) {\n        var result = this [aKey];\n        if (result != undefined) {\n            return result;\n        }\n        var val = aDefault == undefined ? null : aDefault;\n        this [aKey] = val;\n        return val;\n    }\n\n    function __pop__ (aKey, aDefault) {\n        var result = this [aKey];\n        if (result != undefined) {\n            delete this [aKey];\n            return result;\n        } else {\n            // Identify check because user could pass None\n            if ( aDefault === undefined ) {\n                throw KeyError(aKey, new Error());\n            }\n        }\n        return aDefault;\n    }\n\n    function __update__ (aDict) {\n        for (var aKey in aDict) {\n            this [aKey] = aDict [aKey];\n        }\n    }\n\n    function dict (objectOrPairs) {\n        var instance = {};\n        if (!objectOrPairs || objectOrPairs instanceof Array) { // It's undefined or an array of pairs\n            if (objectOrPairs) {\n                for (var index = 0; index < objectOrPairs.length; index++) {\n                    var pair = objectOrPairs [index];\n                    if ( !(pair instanceof Array) || pair.length != 2) {\n                        throw ValueError(\n                            \"dict update sequence element #\" + index +\n                            \" has length \" + pair.length +\n                            \"; 2 is required\", new Error());\n                    }\n                    var key = pair [0];\n                    var val = pair [1];\n                    if (!(objectOrPairs instanceof Array) && objectOrPairs instanceof Object) {\n                         // User can potentially pass in an object\n                         // that has a hierarchy of objects. This\n                         // checks to make sure that these objects\n                         // get converted to dict objects instead of\n                         // leaving them as js objects.\n                         \n                         if (!isinstance (objectOrPairs, dict)) {\n                             val = dict (val);\n                         }\n                    }\n                    instance [key] = val;\n                }\n            }\n        }\n        else {\n            if (isinstance (objectOrPairs, dict)) {\n                // Passed object is a dict already so we need to be a little careful\n                // N.B. - this is a shallow copy per python std - so\n                // it is assumed that children have already become\n                // python objects at some point.\n                \n                var aKeys = objectOrPairs.py_keys ();\n                for (var index = 0; index < aKeys.length; index++ ) {\n                    var key = aKeys [index];\n                    instance [key] = objectOrPairs [key];\n                }\n            } else if (objectOrPairs instanceof Object) {\n                // Passed object is a JavaScript object but not yet a dict, don't copy it\n                instance = objectOrPairs;\n            } else {\n                // We have already covered Array so this indicates\n                // that the passed object is not a js object - i.e.\n                // it is an int or a string, which is invalid.\n                \n                throw ValueError (\"Invalid type of object for dict creation\", new Error ());\n            }\n        }\n\n        // Trancrypt interprets e.g. {aKey: 'aValue'} as a Python dict literal rather than a JavaScript object literal\n        // So dict literals rather than bare Object literals will be passed to JavaScript libraries\n        // Some JavaScript libraries call all enumerable callable properties of an object that's passed to them\n        // So the properties of a dict should be non-enumerable\n        Object.defineProperty (instance, '__class__', {value: dict, enumerable: false, writable: true});\n        Object.defineProperty (instance, 'py_keys', {value: __keys__, enumerable: false});\n        Object.defineProperty (instance, '__iter__', {value: function () {new __PyIterator__ (this.py_keys ());}, enumerable: false});\n        Object.defineProperty (instance, Symbol.iterator, {value: function () {new __JsIterator__ (this.py_keys ());}, enumerable: false});\n        Object.defineProperty (instance, 'py_items', {value: __items__, enumerable: false});\n        Object.defineProperty (instance, 'py_del', {value: __del__, enumerable: false});\n        Object.defineProperty (instance, 'py_clear', {value: __clear__, enumerable: false});\n        Object.defineProperty (instance, 'py_get', {value: __getdefault__, enumerable: false});\n        Object.defineProperty (instance, 'py_setdefault', {value: __setdefault__, enumerable: false});\n        Object.defineProperty (instance, 'py_pop', {value: __pop__, enumerable: false});\n        Object.defineProperty (instance, 'py_update', {value: __update__, enumerable: false});\n        return instance;\n    }\n\n    __all__.dict = dict;\n    dict.__name__ = 'dict';\n    \n    // Docstring setter\n\n    function __setdoc__ (docString) {\n        this.__doc__ = docString;\n        return this;\n    }\n\n    // Python classes, methods and functions are all translated to JavaScript functions\n    Object.defineProperty (Function.prototype, '__setdoc__', {value: __setdoc__, enumerable: false});\n\n    // General operator overloading, only the ones that make most sense in matrix and complex operations\n\n    var __neg__ = function (a) {\n        if (typeof a == 'object' && '__neg__' in a) {\n            return a.__neg__ ();\n        }\n        else {\n            return -a;\n        }\n    };\n    __all__.__neg__ = __neg__;\n\n    var __matmul__ = function (a, b) {\n        return a.__matmul__ (b);\n    };\n    __all__.__matmul__ = __matmul__;\n\n    var __pow__ = function (a, b) {\n        if (typeof a == 'object' && '__pow__' in a) {\n            return a.__pow__ (b);\n        }\n        else if (typeof b == 'object' && '__rpow__' in b) {\n            return b.__rpow__ (a);\n        }\n        else {\n            return Math.pow (a, b);\n        }\n    };\n    __all__.pow = __pow__;\n\n    var __jsmod__ = function (a, b) {\n        if (typeof a == 'object' && '__mod__' in a) {\n            return a.__mod__ (b);\n        }\n        else if (typeof b == 'object' && '__rpow__' in b) {\n            return b.__rmod__ (a);\n        }\n        else {\n            return a % b;\n        }\n    };\n\n    var __mod__ = function (a, b) {\n        if (typeof a == 'object' && '__mod__' in a) {\n            return a.__mod__ (b);\n        }\n        else if (typeof b == 'object' && '__rpow__' in b) {\n            return b.__rmod__ (a);\n        }\n        else {\n            return ((a % b) + b) % b;\n        }\n    };\n    __all__.pow = __pow__;\n\n    var __mul__ = function (a, b) {\n        if (typeof a == 'object' && '__mul__' in a) {\n            return a.__mul__ (b);\n        }\n        else if (typeof b == 'object' && '__rmul__' in b) {\n            return b.__rmul__ (a);\n        }\n        else if (typeof a == 'string') {\n            return a.__mul__ (b);\n        }\n        else if (typeof b == 'string') {\n            return b.__rmul__ (a);\n        }\n        else {\n            return a * b;\n        }\n    };\n    __all__.__mul__ = __mul__;\n\n    var __div__ = function (a, b) {\n        if (typeof a == 'object' && '__div__' in a) {\n            return a.__div__ (b);\n        }\n        else if (typeof b == 'object' && '__rdiv__' in b) {\n            return b.__rdiv__ (a);\n        }\n        else {\n            return a / b;\n        }\n    };\n    __all__.__div__ = __div__;\n\n    var __add__ = function (a, b) {\n        if (typeof a == 'object' && '__add__' in a) {\n            return a.__add__ (b);\n        }\n        else if (typeof b == 'object' && '__radd__' in b) {\n            return b.__radd__ (a);\n        }\n        else {\n            return a + b;\n        }\n    };\n    __all__.__add__ = __add__;\n\n    var __sub__ = function (a, b) {\n        if (typeof a == 'object' && '__sub__' in a) {\n            return a.__sub__ (b);\n        }\n        else if (typeof b == 'object' && '__rsub__' in b) {\n            return b.__rsub__ (a);\n        }\n        else {\n            return a - b;\n        }\n    };\n    __all__.__sub__ = __sub__;\n\n    var __eq__ = function (a, b) {\n        if (typeof a == 'object' && '__eq__' in a) {\n            return a.__eq__ (b);\n        }\n        else {\n            return a == b;\n        }\n    };\n    __all__.__eq__ = __eq__;\n\n    var __ne__ = function (a, b) {\n        if (typeof a == 'object' && '__ne__' in a) {\n            return a.__ne__ (b);\n        }\n        else {\n            return a != b\n        }\n    };\n    __all__.__ne__ = __ne__;\n\n    var __lt__ = function (a, b) {\n        if (typeof a == 'object' && '__lt__' in a) {\n            return a.__lt__ (b);\n        }\n        else {\n            return a < b;\n        }\n    };\n    __all__.__lt__ = __lt__;\n\n    var __le__ = function (a, b) {\n        if (typeof a == 'object' && '__le__' in a) {\n            return a.__le__ (b);\n        }\n        else {\n            return a <= b;\n        }\n    };\n    __all__.__le__ = __le__;\n\n    var __gt__ = function (a, b) {\n        if (typeof a == 'object' && '__gt__' in a) {\n            return a.__gt__ (b);\n        }\n        else {\n            return a > b;\n        }\n    };\n    __all__.__gt__ = __gt__;\n\n    var __ge__ = function (a, b) {\n        if (typeof a == 'object' && '__ge__' in a) {\n            return a.__ge__ (b);\n        }\n        else {\n            return a >= b;\n        }\n    };\n    __all__.__ge__ = __ge__;\n\n    var __getitem__ = function (container, key) {                           // Slice c.q. index, direct generated call to runtime switch\n        if (typeof container == 'object' && '__getitem__' in container) {\n            return container.__getitem__ (key);                             // Overloaded on container\n        }\n        else {\n            return container [key];                                         // Container must support bare JavaScript brackets\n        }\n    };\n    __all__.__getitem__ = __getitem__;\n\n    var __setitem__ = function (container, key, value) {                    // Slice c.q. index, direct generated call to runtime switch\n        if (typeof container == 'object' && '__setitem__' in container) {\n            container.__setitem__ (key, value);                             // Overloaded on container\n        }\n        else {\n            container [key] = value;                                        // Container must support bare JavaScript brackets\n        }\n    };\n    __all__.__setitem__ = __setitem__;\n\n    var __getslice__ = function (container, lower, upper, step) {           // Slice only, no index, direct generated call to runtime switch\n        if (typeof container == 'object' && '__getitem__' in container) {\n            return container.__getitem__ ([lower, upper, step]);            // Container supports overloaded slicing c.q. indexing\n        }\n        else {\n            return container.__getslice__ (lower, upper, step);             // Container only supports slicing injected natively in prototype\n        }\n    };\n    __all__.__getslice__ = __getslice__;\n\n    var __setslice__ = function (container, lower, upper, step, value) {    // Slice, no index, direct generated call to runtime switch\n        if (typeof container == 'object' && '__setitem__' in container) {\n            container.__setitem__ ([lower, upper, step], value);            // Container supports overloaded slicing c.q. indexing\n        }\n        else {\n            container.__setslice__ (lower, upper, step, value);             // Container only supports slicing injected natively in prototype\n        }\n    };\n    __all__.__setslice__ = __setslice__;\n\n    var __call__ = function (/* <callee>, <this>, <params>* */) {\n        var args = [] .slice.apply (arguments);\n        if (typeof args [0] == 'object' && '__call__' in args [0]) {        // Overloaded\n            return args [0] .__call__ .apply (args [1], args.slice (2));\n        }\n        else {                                                              // Native\n            return args [0] .apply (args [1], args.slice (2));\n        }\n    };\n    __all__.__call__ = __call__;\n",
		"from org.transcrypt.stubs.browser import __pragma__\n\n__pragma__ ('kwargs')\n\nclass A:\n    def __init__ (self, x = 123, y = 456, *args, m, n = 456, **kwargs):\n        self.x = x\n        self.y = y\n        self.args = args\n        self.m = m\n        self.n = n\n        self.kwargs = kwargs\n        self.extra = 'hello'\n\n    def f (self, autoTester):\n        autoTester.check (self.x, self.y, self.args, self.m, self.n, self.kwargs, self.extra)\n        \nclass B (A):\n    def __init__ (self, x, y = -1, *args, m = -2, n, **kwargs):\n        A.__init__ (self, y, x, *args, m = n, n = m, **kwargs)\n        \nclass C:\n    __pragma__ ('nokwargs')\n    def tricky (self, *args):\n        return args\n    __pragma__ ('kwargs')\n    \ndef run (autoTester):\n    def f (x, y = -1, *args, m = -2, n, **kwargs):\n        # BEGIN issue 203, kwargs turned into real dict\n        autoTester.check ('#203', kwargs.__class__.__name__)\n        autoTester.check ('#203', sorted (kwargs.keys ()))\n        # END issue 203\n    \n        def f2 (x, y = -3, *args, m = -4, n, **kwargs):\n            autoTester.check (x, y, args, m, n, kwargs)\n        f2 (11, 22, 1010, 2020, m = 100100, n = 200200, p = 10001000, q = 20002000)\n        autoTester.check (x, y, args, m, n, kwargs)\n        \n    f (1, 2, 10, 20, m = 100, n = 200, p = 1000, q = 2000)\n    \n    b = B (3, 4, 30, 40, m = 300, n = 400, p = 3000, q = 4000)\n    b.f (autoTester)\n    \n    def g (*args, **kwargs):\n        autoTester.check (args, kwargs)\n        \n    g (*(1, 2, 3), **{'p': 'aP', 'q': 'aQ', 'r': 'anR'})\n    \n    (lambda x, y = -1, *args, m = -2, n, **kwargs: autoTester.check (x, y, args, m, n, kwargs)) (1, 2, 8, 16, m = 128, n = 256.3, p = 1024.3, q = 2048.3)\n    \n    autoTester.check (C () .tricky (* range (4)))\n    autoTester.check ('{}-{}'.format (1, 3, 5, 7, 9))\n    autoTester.check ('{}-{}'.format (* range (4)))\n",
		"class A:\n    def __init__ (self):\n        self.s = 'hello'\n        \na = A ()\n\ndef run (autoTester):\n    autoTester.check (a.s, getattr (a, 's'))\n    \n    setattr (a, 's', 'goodbye')\n    autoTester.check (a.s, getattr (a, 's'))\n    \n    setattr (a, 't', 'exists')\n    autoTester.check (hasattr (a, 't'), a.t, getattr (a, 't'))\n    \n    delattr (a, 't')\n    autoTester.check (hasattr (a, 't'))\n",
		"# Callable built-in method unit tests\n\nfrom org.transcrypt.stubs.browser import __pragma__\n\ndef run(test):\n    \"\"\"\n    \"\"\"\n\n    def func(a,b):\n        return(a*b)\n\n    test.check( func(3,4) )\n    test.check( callable(func) )\n\n    for a in (True, False):\n        test.check( callable(a) )\n\n    a = 1\n    test.check( callable(a) )\n    a = 2.3\n    test.check( callable(a) )\n    a = \"asdf\"\n    test.check( callable(a) )\n\n    a = []\n    test.check( callable(a) )\n    a = [1,2,3,3]\n    test.check( callable(a) )\n    a = [\"asdf\", \"qwer\", \"zxcv\"]\n    test.check( callable(a) )\n\n    a = {\"asdf\" : 1, \"qwer\": 2}\n    test.check( callable(a) )\n\n    a = set([1,2])\n    test.check(callable(a))\n\n    __pragma__('opov')\n\n    class callObj(object):\n        def __init__(self, r):\n            self._r = r\n\n        def __call__(self):\n            return(self._r)\n\n    test.check( callable(callObj) )\n\n    obj = callObj(2)\n    test.check(obj())\n    test.check( callable(obj) )\n    test.check( callable(obj._r) )\n\n    class nonCallObj(object):\n        def __init__(self, b):\n            self._b = b\n\n        def func(self):\n            return(self._b)\n\n    test.check( callable(nonCallObj) )\n\n    obj2 = nonCallObj(2)\n    test.check( callable(obj2) )\n    test.check( callable(obj2._b) )\n    test.check( callable(obj2.func) )\n\n    __pragma__('noopov')\n\n    class nonOpovNonCallObj(object):\n        \"\"\"\n        \"\"\"\n        def __init__(self, c):\n            self._c = c\n\n        def other(self, b):\n            return(self._c * b)\n\n        def _getC(self):\n            return(self._c)\n        def _setC(self, val):\n            self._c = val\n\n        C = property(_getC, _setC)\n\n    obj = nonOpovNonCallObj(4)\n    test.check( callable(obj) )\n    test.check( callable(obj.other) )\n    test.check( callable(obj._c) )\n    test.check( callable(obj.C) )\n\n    exc = Exception(\"asdf\")\n    test.check( callable(exc) )\n",
		"def run (autoTester):\n    autoTester.check ('<br>General<br>')\n\n    class A:\n        p = 123\n        def __init__ (self, x):\n            self.x = x\n            autoTester.check (self.p)\n\n        def show (self, label):\n            autoTester.check ('A.show', label, self.x)\n            \n        def show2 (self, label):\n            autoTester.check ('A.show2', label, self.x)\n        \n    class B:\n        p, q = 456, 789\n        def __init__ (self, y):\n            autoTester.check ('In B constructor')\n            self.y = y\n            autoTester.check (self.p)\n            \n        def show (self, label):\n            autoTester.check ('B.show', label, self.y)\n            \n    class C (A, B):\n        def __init__ (self, x, y):\n            autoTester.check ('In C constructor')\n            A.__init__ (self, x)\n            B.__init__ (self, y)\n            \n        def show (self, label):\n            A.show (self, label)\n            B.show (self, label)\n            autoTester.check ('C.show', label, self.x, self.y)\n        \n    a = A (1001)\n    a.show ('america')\n    autoTester.check (A.p)\n    autoTester.check (a.p)\n\n    b = B (2002)\n    b.show ('russia')\n    autoTester.check (B.p)\n    autoTester.check (b.p)\n    autoTester.check (b.q)\n\n    autoTester.check (A.p)\n    autoTester.check (a.p)\n\n    c = C (3003, 4004)\n    c.show ('netherlands')\n    autoTester.check (C.p)\n    autoTester.check (c.p)\n    autoTester.check (c.q)\n\n    c.show2 ('amsterdam')\n    A.show2 (c, 'rotterdam')\n\n    show3 = c.show\n    show3 ('copy')\n    \n    autoTester.check (hasattr (a, 'x'))\n    autoTester.check (hasattr (a, 'y'))\n    autoTester.check (hasattr (a, 'p'))\n    autoTester.check (hasattr (a, 'q'))\n    \n    autoTester.check ('<br><br>Augmented isinstance<br>')\n    # Augmented meaning: compatible with native JavaScript types\n        \n    simpleTypes = (dict, list, A, B, C, bool, str, float, int)\n    tupleTypes = ((dict, list), (bool, int), (bool, A), (C, B))\n    for i, types in enumerate ((simpleTypes, tupleTypes)):\n        for j, aType in enumerate (types):\n            for k, anObject in enumerate (({'a': 1}, [], a, C, c, C, b, True, 'a', 1, 1.2)):\n                autoTester.check (i, j, k, isinstance (anObject, aType))\n                if types == simpleTypes:\n                    autoTester.check (i, j, k, isinstance (anObject, simpleTypes))\n                    \n    autoTester.check ('<br><br>Method resolution order<br>')\n    \n    def mro (aClass, result = None):\n        ''' Recursively assemble method resolution order from all base classes'''\n        last = 0\n        if result is None:\n            result = [aClass]\n            last = 1\n        for aBase in aClass.__bases__:\n            if not aBase in result and aBase != object:\n                result.append (aBase)\n                mro (aBase, result)\n        if last and object in aClass.__bases__:\n            aRoot.append (object)\n        return result\n        \n    autoTester.check ([aClass.__name__ for aClass in mro (C)])\n    ",
		"pi = Math.PI\ne = Math.E\n\ndef phase (x):\n    return 0 if __typeof__ (x) is 'number' else Math.atan2 (x.imag, x.real)\n    \ndef polar (x):\n    return (Math.abs (x), 0) if __typeof__ (x) is 'number' else (abs (x), phase (x))\n    \ndef rect (r, phi):\n    __pragma__ ('opov')\n    return r * (Math.cos (phi) + 1.j * Math.sin (phi))\n    __pragma__ ('noopov')\n    \ndef exp (x):\n    return complex (x, 0) .__exp__ () if __typeof__ (x) is 'number' else x.__exp__ ()\n        \ndef log (x, base):\n    return (\n        complex (x, 0) .__log__ () if __typeof__ (x) is 'number' else x.__log__ ()\n    ) if base is js_undefined else (\n        __div__ (log (x), log (base))   # Recursive\n    )\n    \ndef log10 (x):\n    return log (x, 10)\n    \ndef sqrt (x):\n    return exp (__mul__ (log (x), 0.5))\n    \n__pragma__ ('opov')\n\ndef sin (x):\n    return -0.5j * (exp (1j * x) - exp (-1j * x))\n\ndef cos (x):\n    return 0.5 * (exp (1j * x) + exp (-1j * x))\n\ndef tan (x):\n    return -1j * (exp (1j * x) - exp (-1j * x)) / (exp (1j * x) + exp (-1j * x))\n\ndef asin (x):\n    return -1j * log (1j * x + sqrt (1 - x * x))\n\ndef acos (x):\n    return -1j * log (x + 1j * sqrt (1 - x * x))\n    \ndef atan (x):\n    return 0.5j * log ((1j + x) / (1j - x))\n\ndef sinh (x):\n    return 0.5 * (exp (x) - exp (-x))\n\ndef cosh (x):\n    return 0.5 * (exp (x) + exp (-x))\n\ndef tanh (x):\n    return (exp (x) - exp (-x)) / (exp (x) + exp (-x))\n\ndef asinh (x):\n    return log (x + sqrt (1 + x * x))\n\ndef acosh (x):\n    return log (x + sqrt (-1 + x * x))\n    \ndef atanh (x):\n    return 0.5 * log ((1 + x) / (1 - x))\n\n__pragma__ ('noopov')\n\ndef isinf (x):\n    return x.real == js_Infinite or x.imag == js.Infinite\n\ndef isfinite (x):\n    return not isinf (x)\n\ndef isnan (x):\n    return js_isNaN (x.real) or js_isNaN (x.imag)\n    ",
		"from org.transcrypt.stubs.browser import __pragma__\n\ndef run (autoTester):\n    x = 567\n    y = -3\n    z = 5 * x + 2 * y\n    autoTester.check (x, y, z)\n\n    __pragma__ ('opov')\n    \n    a = 234 + 3j\n    b = 4 - 5j\n    c = complex (-6, 7)\n    autoTester.check (a, b, c)\n    \n    t = 6 * x - 3 * y + 7   # Just to check, faster with 'noopov'\n    autoTester.check (t)\n    \n    d = 2 * a\n    e = x * b\n    f = z + d + e\n    g = a / b\n    h = a - b\n    i = x - c\n    j = a - x\n    k = b + y\n    \n    autoTester.check (d, e, f, round (g.real, 2), round (g.imag, 2), h, i, j, k)\n    \n    __pragma__ ('noopov')\n    ",
		"def f (x, b):\n    return x * x if b else x + x\n\ndef run (autoTester):\n    bools = (False, True)\n    for a in bools:\n        for b in bools:\n            autoTester.check (f (10 if a else 100, b))\n            \n    for p in bools:\n        for q in bools:\n            for r in bools:\n                autoTester.check ('a' if p else 'b' if q else 'c' if r else 'd')\n                \n                a = ((('e' if p else 'f') if q else 'g') if r else 'h')\n                b = ('i' if p else ('j' if q else ('k' if r else 'l')))\n                c = 'm' if (p if q else r) else 'n'\n                d = 'o' if p < q <= r else 'p'\n                autoTester.check (a, b, c, d)\n                \n    odd = [x if x % 2 else x + 1 for x in range (10)]\n    noDuplicates = set (odd)\n    autoTester.check (odd, noDuplicates)\n    ",
		"def run (autoTester):\n    for index in range (10):\n        autoTester.check (index)\n        \n    for index in range (8, 16):\n        autoTester.check (index)\n        \n    for index in range (8, 16, 2):\n        autoTester.check (index)\n        \n    for index in range (10, 0, -1):\n        autoTester.check (index)\n        \n    for index in range (16, 8, -2):\n        autoTester.check (index)\n        \n    for animal in ('cat', 'dog', 'turtle', 'goldfish'):\n        autoTester.check (animal)\n\n    for index, square in enumerate ([x * x for x in range (10) if x % 2]):\n        for y in (1, 2, 3):\n            for z in (10, 20, 30):\n                autoTester.check (square + y, z )\n\n    vehicles = ['bike', 'train', 'boat', 'car', 'plane', 'bus']\n                \n    for doBreak in (False, True):\n        for doContinue in (False, True):\n            for index in range (10):\n                for index2 in range (0, 100, 10):\n                    if doBreak and index2 == 50:\n                        autoTester.check ('break2')\n                        break\n                    if doContinue and index2 == 50:\n                        autoTester.check ('continue2')\n                        continue\n                else:\n                    autoTester.check ('noBreak2')\n                    \n                if doBreak and index == 5:\n                    autoTester.check ('break')\n                    break\n                if doContinue and index == 5:\n                    autoTester.check ('continue')\n                    continue\n            else:\n                autoTester.check ('noBreak')\n                \n            index = 0\n            while index < len (vehicles) and vehicles [index] != 'bus':\n                autoTester.check (index, vehicles [index])\n                if doBreak and vehicles [index] == 'car':\n                    autoTester.check ('breakWhile')\n                    break\n                if doContinue and vehicles [index] == 'car':\n                    autoTester.check ('continueWhile')\n                    index += 1\n                    continue\n                index += 1\n            else:\n                autoTester.check ('noBreakWhile')\n                \n        for vehicle in vehicles:\n            if vehicle == 'bike':\n                autoTester.check ('netherlands')\n            elif vehicle == 'car':\n                autoTester.check ('america')\n            elif vehicle == 'boat':\n                autoTester.check ('oceania')\n            else:\n                autoTester.check ('anywhere')\n",
		"def run (autoTester):\n    aList = [1, 2, 3, 'moon', 'stars']\n    autoTester.check (aList)\n    aList.insert (3, 'sun')\n    autoTester.check (aList)\n    autoTester.check (aList [2:4:1])\n    autoTester.check (aList [:])\n    autoTester.check (aList [2:])\n    autoTester.check (len (aList))\n    aList.append ('milkyway')\n    autoTester.check (aList)\n    aList.extend (['m1', 'm31'])\n    autoTester.check (aList)\n\n    anotherList = list (('a', 'b', 'c'))\n    autoTester.check (anotherList)\n    autoTester.check ('b' in anotherList)\n    autoTester.check ('d' in anotherList)\n    \n    aDict = {1: 'plant', 'animal': 2}\n    autoTester.check (aDict)\n    autoTester.check (aDict [1], aDict ['animal'])\n    \n    def p ():\n        return 3\n        \n    q = 4\n    \n    autoTester.check ({p (): 'three', q: 'four'})\n    \n    aTuple = (1, 2, 3, 4, 5)\n    autoTester.check(aTuple)\n    autoTester.check (len (aTuple))\n\n    anotherTuple = (1,)\n    autoTester.check (anotherTuple)\n\n    aSet = {1, 2, 2, 3}\n    autoTester.check    (aSet)\n    autoTester.check (len (aSet))\n    autoTester.check (2 in aSet)\n    autoTester.check (4 in aSet)\n\n    anotherSet = set ((4, 5, 5, 6))\n    autoTester.check (anotherSet)\n\n    emptySet = set ()\n    autoTester.check (emptySet)\n    autoTester.check (len (emptySet))\n    \n    aString = 'c_cis_d_dis_e_f_fis_g_gis_a_ais_b_c'\n    autoTester.check ('cis' in aString)\n    autoTester.check ('g' in aString)\n    autoTester.check ('bes'  in aString)\n    autoTester.check ('z' in aString)\n    ",
		"from org.transcrypt.stubs.browser import __pragma__\n\ndef run (autoTester):\n    def repeat3 (bareFunc):\n        __pragma__ ('kwargs')\n        def innerFunc (*args, **kwargs):\n            autoTester.check ('BEGIN repeat3')\n            for i in range (3):\n                bareFunc (*args, **kwargs)\n            autoTester.check ('END repeat3')\n        __pragma__ ('nokwargs')\n        return innerFunc\n        \n    def repeatN (n):\n        def repeat (bareFunc):\n            __pragma__ ('kwargs')\n            def innerFunc (*args, **kwargs):\n                autoTester.check ('BEGIN repeatN ({})'.format (n))\n                for i in range (n):\n                    bareFunc (*args, **kwargs)\n                autoTester.check ('END repeatN ({})'.format (n))\n            __pragma__ ('nokwargs')\n            return innerFunc\n        return repeat\n\n    class Repeater:\n        def __init__ (self, n):\n            self.n = n\n            \n        def __call__ (self, bareFunc):\n            __pragma__ ('kwargs')\n            def innerFunc (*args, **kwargs):\n                autoTester.check ('BEGIN repeat3')\n                for i in range (self.n):\n                    bareFunc (*args, **kwargs)\n                autoTester.check ('END repeat3')\n            __pragma__ ('nokwargs')\n            return innerFunc\n        \n    @repeatN (4)\n    @repeat3\n    def funcNoArg ():\n        autoTester.check ('spam')\n        \n    funcNoArg ()\n    autoTester.check ()\n\n    __pragma__ ('kwargs')\n    @repeat3\n    @repeatN (2)\n    def funcArg (a):\n        autoTester.check ('eggs', a)\n    __pragma__ ('nokwargs')\n        \n    funcArg (3)\n    autoTester.check ()\n\n    funcArg (a = 4)\n    autoTester.check ()\n\n    __pragma__ ('opov')\n    @Repeater (3)\n    def funcNoArg2 ():\n        autoTester.check ('toast')\n    __pragma__ ('noopov')\n\n    funcNoArg2 ()\n    autoTester.check ()\n\n    __pragma__ ('opov')\n    __pragma__ ('kwargs')\n    @Repeater (5)\n    def funcArg2 (a):\n        autoTester.check ('jam', a)\n    __pragma__ ('nokwargs')\n    __pragma__ ('noopov')\n\n    funcArg2 (3)\n    autoTester.check ()\n\n    funcArg2 (a = 4)\n    autoTester.check ()\n\n    def next (bareFunc):\n        def innerFunc (value):\n            return bareFunc (value + 1)\n        return innerFunc\n        \n    @next\n    class Number:\n        def __init__ (self, value):\n            self.value = value\n            \n    autoTester.check ('two', Number (1) .value)\n    \n    class Test: \n        @classmethod\n        def f (cls, x, y):\n            autoTester.check (cls.__name__, x, y)\n            \n        def g (self, x, y):\n            autoTester.check (self.__class__.__name__, x, y)\n            \n    test = Test ()\n\n    test.f (1, 2)\n    test.g (3, 4)\n    \n    ",
		"from org.transcrypt.stubs.browser import __pragma__\n\n__pragma__ ('iconv')    # Convert dict to key list without using keys () method\n\ndef run (autoTester):\n    original = {'Isaac': 'Newton', 'Albert': 'Einstein', 'Paul': 'Dirac'}\n    autoTester.check (original)\n\n    inverted = {original [key]: key for key in original}\n    autoTester.check (inverted)\n",
		"from org.transcrypt.stubs.browser import __pragma__\n__pragma__ ('iconv')\n\ndef run (autoTester):\n    tel = {'guido': 4127, 'jack': 4098}\n    autoTester.check (len (tel))\n    tel ['sape'] = 4139\n\n    autoTester.check (tel)\n    autoTester.check (tel ['jack'])\n\n    del tel ['sape']\n    tel ['irv'] = 4127\n    autoTester.check (tel)\n\n    autoTester.check (sorted (list (tel.keys ())), False)\n    autoTester.check (sorted (tel.keys ()))\n\n    autoTester.check ('guido' in tel)\n    autoTester.check ('jack' not in tel)\n\n    autoTester.check (dict ([('guido', 4127), ('jack', 4098), ('sape', 4139)]))\n    autoTester.check (\n        autoTester.expectException( lambda: dict(1) )\n    )\n    autoTester.check (\n        autoTester.expectException( lambda: dict(134.34) )\n    )\n    autoTester.check (\n        autoTester.expectException( lambda: dict(\"asdf\") )\n    )\n    autoTester.check (\n        autoTester.expectException( lambda: dict([\"1234\", 1]) )\n    )\n\n    autoTester.check( dict ([]))\n    autoTester.check (dict ({}))\n    autoTester.check (dict ({\"asdf\": 1, \"qwer\": 2}) )\n\n    # check dict copy, Issue # 221\n    b = {\"a\" : 2.01, \"b\": -3.3}\n    d = dict (b)\n    autoTester.check (d)\n    b = {\"a\" : 2, \"b\": [1,2,3]}\n    d = dict (b)\n    autoTester.check (d)\n    b = {\"a\" : None, \"b\": set([1,2,3])}\n    d = dict (b)\n    autoTester.check (d)\n    b = {\"a\" : {\"c\": 2}, \"b\": (1,2)}\n    d = dict (b)\n    autoTester.check (d)\n    autoTester.check (d[\"a\"][\"c\"])\n    autoTester.check (d.get(\"a\").get(\"c\"))\n    autoTester.check (b.get(\"a\").get(\"c\"))\n    d[\"a\"][\"c\"] = 3\n    autoTester.check (d.get(\"a\").get(\"c\"))\n    autoTester.check (b.get(\"a\").get(\"c\"))\n\n\n    knights = {'robin': 'the brave', 'gallahad': 'the pure'}\n\n    for k, v in sorted (knights.items ()):\n        autoTester.check (k, v)\n\n    if 'gallahad' in knights:\n        autoTester.check ('gallahad is a knight') \n\n    for k in sorted (knights):\n        autoTester.check (k)\n        \n    knight = {'rudolph': 'the righteous'}\n    for k in knight:    # Autotest automatic conversion with one knight, since sort order of dict undefined\n        autoTester.check (k)\n        \n    tel = {'guido': 123}\n    tel.update({'edsger': 42})\n    autoTester.check (tel.setdefault ('linus', 456))\n    autoTester.check (tel ['linus'])\n    autoTester.check (tel.setdefault ('guido', 789))\n    autoTester.check (tel.pop ('guido', 1))\n    autoTester.check (tel.pop ('guido', 1))\n    autoTester.check (tel.pop ('edsger', 2))\n    autoTester.check (tel.pop ('foo', 'bar'))\n    autoTester.check (tel.pop ('foo', None))\n\n    # Check exceptions\n    knights = {'robin': 'the brave', 'gallahad': 'the pure'}\n    autoTester.check (\n        autoTester.expectException ( lambda: knights.pop(\"batman\") )\n    )\n    autoTester.check (\n        autoTester.expectException ( lambda: knights.pop(\"batman\", None) )\n    )\n    autoTester.check (\n        autoTester.expectException ( lambda: knights.pop(\"batman\", \"the gullible\") )\n    )\n",
		"from org.transcrypt.stubs.browser import __pragma__, __new__, __envir__, __symbols__\n\nfrom div_issues.issue55 import *        # Names not exported from package's __init__.py\n\ndef run (autoTester):\n    autoTester.check ('Issue 24')   # Non keyword switch generates javascript SyntaxError\n    switch = False\n    autoTester.check (switch)\n    \n    autoTester.check ('Issue 27')   # Python list.index () not translated correctly\n    autoTester.check (['zero', 'one', 'two', 'three', 'four'] .index ('three'))\n    \n    autoTester.check ('Issue 36')   # Bug in compiling lambda default argument values\n    # Workaround for Python closures capturing variables rather than values\n    # An extra enclosing scope is created to remember the value of the variable\n    results = []\n    for i in range (10):\n        # results.append (lambda: i)                # Works nowhere\n        # results.append (lambda j = i: j)          # Works only in Python\n        results.append ((lambda j: lambda: j) (i))  # Works in Python and Transcrypt\n    autoTester.check ([result () for result in results])        \n\n    autoTester.check ('Issue 37')   # Python integer division not translated correctly\n    autoTester.check (15 // 7)\n    \n    autoTester.check ('Issue 40')   # Python parentheses dropped during translation\n    autoTester.check (65 / (5 * 2))\n\n    autoTester.check ('Issue 50')   # Wrong answer with parentheses moved during translation\n    autoTester.check ((240 + 30 - 1) // 30 * 30)\n    \n    autoTester.check ('Issue 51')   # Wrong answer with set() compare\n    a = 1\n    b = 1\n    autoTester.check (a, b, {a, b} == {1, 2})\n    \n    autoTester.check ('Issue 52')   # Non keyword 'default' generates javascript SyntaxError\n    switch, case, default = 'switch', 'case', 'default'\n    autoTester.check (switch, case, default)\n    \n    autoTester.check ('Issue 54')   # Type dict missing clear(), setdefault()\n    aDict = {1: 11, 2: 22, 3: 33}\n    autoTester.check (aDict)\n    aDict.clear ()\n    autoTester.check (aDict)\n    \n    autoTester.check ('Issue 60')   # Python bool() not translated\n    three = 3\n    one = three & 1\n    seven = three | 4\n    eight = one << 3\n    four = eight >> 1\n    aTrue = bool (three & one)\n    aFalse = bool (three & four)\n    autoTester.check (3, three, 1, one, 7, seven, 8, eight, 4, four, True, aTrue, False, aFalse)\n    \n    autoTester.check ('Issue 65')   # Adding two lists with + not supported\n    __pragma__ ('opov')\n    aList = [4, 5, 6]\n    autoTester.check ([1, 2, 3,] + aList + [4, 5, 6])\n    autoTester.check (3 * [1, 2, 3])\n    autoTester.check ([1, 2, 3] * 3)\n    aString = 'Crocodile'\n    autoTester.check ('Tiger' + aString + 'Elephant')\n    autoTester.check (3 * aString)\n    autoTester.check (aString * 3)\n    __pragma__ ('noopov')\n    \n    autoTester.check ('Issue 76')   # Python //= not translated correctly\n    initially17 = 17\n    autoTester.check (initially17)\n    initially17 //= 2\n    autoTester.check (initially17)\n    initially17 //= 2\n    autoTester.check (initially17)\n    \n    autoTester.check ('Issue 112')  # When using -e6, iterating TypedArrays or other non-list Iterables doesn't work\n    try:\n        if __envir__.executor_name == __envir__.transpiler_name: # CPython doesn't know Int8Array\n            x = __new__ (Int8Array (2))\n        else:\n            x = [None, None]\n        \n        x [0] = 3\n        x [1] = 2\n        for i in x:\n            autoTester.check (i)\n        \n        # Since JavaScript 5 gives no exception for a loop over a non-iterable, following code must only be executed for JavaScript 6\n        # Since Transcrypt doesn't get to see all modules loaded by CPython, __ifdef__ cannot be made to do its thing for all modules in an efficient way for CPython\n        # But a normal 'if' will work\n        if '__esv6__' in __symbols__:\n            y = 3\n            for j in y:\n                autoTester.check (j)\n            \n    except: # No 'Exception' can be used behind this, since this is a JavaScript exception, and no subclass of Exception. ??? How desirable is this behaviour?\n        pass\n        # autoTester.check ('Detected iterating over non-iterable') # Minifier masks this exception, so we'll have to pass\n        \n    if '__esv6__' in __symbols__:   # \"if\" rather than \"__pragma__ ('ifdef')\" because CPython doesn't understand pragma's\n        autoTester.check ('Issue 122')  # Problem with yield (or rather with slicing beyond list end)\n        \n        def chunks (aList, chunkLength):\n            for index in range (0, len (aList), chunkLength):\n                yield aList [index : index + chunkLength]\n\n        for chunk in chunks ([chr (index + 97) for index in range (26)], 10):\n            autoTester.check (chunk)\n\n    autoTester.check ('Issue 123')  # Python % shouldn't behave like JS %\n    autoTester.check (10 % 3, 10 % -3, -10 % 3, -10 % -3, 10 % 10, 10 % -10, -10 % 10, -10 % -10)\n    \n    autoTester.check ('Issue 125')  # Strings not iterable\n    abc = 'abc'\n    \n    for index in abc:\n        autoTester.check (abc)\n        \n    autoTester.check ('Issue 127')  # Can't use the key 'keys' in a dict\n    autoTester.check ({\"include_docs\": \"true\", \"keys\": [\"key1\", \"key2\"], \"limit\": 50})\n    \n    autoTester.check ('Issue 134')  # Operator %= translated incorrectly\n    x0, x1, x2, x3, x4, x5 = 5, 12, -5, -5, 0, 0\n    x0 %= 10; x1 %= 5; x2 %= 2; x3 %= -3; x4 %= 1; x5 %= -1000 \n    autoTester.check (x0, x1, x2, x3, x4)\n    \n    autoTester.check ('Issue 136')  # Method dict.get(key[, default]) not implemented\n    aDict = {'a': 'ape', 'b': 'banana'}\n    autoTester.check (aDict.get ('a', 'noApe'), aDict.get ('b'), aDict.get ('c', 'noCarot'), aDict.get ('d'))\n    \n    autoTester.check ('Issue 144')\n    __pragma__('opov')\n    aList = [x for x in [1, 2, 3]]\n    autoTester.check (aList)\n    __pragma__('noopov')    \n    \n    autoTester.check ('<br><br>Issue 145<br>')  # List sorting incorrect in case of multiple columns\n    \n    class SortTest:\n        def __init__ (self):\n            self.alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            self.nChars = 10\n            self.nCols = 10\n            self.nRows = 30\n            \n            self.pseudoRandom = 0\n            \n            def randomWord ():\n                word = ''\n                for iChar in range (self.nChars):\n                    self.pseudoRandom = (81212 * self.pseudoRandom + 28411) % 134456\n#                   self.pseudoRandom = (1234 * self.pseudoRandom + 57) % 137           # Deliberately short period\n                    word += self.alphabet [self.pseudoRandom % 26]\n                return word \n        \n            self.rows = [[randomWord () for iCol in range (self.nCols)] for iRow in range (self.nRows)]\n                \n        def sort (self):\n            for iCol in reversed (range (self.nCols)):\n                self.rows.sort (key = lambda row: row [iCol])\n            \n    sortTest = SortTest ()\n    \n    autoTester.check ('<br>Unsorted:<br>')\n    for row in sortTest.rows:\n        autoTester.check ('{}<br>'.format (','.join ([word for word in row])))\n        \n    sortTest.sort ()\n    \n    autoTester.check ('<br>Sorted:<br>')\n    for row in sortTest.rows:\n        autoTester.check ('{}<br>'.format (','.join ([word for word in row])))\n        \n    autoTester.check ('<br><br>Issue 148<br>')  # Allow key a.o. key 'items' in dict\n    \n    aDict = {\n        'items': [4, 5, 6]\n    }\n\n    for aKey, aValue in aDict.items ():\n        autoTester.check ('{}: {}'.format (aKey, aValue))   \n        \n    autoTester.check ('<br><br>Issue 169<br>')  # Add support for float('inf') and float('-inf')\n    \n    autoTester.check (int (1 / float ('inf')), int (1 / float ('-inf')))\n    \n    autoTester.check ('<br><br>Issue 178<br>')  # List Comprehensions / Operator Precedence Bug\n    \n    bitmaps = [\n        (2 , ''),\n        (4 , ''),\n        (8, 'i'),\n        (16, 'm'),\n        (32, 'y'),\n        (64, 'u'),\n        (128, 'g')\n    ]\n    \n    for flags in (122, 233, 11, 55, 79, 201, 23, 111, 200, 100, 50, 25, 12, 6):\n        autoTester.check  (''.join ([x [1] for x in bitmaps if (x [0] & flags) > 0]))\n    ",
		"from div_issues.issue55.a import f1\n\nfrom div_issues.issue55.sub1 import *\nfrom div_issues.issue55.sub2 import anA, aB\nfrom div_issues.issue55.sub3 import x as y\n",
		"def f1 ():\n    return 'f1'\n    ",
		"p = 'p'\nq = 'q'\nr = 'r'\n",
		"anA = 'a'\naB = 'b'\n",
		"x = 'x'\n",
		"# Also contains small enhancements\n\n'This is a single line docstring'\nclass A:\n    '''\n    This\n    is \n    a \n    multiline\n    docstring\n    '''\n    def __init__ (self, x):\n        'This is a single line comment'\n        self.x = x\n        '''\n        This\n        is \n        a \n        multiline\n        docstring\n        '''\n    'This is a single line docstring'\n'''\nThis\nis \na \nmultiline\ndocstring\n'''\n\na = A (5.5)\n\ndef run (autoTester):   \n    autoTester.check ('Pull 56')\n    s = 'abcdefghij'\n    autoTester.check (s [2:3])\n    autoTester.check (s [:3])\n    autoTester.check (s [2:])\n    autoTester.check (s [::2])\n    \n    autoTester.check ('Pull 59')\n    autoTester.check (list (filter (lambda x: x % 2 == 0, range (10))))\n    autoTester.check (list (map (lambda x: x*x, range (0, 31, 3))))\n    \n    ",
		"'''Just a module\nto test docstrings'''\n'''Not visible'''\n\nfrom org.transcrypt.stubs.browser import __pragma__\n__pragma__ ('docat')\n\ndef run (autoTester):\n    def f (p):\n        '''Just a function\n        called f'''\n        '''Not visible'''\n        autoTester.check (p) \n\n    class C:\n        '''Just a class\n        called C'''\n        '''Not visible'''\n        def g (self, q):\n            '''Just a method\n            called g'''\n            '''Not visible'''\n            autoTester.check (q)\n        \n    autoTester.check (__doc__)\n    autoTester.check ()\n\n    autoTester.check (f.__doc__)\n    autoTester.check ()\n\n    autoTester.check (C.__doc__)\n    autoTester.check ()\n\n    autoTester.check (C.g.__doc__)\n    autoTester.check ()\n\n    f ('Doc')\n    C () .g ('strings')\n",
		"from org.transcrypt.stubs.browser import __envir__, __new__, __pragma__\n\nif __envir__.executor_name == __envir__.transpiler_name:\n    class BaseException:        # ??? Make part of __builtins__ for CPython compliance?\n        pass\n\nclass Ex1 (Exception):\n    pass\n        \nclass Ex2 (Ex1):\n    pass\n    \nclass Ex3 (Exception):\n    pass\n    \nclass Table (BaseException):    # Any Python exception MUST inherit from BaseException\n    def __init__ (self, *args):\n        self.fields = args\n        \n    def __repr__ (self):\n        return 'Table' + repr (self.fields) .replace (', ', ',') .replace ('\\'', '')\n\ndef test1 ():\n    raise (Exception ('mary'))\n    \ndef test2 (autoTester):\n    try:\n        test1 ()\n    except Ex1 as exception:\n        autoTester.check (111)\n        autoTester.check (exception)\n    except Exception as exception:\n        autoTester.check (222)\n        autoTester.check (exception)\n        \ndef run (autoTester):\n    test2 (autoTester)\n    \n    try:\n        raise Ex2 ('had')\n    except Ex1 as exception:\n        autoTester.check ('a')\n    except Exception as exception:\n        autoTester.check ('little')\n        autoTester.check (exception)\n        \n    autoTester.check (333)\n        \n    try:\n        raise Ex1 ('lamb')\n    except Ex2 as exception:\n        autoTester.check ('his')\n        autoTester.check (exception)\n    except Ex1 as exception:\n        autoTester.check ('fleece')\n        autoTester.check (exception)\n    except Exception as exception:\n        autoTester.check ('was')\n        autoTester.check (exception)\n    finally:\n        autoTester.check ('white')\n        \n    autoTester.check (444)\n\n    def test3 ():\n        raise Ex3 ('as')\n        \n    autoTester.check (555)\n\n    try:\n        test3 ()\n    except Ex1 as exception:\n        autoTester.check ('snow')\n        autoTester.check (exception)\n    except Exception as exception:\n        autoTester.check ('and')\n        autoTester.check (exception)\n    finally:\n        autoTester.check ('everywhere')\n        \n    autoTester.check (666)\n    \n    try:\n        raise Ex3 ('that')\n    except Ex1 as exception:\n        autoTester.check ('mary')\n        autoTester.check (exception)\n    except:\n        autoTester.check ('went')\n    finally:\n        autoTester.check ('the')\n    \n    autoTester.check (777)\n    \n    try:\n        try:\n            raise Ex3 ('lamb')\n        except Ex1 as exception:\n            autoTester.check ('was')\n            autoTester.check (exception)\n        finally:\n            autoTester.check ('to')\n    except Ex3 as exception:    # We should get here, exception not swallowed\n        autoTester.check ('go')\n        autoTester.check (exception)\n        \n    try:\n        raise __new__ (Table ('he', 'followed', 'her'))\n    except Ex1 as exception:\n        autoTester.check ('to')\n        autoTester.check (exception)\n    except Table as exception:  # Pure JavaScript exception, if no Python __class__\n        autoTester.check ('school')\n        autoTester.check (exception)\n    except Ex3 as exception:\n        autoTester.check ('one')\n        autoTester.check (exception)\n    finally:\n        autoTester.check ('day')\n    \n    try:\n        assert 2 * 8 / 4 == 2, 'Assert error 1'\n    except AssertionError as exception:\n        autoTester.check (exception)\n        \n    try:\n        assert 2 * 8 / 4 == 4, 'Assert error 2'\n    except AssertionError as exception:\n        autoTester.check (exception)\n        \n    try:\n        assert 2 * 8 / 4 == 2\n    except AssertionError as exception:\n        autoTester.check (exception)\n        \n    try:\n        assert 2 * 8 / 4 == 4\n    except AssertionError as exception:\n        autoTester.check (exception)\n        \n    autoTester.check (888)\n    \n    try:\n        autoTester.check ('hello world 1')\n    except:\n        autoTester.check ('error 1')\n    else:\n        autoTester.check ('no error 1')\n        \n    i = 1 + 2\n    try:\n        autoTester.check ('hello world 2')\n        if i == 3:  # Prevent unreachable code warning\n            raise Exception ()\n    except:\n        autoTester.check ('error 2')\n    else:\n        autoTester.check ('no error 2')\n        \n    for raiseIt in (False, True):\n        try:\n            try:\n                if raiseIt:\n                    raise Exception ()\n                autoTester.check ('no error 3')\n            finally:\n                autoTester.check ('anyhow 3')\n        except:\n            autoTester.check ('error 3')\n            ",
		"from org.transcrypt.stubs.browser import *\nfrom org.transcrypt.stubs.browser import __pragma__, __envir__\n\ndef indices (key):\n    if __envir__.executor_name == __envir__.transpiler_name:\n        return tuple (key) if type (key) == list else key\n    else:\n        try:\n            return key.indices (1000000000)\n        except:\n            try:\n                return tuple ([indices (subkey) for subkey in key])\n            except:\n                return key\n\nclass Test:\n    def __init__ (self, autoTester):\n        self.autoTester = autoTester\n\n    def __getitem__ (self, key):\n        self.autoTester.check ('getitem (', indices (key), ')')\n        return 1234567\n        \n    def __setitem__ (self, key, value):\n        self.autoTester.check ('setitem (', indices (key), ')', value)\n\ndef run (autoTester):\n    a = b = c = d = e = f = g = h = i = j = k = l = Test (autoTester)\n\n    __pragma__ ('opov')\n            \n    a [1:2:3, 4:5:6] = b [7:8:9]\n    c [1:2:3] = d [4:5:6, 7:8:9]\n    e [1, 1:2:3, 3] = f [4, 4:5:6, 6]\n    g [1, 2, 3] = h [1, 2, 3]\n    i [1] = j [1]\n    k [1:2:3] = l [1:2:3]\n",
		"from org.transcrypt.stubs.browser import __pragma__\n\nclass A:\n    foo='bar'\n    def __init__ (self):\n        self.foo2 = 'bar2'\n\nclass B (A):\n    foo3='bar3'\n    def __init__ (self):\n        self.foo4 = 'bar4'\n        \ndef run (autoTester):\n    autoTester.check ('sort and sorted<br>')\n    a = [1, 5, 3, 2, -1]\n    b = ['sun', 'earth', 'moon']\n    \n    autoTester.check (sorted (a))\n    autoTester.check (sorted (b))\n    \n    a.sort ()\n    autoTester.check (a)\n    \n    b.sort ()\n    autoTester.check (b)\n\n    autoTester.check (sorted (a, reverse = True))\n    autoTester.check (sorted (b, reverse = True))\n    \n    a.sort (reverse = True)\n    autoTester.check (a)\n    \n    b.sort (reverse = True)\n    autoTester.check (b)\n    \n    b.sort (key = lambda x: len (x)) \n    autoTester.check (b)\n\n    b.sort (key = lambda x: len (x), reverse = True) \n    autoTester.check (b)\n\n    autoTester.check ('<br><br>dir<br>')\n    autoTester.check ([entry for entry in dir (A) if not entry.startswith ('__')])\n    autoTester.check ([entry for entry in dir (A()) if not entry.startswith ('__')])\n    autoTester.check ([entry for entry in dir (B) if not entry.startswith ('__')])\n    autoTester.check ([entry for entry in dir (B()) if not entry.startswith ('__')])\n\n    autoTester.check ('<br><br>any, all, sum<br>')\n    list1 = ['ape', 'node', 'mice']\n    list2 = ['vim', '', 'jet']\n    list3 = ['', '', '']\n    list4 = [[1, 2], [1], []]   # Truthyness into play\n    autoTester.check (list1, any (list1), all (list1))\n    autoTester.check (list2, any (list2), all (list2))\n    autoTester.check (list3, any (list3), all (list3))\n    autoTester.check (list4, any (list4), all (list4))\n    \n    autoTester.check (sum (range (5)))\n    \n    __pragma__ ('ifdef', '__esv6__')\n    if '__esv6__' in autoTester.symbols:    \n        def generator1 ():\n            for i in range (5):\n                yield i;\n                \n        def generator2 ():\n            for i in range (5):\n                if i % 2:\n                    yield 0\n                else:\n                    yield i;\n                    \n        def generator3 ():\n            for i in range (5):\n                yield 0;\n                \n        autoTester.check (generator1 (), any (generator1 ()), all (generator1 ()))\n        autoTester.check (generator2 (), any (generator2 ()), all (generator2 ()))\n        autoTester.check (generator3 (), any (generator3 ()), all (generator3 ()))\n        \n        autoTester.check (sum (generator1 ()))\n    __pragma__ ('endif')\n",
		"def run (autoTester):\n    # Right hand side slices\n    all = range (32)\n    autoTester.check (all)\n    \n    autoTester.check (all [8 : 24])\n    autoTester.check (all [8 : 24 : 2]) \n    \n    # Left hand side slices\n    aList = [3, 4, 7, 8]\n    autoTester.check (aList)\n    \n    aList [4 : 4] = [9, 10]\n    autoTester.check (aList)\n    \n    aList [2 : 2] = [5, 6]\n    autoTester.check (aList)\n    \n    aList [0 : 0] = [1, 2]\n    autoTester.check (aList)\n    \n    aList [ : : 2] = [x + 0.001 for x in range (10) if x % 2]\n    autoTester.check (aList)\n",
		"    __nest__ (\n        __all__,\n        'itertools', {\n            __all__: {\n                __inited__: false,\n                __init__: function (__all__) {\n__pragma__ ('ifdef', '__esv6__')\n                    var count = function* (start, step) {\n                        if (start == undefined) {\n                            start = 0;\n                        }\n                        if (step == undefined) {\n                            step = 1;\n                        }\n                        while (true) {\n                            yield start;\n                            start += step;\n                        }\n                    }\n                    var cycle = function* (iterable) {                      \n                        let buffer = Array.from (iterable); // Can't reset, Chrome can't obtain iter from gener\n                        while (true) {\n                            for (let item of buffer) {\n                                yield item;\n                            }\n                        }\n                    }\n                    var repeat = function* (item, n) {\n                        if (typeof n == 'undefined') {\n                            while (true) {\n                                yield item;\n                            }\n                        }\n                        else {\n                            for (let index = 0; index < n; index++) {\n                                yield item;\n                            }\n                        }\n                    }\n                    var accumulate = function* (iterable, func) {\n                        let sum;\n                        let first = true;\n                        if (func) {\n                            for (let item of iterable) {\n                                if (first) {\n                                    sum = item;\n                                    first = false;\n                                }\n                                else {\n                                    sum = func (sum, item);\n                                }\n                                yield sum;\n                            }\n                        }\n                        else {\n                            for (let item of iterable) {\n                                if (first) {\n                                    sum = item;\n                                    first = false;\n                                }\n                                else {\n                                    sum = sum + item;\n                                }\n                                yield sum;\n                            }\n                        }\n                    }\n                    var chain = function* () {\n                        let args = [] .slice.apply (arguments);                         \n                        for (let arg of args) {\n                            for (let item of arg) {\n                                yield item;\n                            }\n                        }\n                    }\n                    chain.from_iterable = function* (iterable) {                        \n                        for (let item of iterable) {\n                            for (let subItem of item) {\n                                yield subItem;\n                            }\n                        }\n                    }\n                    var compress = function* (data, selectors) {\n                        let dataIterator = data [Symbol.iterator] .call (data);\n                        let selectorsIterator = selectors [Symbol.iterator] ();\n                        while (true) {\n                            let dataItem = dataIterator.next ();\n                            let selectorsItem = selectorsIterator.next ();\n                            if (dataItem.done || selectorsItem.done) {\n                                break;\n                            }\n                            else {\n                                if (selectorsItem.value) {\n                                    yield dataItem.value;\n                                }\n                            }\n                        }\n                    }\n                    var dropwhile = function* (pred, seq) {\n                        let started = false;\n                        for (let item of seq) {\n                            if (started) {\n                                yield item;\n                            }\n                            else if (!pred (item)) {\n                                started = true;\n                                yield item;\n                            }\n                        }\n                    }\n                    var filterfalse = function* (pred, seq) {\n                        for (let item of seq) {\n                            if (!pred (item)) {\n                                yield item;\n                            }\n                        }\n                    }\n                    var groupby = function* (iterable, keyfunc) {\n                        let anIterator = iterable [Symbol.iterator] ();\n                        let item = anIterator.next ();\n                        \n                        if (item.done) {\n                            return;\n                        }\n                        \n                        let groupKey = keyfunc (item.value);\n                        let more = true;\n                        \n                        function* group () {\n                            while (true) {\n                                yield (item.value);\n                                item = anIterator.next ();\n                                \n                                if (item.done) {\n                                    more = false;\n                                    return;\n                                }\n                                \n                                let key = keyfunc (item.value);\n                                \n                                if (key != groupKey) {\n                                    groupKey = key;\n                                    return;\n                                }\n                            }\n                        }\n                        \n                        while (more) {\n                            yield tuple ([groupKey, group ()]);\n                        }\n                    }\n                    \n                    var islice = function* () {\n                        let start;  // Have to be defined at function level, or Closure compiler will loose them after a yield \n                        let stop;   //\n                        let step;   //\n                        \n                        let args = [] .slice.apply (arguments);\n                        let anIterator = args [0][Symbol.iterator] ();\n                        if (args.length == 2) {\n                            stop = args [1];\n                            start = 0;\n                            step = 1;\n                        }\n                        else {\n                            start = args [1];\n                            stop = args [2];\n                            if (args.length == 4) {\n                                step = args [3];\n                            }\n                            else {\n                                step = 1;\n                            }\n                        }\n                        for (let index = 0; index < start; index++) {\n                            if (anIterator.next (). done) {\n                                return;\n                            }\n                        }\n                        for (let index = 0; index < stop - start; index++) {\n                            let next = anIterator.next ();\n                            if (next.done) {\n                                return;\n                            }\n                            if (index % step == 0) {\n                                yield next.value;\n                            }\n                        }\n                    }\n                    var starmap = function* (func, seq) {\n                        let anIterator = seq [Symbol.iterator] ();\n                        while (true) {\n                            let next = anIterator.next ()\n                            if (next.done) {\n                                return;\n                            }\n                            else {\n                                yield func (...next.value); \n                            }\n                        }\n                    }\n                    var takewhile = function* (pred, seq) {\n                        for (let item of seq) {\n                            if (pred (item)) {\n                                yield item;\n                            }\n                            else {\n                                return;\n                            }\n                        }\n                    }\n                    var tee = function (iterable, n) {\n                        if (n == undefined) {\n                            n = 2;\n                        }\n                        let all = [];                               // Don't return iterator since destructuring assignment cannot yet deal with that\n                        let one = list (iterable);\n                        for (let i = 0; i < n; i++) {\n                            all.append (one [Symbol.iterator] ());  // Iterator rather than list, exhaustable for semantic equivalence\n                        }\n                        return list (all);\n                    }\n                    \n                    var product = function () {\n                        let args = [] .slice.apply (arguments);\n                        if (args.length && args [args.length - 1] .hasOwnProperty ('__kwargtrans__')) {\n                            var repeat = args.pop () ['repeat']; \n                        }\n                        else {\n                            var repeat = 1;\n                        }\n                        \n                        let oldMolecules = [tuple ([])];\n                        for (let i = 0; i < repeat; i++) {\n                            for (let arg of args) {\n                                let newMolecules = [];\n                                for (let oldMolecule of oldMolecules) {\n                                    for (let atom of arg) {\n                                        newMolecules.append (tuple (oldMolecule.concat (atom)));\n                                    }\n                                }\n                                oldMolecules = newMolecules;\n                            }\n                        }\n                        return list (oldMolecules); // Also works if args is emptpy\n                    }\n                    var permutations = function (iterable, r) {\n                        if (r == undefined) {\n                            try {\n                                r = len (iterable);\n                            }\n                            catch (exception) {\n                                r = len (list (iterable));\n                            }\n                        }\n                        let aProduct = product (iterable, __kwargtrans__ ({repeat: r}));\n                        let result = [];\n                        for (let molecule of aProduct) {\n                            if (len (set (molecule)) == r) {    // Weed out doubles\n                                result.append (molecule);\n                            }\n                        }\n                        return list (result);\n                    }\n                    var combinations = function (iterable, r) {\n                        let tail = list (iterable);\n                        function recurse (tail, molecule, rNext) {\n                            for (let index = 0; index < len (tail) - rNext; index++) {\n                                let newMolecule = molecule.concat (tail.slice (index, index + 1));\n\n                                if (rNext) {\n                                    recurse (tail.slice (index + 1), newMolecule, rNext - 1);\n                                }\n                                else {\n                                    result.append (tuple (newMolecule));\n                                }\n                            }\n                        }\n                        let result = [];\n                        recurse (tail, tail.slice (0, 0), r - 1);\n                        return list (result);\n                    }\n                    var combinations_with_replacement = function (iterable, r) {\n                        let tail = list (iterable);\n                        function recurse (tail, molecule, rNext) {\n                            for (let index = 0; index < len (tail); index++) {\n                                let newMolecule = molecule.concat (tail.slice (index, index + 1));\n\n                                if (rNext) {\n                                    recurse (tail.slice (index), newMolecule, rNext - 1);\n                                }\n                                else {\n                                    result.append (tuple (newMolecule));\n                                }\n                            }\n                        }\n                        let result = [];\n                        recurse (tail, tail.slice (0, 0), r - 1);\n                        return list (result);\n                    }\n__pragma__ ('else')\n                    var chain = function () {\n                        var args = [] .slice.apply (arguments);\n                        var result = [];\n                        for (var index = 0; index < args.length; index++) {\n                            result = result.concat (args [index]);\n                        }\n                        return list (result);\n                    }\n__pragma__ ('endif')\n                    //<all>\n__pragma__ ('ifdef', '__esv6__')\n                    __all__.count = count;\n                    __all__.cycle = cycle;\n                    __all__.repeat = repeat;\n                    __all__.accumulate = accumulate;\n                    __all__.chain = chain;\n                    __all__.compress = compress;\n                    __all__.dropwhile = dropwhile;\n                    __all__.filterfalse = filterfalse;\n                    __all__.groupby = groupby;\n                    __all__.islice = islice;\n                    __all__.starmap = starmap;\n                    __all__.takewhile = takewhile;\n                    __all__.tee = tee;\n                    __all__.product = product;\n                    __all__.permutations = permutations;\n                    __all__.combinations = combinations;\n                    __all__.combinations_with_replacement = combinations_with_replacement;\n__pragma__ ('else')\n                    __all__.chain = chain;\n__pragma__ ('endif')\n                    //</all>\n                }\n            }\n        }\n    );\n",
		"def run (autoTester):\n    z = 1000\n    autoTester.check ((lambda x, y: x + y + z) (111, 222))\n\n    def f (list0, list1, aFunc):\n        return [aFunc (*elem) for elem in zip (list0, list1)]\n\n    x = f (range (10), range (0, 100, 10), lambda x, y: x + y + z)\n    autoTester.check (x)\n    \n    autoTester.check (f (range (10, 20), range (100, 200, 10), lambda x, y: x * y + 100 * z))\n    autoTester.check (f (range (10, 20), range (100, 200, 10), lambda *args: args [0] * args [1] + 100 * z))\n",
		"def run (autoTester):\n    squares = [i * i for i in range (10) if i % 2]\n    autoTester.check (squares)\n    \n    tuples = [\n        (x, y, z)\n        for x in (100, 200, 300, 400, 500, 600, 700)\n            for y in (10, 20, 30, 40, 50, 60, 70) if 20 < y  < 60\n                for z in (1, 2, 3, 4, 5, 6, 7) if 200 < x < 600 if 2 < z < 6\n    ]\n    autoTester.check (tuples)\n    \n    tricky = [(2 * x, 3 * y) for x, y in ((10, 11), (20, 21))]\n    autoTester.check (tricky)\n    \n    nested = [2 * x for x in [x * x for x in range (3)]]\n    autoTester.check (nested)\n    \n    a = 100\n    x = 5\n    scopeTest = [x + a for x in range (5)]\n    autoTester.check (x)\n    autoTester.check (scopeTest)\n",
		"def run (autoTester):       \n    class A:\n        class B:\n            class C:\n                def __init__ (self, x):\n                    self.x = x\n                    \n                def tell (self):\n                    autoTester.check (self.x)\n                    autoTester.check (self.e)\n                    \n                # Limitation: no destructuring assignment inside nested classes\n                e = 3\n                \n            def __init__ (self, x):\n                self.x = x\n                \n            def tell (self):\n                autoTester.check (self.x)\n                autoTester.check (self.d)\n                \n            d = 2\n                \n        c = 1\n\n        def __init__ (self, x):\n            self.x = x\n            \n        def tell (self):\n            autoTester.check (self.x)\n            autoTester.check (self.c)\n            \n    def f (x):\n        class G:\n            class H:\n                def __init__ (self, x):\n                    self.x = x\n                    \n                def tell (self):\n                    autoTester.check (self.x)\n                    autoTester.check (self.i)\n                    \n                i = 5\n        \n            def __init__ (self, x):\n                self.x = x\n                \n            def tell (self):\n                autoTester.check (self.x)\n                \n            k = 4\n            \n        g = G (6)\n        g.tell ()\n        autoTester.check (g.k)\n        \n        h = G.H (7)\n        h.tell ()\n        autoTester.check (h.i)\n        \n        class P (A.B):\n            pass\n            \n        p = P (7)\n        p.tell ()\n        autoTester.check (p.d)\n                \n    a = A (8)\n    b = a.B (9)\n    c = b.C (10)\n\n    a.tell ()\n    b.tell ()\n    c.tell ()\n\n    autoTester.check (a.c)\n    autoTester.check (b.d)\n\n    f (7)\n",
		"pi = Math.PI\ne = Math.E\n\nexp = Math.exp\n\ndef expm1 (x):      # IE workaround\n    return Math.exp (x) - 1\n\ndef log (x, base):\n    return Math.log (x) if base is js_undefined else Math.log (x) / Math.log (base)\n\ndef log1p (x):      # IE workaround\n    return Math.log (x + 1)\n\ndef log2 (x):       # IE workaround\n    return Math.log (x) / Math.LN2\n    \ndef log10 (x):      # IE workaround\n    return Math.log (x) / Math.LN10\n\npow = Math.pow\nsqrt = Math.sqrt\n\nsin = Math.sin\ncos = Math.cos\ntan = Math.tan\n\nasin = Math.asin\nacos = Math.acos\natan = Math.atan\natan2 = Math.atan2\n\nhypot = Math.hypot\n    \ndef degrees (x):\n    return x * 180 / Math.PI\n    \ndef radians (x):\n    return x * Math.PI / 180\n    \nsinh = Math.sinh\ncosh = Math.cosh\ntanh = Math.tanh\n\nasinh = Math.asinh\nacosh = Math.acosh\natanh = Math.atanh\n\nfloor = Math.floor\nceil = Math.ceil\ntrunc = Math.trunc\n\nisnan = js_isNaN\n\ninf = js_Infinity\nnan = js_NaN\n",
		"from org.transcrypt.stubs.browser import __pragma__\n\nclass UppercaserMeta (type):\n    def __new__ (meta, name, bases, attribs):\n        __pragma__ ('jsiter')       # Translate for ... in directly to JavaScript for ... in ... and translate {} to bare {} rather than to dict {}\n                                    # Using bare {} as attribs parameter to __new__ avoids dict attributes masking regular attributes\n                                    # For more flexibility use __pragma__ ('js', '{}', '''...''')\n        upperAttribs = {}\n        \n        for attribKey in attribs:   # Translates to 'for (var attribKey in attribs)' by virtue of __pragma__ ('jsiter'), to iterate over the attributes of a bare JavaScript {}\n            upperAttribs [attribKey if  attribKey.startswith ('__') else attribKey.upper ()] = attribs [attribKey]\n            \n        __pragma__ ('nojsiter')\n            \n        return type.__new__ (meta, name, bases, upperAttribs)\n\nclass Uppercaser (metaclass = UppercaserMeta):\n    pass\n    \nclass Animal (Uppercaser):\n    class Thoughts:\n        quantity = 7\n\n    # Limitation: no destructuring assignment if metaclass has to alter attributes\n    color = 'Brown'\n    state = 'Moving'\n\n    def move (self):\n        return 'Move'\n\nclass Plant (Uppercaser):\n    class Thoughts:\n        quantity = 6\n\n    color = 'Green'\n    state = 'Growing'\n\n    def grow (self):\n        return 'Grow'\n        \nclass Stone:\n    class Thoughts:\n        quantity = 5\n\n    color = 'Gray'\n    \n    def be (self):\n        return ('Being')\n\ndef run (autoTester):\n    animal = Animal ()\n    autoTester.check (animal.THOUGHTS.quantity, Animal.COLOR, animal.COLOR, animal.MOVE ())\n    \n    plant = Plant ()\n    autoTester.check (plant.THOUGHTS.quantity, Plant.COLOR, plant.COLOR, plant.GROW ())\n    \n    stone = Stone ()\n    autoTester.check (stone.Thoughts.quantity, Stone.color, stone.color, stone.be ())\n    ",
		"# coding: utf-8\n\nfrom org.transcrypt.stubs.browser import __envir__\n\ndef canonizeString (aString):\n    if __envir__.executor_name == 'transcrypt':\n        return aString.replace ('\\t', '\\\\t') .replace ('\\n', '\\\\n')\n    else:\n        return aString\n\ndef canonizeStringList (stringList):\n    return [canonizeString (aString) for aString in stringList]\n\ndef run (autoTester):\n    autoTester.check ('min', min (-1.1, -1, -3))\n    autoTester.check ('max', max (-1.1, -1, -3))\n    autoTester.check ('abs', abs (-1), abs (1), abs (0), abs (-0.1), abs (0.1))\n    autoTester.check ('ord', ord ('a'), ord ('e\u00c2\u00b4'[0]))  # This is the 2 codepoint version\n    \n    autoTester.check ('round',\n        round (4.006),\n        round (4.006, 2),\n        round (4060, -2),\n        \n        round (-4.006),\n        round (-4.006, 2),\n        round (-4060, -2),\n        \n        round (1/2.),\n        round (1/2., 1),\n        round (1/2, 1),\n        round (1/3., 2),\n        \n        round (-1/2.),\n        round (-1/2., 1),\n        round (-1/2, 1),\n        round (-1/3., 2),\n    \n        round (0.5),\n        round (0.51),\n        round (1.5),\n        round (1.51),\n        round (1.51),\n        round (2.5),\n        round (2.59),\n        round (3.5),\n        round (3.59),\n        \n        round (-0.5),\n        round (-0.51),\n        round (-1.5),\n        round (-1.51),\n        round (-1.51),\n        round (-2.5),\n        round (-2.59),\n        round (-3.5),\n        round (-3.59)\n    )\n    \n    strings = [\n        'der des dem den die der den die das des dem das',\n        'an auf hinter ueber    neben vor   zwischen',\n        '''\n            durch\n            fuer\n            ohne\n            um\n            bis\n            gegen\n            entlang\n        ''',\n        'eins,zwei,drie,vier,fuenf,sechs,sieben'\n    ]\n    \n    autoTester.check ('<br><br>split')\n    for aString in strings:\n        autoTester.check (\n            canonizeString (aString),\n            canonizeStringList (aString.split ()),\n            canonizeStringList (aString.split (' ')),\n            canonizeStringList (aString.split (' ', 4)),\n            canonizeStringList (aString.split ('\\t')),\n            canonizeStringList (aString.split ('\\t', 4)),\n            canonizeStringList (aString.split ('\\n')),\n            canonizeStringList (aString.split ('\\n', 4)),\n            canonizeStringList (aString.split (',')),\n            canonizeStringList (aString.split (',', 4)),\n            '<br>'\n        )\n        \n    autoTester.check ('<br>rsplit')\n    for aString in strings:\n        autoTester.check (\n            canonizeString (aString),\n            canonizeStringList (aString.rsplit ()),\n            canonizeStringList (aString.rsplit (' ')),\n            canonizeStringList (aString.rsplit (' ', 4)),\n            canonizeStringList (aString.rsplit ('\\t')),\n            canonizeStringList (aString.rsplit ('\\t', 4)),\n            canonizeStringList (aString.rsplit ('\\n')),\n            canonizeStringList (aString.rsplit ('\\n', 4)),\n            canonizeStringList (aString.rsplit (',')),\n            canonizeStringList (aString.rsplit (',', 4)),\n            '<br>'\n        )\n        ",
		"from org.transcrypt.stubs.browser import __pragma__\nfrom cmath import *\n\ntwoPi = 2 * pi\nnDecs = 5\n\n__pragma__ ('opov')\n\ndef run (autoTester):\n    autoTester.check (phase (1 + 1j))\n    \n    aPolar = polar (3 + 5j)\n    autoTester.check (round (aPolar [0], nDecs), aPolar [1])\n    \n    aRect = rect (*aPolar)\n    autoTester.check (round (aRect.real), round (aRect.imag))\n    \n    anExp = exp (-2.2 - 3.3j)\n    autoTester.check (round (anExp.real, nDecs), round (anExp.imag, nDecs))\n    \n    aLog = log (anExp)\n    autoTester.check (round (aLog.real, nDecs), round (aLog.imag, nDecs))\n    \n    anExp10 = aLog ** 10\n    autoTester.check (round (anExp10.real, nDecs), round (anExp10.imag, nDecs))\n    \n    aLog10 = log10 (anExp10)\n    autoTester.check (round (aLog10.real, nDecs), round (aLog10.imag, nDecs))\n    \n    anExpRect = aLog ** aRect\n    autoTester.check (round (anExpRect.real, nDecs), round (anExpRect.imag, nDecs))\n    \n    aLogRect = log (anExpRect, aRect)\n    autoTester.check (round (aLogRect.real, nDecs), round (aLogRect.imag, nDecs))\n    \n    aSqrt = sqrt (1j)\n    autoTester.check (round (aSqrt.real, nDecs), round (aSqrt.imag, nDecs))\n    autoTester.check (sqrt (4))\n    anotherSqrt = sqrt (-4)\n    autoTester.check (round (anotherSqrt.real), round (anotherSqrt.imag))\n    \n    anAsin = asin (1 + 2j)\n    autoTester.check (round (anAsin.real, nDecs), round (anAsin.imag, nDecs))\n\n    anAcos = acos (-2 + 3j)\n    autoTester.check (round (anAcos.real, nDecs), round (anAcos.imag, nDecs))\n    \n    anAtan = atan (3 - 4j)\n    autoTester.check (round (anAtan.real, nDecs), round (anAtan.imag, nDecs))\n    \n    aSin = sin (anAsin)\n    autoTester.check (round (aSin.real), round (aSin.imag))\n    \n    aCos = cos (anAcos)\n    autoTester.check (round (aCos.real), round (aCos.imag))\n    \n    aTan = tan (anAtan)\n    autoTester.check (round (aTan.real), round (aTan.imag))\n    \n    anAsinh = asinh (aCos)\n    autoTester.check (round (anAsinh.real, nDecs), round (anAsinh.imag, nDecs))\n\n    anAcosh = acosh (aSin)\n    autoTester.check (round (anAcosh.real, nDecs), round (anAcosh.imag, nDecs))\n    \n    anAtanh = atanh (aTan)\n    autoTester.check (round (anAtanh.real, nDecs), round (anAtanh.imag, nDecs))\n    \n    aSinh = sinh (anAsinh)\n    autoTester.check (round (aSinh.real), round (aSinh.imag))\n    \n    aCosh = cosh (anAcosh)\n    autoTester.check (round (aCosh.real), round (aCosh.imag))\n    \n    aTanh = tanh (anAtanh)\n    autoTester.check (round (aTanh.real), round (aTanh.imag))\n    ",
		"from math import *\n\ndef _check(nr, autoTester):\n    # we just compare the first 15 digits of floats due to precision deviations\n    # in browser and CPython:\n    if isinstance(nr, float):\n        nr = str(nr)[:15]\n    autoTester.check(nr)\n\n\ndef run (autoTester):\n    check = lambda nr: _check(nr, autoTester)\n    check (pi)\n    check (e)\n    \n    check (exp (3))\n    check (int (expm1 (5)))\n    \n    check (log (0.2))\n    check (round (log (1024, 2)))\n    check (log1p (5))\n    check (int (log2 (257)))\n    check (int (log10 (1001)))\n    \n    check (pow (3, 4.5))\n    check (sqrt (25.1))\n    \n    check (sin (10))\n    check (cos (10))\n    check (tan (10))\n\n    check (asin (0.5))\n    check (acos (0.5))\n    check (atan (0.5))\n    check (atan2 (1, 2))\n    \n    check (int (hypot (3, 4.1)))\n    \n    check (degrees (pi/2.1))\n    check (radians (90))\n    \n    check (sinh (1))\n    check (cosh (1))\n    check (tan (1))\n    \n    check (asinh (70))\n    check (acosh (70))\n    check (atan (70))\n    \n    check (floor (3.5))\n    check (ceil (3.5))\n    check (trunc (3.5))\n    \n    check (isnan (3))\n    check (isnan (nan))\n    \n    \n",
		"import modules.mod1.mod11.mod111\nimport modules.mod3\nimport modules.mod1.mod11.mod112\nimport modules.mod1\nimport modules.mod1.mod11\nimport modules.mod2\nimport modules.mod2.mod21\nimport modules.mod2.mod22\n\nimport modules.mod1.mod11.mod111 as aliasMod111\nimport modules.mod1 as aMod1\n\nfrom modules.mod1.mod11 import mod111, mod112\n\nfrom modules.mod2 import mod21 as aMod21, mod22 as aMod22\n\nfrom modules.mod3 import *\n\nfrom modules.mod1.mod11.mod111 import A\n\na = modules.mod1.mod11.mod111.A (12345)\npi = modules.mod1.pi\nf = modules.mod2.f\n\ndef run (autoTester):\n    # Import without 'as'\n    autoTester.check ('modules')\n    autoTester.check (a.f ())\n    autoTester.check (modules.mod1.mod11.mod112.f ())\n    autoTester.check (modules.mod1.mod11.e)\n    autoTester.check (pi)\n    autoTester.check (f (102030))\n    autoTester.check (modules.mod2.mod21.f ())\n    B = modules.mod2.mod22.B\n    b = B ()\n    autoTester.check (b.x)\n    autoTester.check (modules.mod3.x)\n    \n    # Import with 'as'\n    a2 = aliasMod111.A (6789101112)\n    autoTester.check (a2.f ())\n    autoTester.check (aMod1.pi)\n    \n    # From ... import without 'as'\n    a3 = mod111.A (100.001)\n    autoTester.check (a3.f ())\n    autoTester.check (mod112.f ())\n    \n    # From ... import with 'as'\n    autoTester.check (aMod21.f ())\n    autoTester.check (aMod22.B () .x)\n    \n    # From ... import *\n    autoTester.check (mod3Hundred)\n    autoTester.check (mod3GetTwoHundred ())\n    autoTester.check (A (123.321) .f ())\n",
		"pi = 3.1415693588\n",
		"e = 2.74\n",
		"class A:\n    def __init__ (self, x):\n        self.x = x\n        \n    def f (self):\n        return self.x\n        ",
		"def f ():\n    return ('Paris, c\\'est la vie\\n')\n    ",
		"def f (p):\n    return 2 * p\n    ",
		"def f ():\n    return 'London is the town for me\\n'\n    ",
		"class B:\n    def __init__ (self):\n        self.x = 'Geef mij maar Amsterdam\\n'\n        ",
		"x = 'Toen wij uit Rotterdam vertrokken, vertrokken wij uit Rotterdam\\n'\nmod3Hundred = 100\n\ndef mod3GetTwoHundred ():\n    return 200\n    ",
		"def run (autoTester):\n    test1 = 1\n    test2 = 2\n    \n    def f ():\n        test1 = 10\n        \n        nonlocal test2\n        test2 = 20\n        \n        autoTester.check (test1, test2)\n        \n    f ()\n    autoTester.check (test1, test2)     \n",
		"from org.transcrypt.stubs.browser import __pragma__\n\nclass Matrix:\n    def __init__ (self, nRows, nCols, elements = []):\n        self.nRows = nRows\n        self.nCols = nCols\n        \n        if len (elements):\n            self._ = elements\n        else:\n            self._ = [[0 for col in range (nCols)] for row in range (nRows)]\n        \n    def __mul__ (self, other):\n        if type (other) == Matrix:\n            result = Matrix (self.nRows, other.nCols)\n            for iTargetRow in range (result.nRows):\n                for iTargetCol in range (result.nCols):\n                    for iTerm in range (self.nCols):\n                        result._ [iTargetRow][iTargetCol] += self._ [iTargetRow][iTerm] * other._ [iTerm][iTargetCol]\n            return result\n        else:   # other is a scalar\n            return self.__rmul__ (other)\n                \n    def __rmul__ (self, scalar):    # Only called if left operand is scalar, all other cases will call __mul__\n        result = Matrix (self.nRows, self.nCols)\n        for iRow in range (self.nRows):\n            for iCol in range (self.nCols): \n                result._ [iRow][iCol] = scalar * self._ [iRow][iCol]\n        return result\n    \n    def __add__ (self, other):\n        result = Matrix (self.nRows, self.nCols)\n        for iRow in range (self.nRows):\n            for iCol in range (self.nCols):\n                result._ [iRow][iCol] = self._ [iRow][iCol] + other._ [iRow][iCol]\n        return result\n        \n    def __getitem__ (self, index):\n        return self._ [index]\n\n    def __setitem__ (self, index, value):\n        self._ [index] = value\n        \n    def __repr__ (self):\n        return repr (self._)\n        \nclass Functor:\n    def __init__ (self, factor):\n        self.factor = factor\n        \n    __pragma__ ('kwargs')\n    def __call__ (self, x, y = -1, *args, m = -2, n, **kwargs):\n        return (\n            self.factor * x,\n            self.factor * y,\n            [self.factor * arg for arg in args],\n            self.factor * m,\n            self.factor * n,\n            # !!! [self.factor * kwargs [key] for key in sorted (kwargs.keys ())] Add supoprt for keys () on kwargs\n        )\n    __pragma__ ('nokwargs')\n    \nf = Functor (10)\n\n__pragma__ ('kwargs')\ndef g (x, y = -1, *args, m = -2, n, **kwargs):\n    return (x, y, args, m, n) # !!! , [kwargs [key] for key in sorted (kwargs.keys ())]) Add support for keys () on kwargs\n__pragma__ ('nokwargs')\n        \ndef run (autoTester):\n    m0 = Matrix (3, 3, [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 10]\n    ])\n    \n    m1 = Matrix (3, 3, [\n        [10, 20, 30],\n        [40, 50, 60],\n        [70, 80, 90]\n    ])\n    \n    x = 3\n    y = x * 4 * x\n    fast = 2 * 3\n    \n    __pragma__ ('opov')\n    \n    m1 [1][2] = m0 [1][2]\n    slow = 2 + 3\n    m2 = m0 * m1  + m1 * (m0 + m1)\n    m3 = 2 * (2 * m0 * 3 * m1 + m2 * 4) * 2\n    autoTester.check (m0 [1][1], m0 [1][2], m1 [1][1], m1 [1][2])\n    \n    __pragma__ ('noopov')\n    \n    fast2 = 16 * y + 1\n    \n    autoTester.check (m0, m1)\n    autoTester.check (x, y)\n    autoTester.check (m2)\n    autoTester.check (m3)\n    autoTester.check (fast, slow, fast2)\n    \n    x = 'marker'\n    \n    __pragma__ ('opov')\n    autoTester.check (f (3, 4, 30, 40, m = 300, n = 400, p = 3000, q = 4000))\n    autoTester.check (g (3, 4, 30, 40, m = 300, n = 400, p = 3000, q = 4000))\n    \n    autoTester.check (set ((1, 2, 3)) == set ((3, 2, 1)))\n    autoTester.check (set ((1, 2, 3)) != set ((3, 2, 1)))\n    autoTester.check (set ((1, 3)) == set ((3, 2, 1)))\n    autoTester.check (set ((1, 3)) != set ((3, 2, 1)))\n    autoTester.check (set ((1, 2)) < set ((3, 2, 1)))\n    autoTester.check (set ((1, 2, 3)) <= set ((3, 2, 1)))\n    autoTester.check (set ((1, 2, 3)) > set ((2, 1)))\n    autoTester.check (set ((1, 2, 3)) >= set ((3, 2, 1)))\n    \n    autoTester.check ((1, 2, 3) == (1, 2, 3))\n    autoTester.check ([1, 2, 3] == [1, 2, 3])\n    autoTester.check ((1, 2, 3) != (1, 2, 3))\n    autoTester.check ([1, 2, 3] != [1, 2, 3])\n    autoTester.check ((2, 1, 3) == (1, 2, 3))\n    autoTester.check ([2, 1, 3] == [1, 2, 3])\n    autoTester.check ((2, 1, 3) != (1, 2, 3))\n    autoTester.check ([2, 1, 3] != [1, 2, 3])\n    __pragma__ ('noopov')\n",
		"# First run a test from the command prompt, generating an HTML file.\n# The output of the test is stored in a DIV.\n# Also the script is automatically included in the HTML file.\n# Loading the HTML file will run the script.\n# This will compare the output of the script running in the browswer to the output in the DIV.\n# If those two match, the test reports OK, else it reports failure.\n\n\nfrom org.transcrypt.stubs.browser import __main__, __envir__, __pragma__\nfrom org.transcrypt.autotester.html import HTMLGenerator, DataConverter, JSTesterUI\n\n# Don't import __envir__ from __base__ since it will overwrite __buildin__.__envir__ in the browser\n# Import from stubs will be skipped in the browser\n# ... The ice is a bit thin here\n\n__pragma__ ('nokwargs')\n\nimport itertools\n\ndef getFileLocation(ancestor):\n\t\"\"\" This function needs to crawl up the stack\n\tand find out where the ancestor caller of\n\tthis function was in the source code of either the\n\tpython or javascript, depending on environment.\n\t@param ancestor the ancestor of this function that\n\t  we want to capture file information about.\n\t@return string indicating the file position and line number\n\t\"\"\"\n\tif __envir__.executor_name == __envir__.transpiler_name: # js\n\t\ts = None\n\t\t__pragma__('js', '{}',\n\t\t\t'''\n\t\t\tvar e = new Error();\n\t\t\tif ( ! e.stack ) {\n\t\t\t  console.log(\"MAJOR ISSUE: Browser Error lacks Stack\");\n\t\t\t} else {\n\t\t\t  s = e.stack;\n\t\t\t}\n\t\t\t''')\n\t\t# Now we will process the stack to find the grandparent\n\t\t# calling function\n\t\t# @note - I'm explicitly not including a 're' module\n\t\t#    dependency here\n\t\tframes = None\n\t\t__pragma__('js', '{}',\n\t\t\t'''\n\t\t\tvar linereg = new RegExp(\"\\\\n\\\\r|\\\\n\", \"g\");\n\t\t\tframes = s.toString().split(linereg);\n\t\t\t''')\n\t\tif ( frames is None or (len(frames) < 2)):\n\t\t\t__pragma__('js', '{}', 'console.log(\"Failed to Split Stack\");')\n\t\t\treturn(\"UNKNOWN:???\")\n\n\t\t# @note - if the call stack in transcrypts javascript\n\t\t#   translation changes then this index may need to change\n\t\t#   @todo - need more work here to determine this because\n\t\t#     this is fragile\n\t\tgpFrame = frames[(ancestor*2 + 1)]\n\t\t# This regex splits the string coming from the javascript\n\t\t# stacktrace so that we can connect the file and line number\n\t\t# runTests (http://localhost:8080/run/autotest.js:3159:8)\n\t\t#  func\t      URL\t\t      filename\t  lineno:colno\n\t\t# Group 1 = function\n\t\t# Group 2 & 3 = protocol and hostname\n\t\t# Group 4 = Path on this host (filename is at the end)\n\t\t# Group 5 = lineno\n\t\t# Group 6 = column number in file\n\t\tframeReg = r\"([^(]*)\\(?([^:]*:)\\/{2,3}([^:/]*:?)([^:]*):(\\d+):(\\d+)\"\n\t\tm = None\n\t\t__pragma__('js', '{}',\n\t\t\t'''\n\t\t\tvar r = new RegExp(frameReg);\n\t\t\tm = r.exec(gpFrame);\n\t\t\t''')\n\t\tif m:\n\t\t\tfilepath = m[4]\n\t\t\t# Split the filepath and take the last element\n\t\t\t# to the get filename\n\t\t\tpathParts = filepath.split(\"/\")\n\t\t\tfilename = pathParts[len(pathParts)-1]\n\t\t\tlineno = m[5]\n\t\t\treturn( \"{}:{}\".format(filename, lineno) )\n\t\telse:\n\t\t\t__pragma__('js', '{}', 'console.log(\"Failed to Match Frame\");')\n\t\t\treturn(\"UNKNOWN:???\")\n\t#ELSE\n\t# Needed because Transcrypt imports are compile time\n\t__pragma__(\"skip\")\n\tfrom inspect import getframeinfo, stack\n\ts = stack()\n\tcaller = getframeinfo(s[ancestor][0])\n\t# Trim the file name path so that we don't get\n\t# a lot of unnecessary content\n\tfilepath = caller.filename\n\t# @todo - this is a hack - we should use os.path\n\tpathParts = filepath.split('/')\n\tfilename = \"/\".join(pathParts[-2:])\n\treturn( \"%s:%d\" % (filename, caller.lineno))\n\t__pragma__ ('noskip')\n\n\n\nclass AutoTester:\n\t\"\"\" Main testing class for comparing CPython to Transcrypt. This\n\tclass is primarily used by calling the \"check\" method to confirm that\n\tthe result is the same in both environments and \"done\" when all checks\n\tfor a particular module have been completed.\n\t\"\"\"\n\tdef __init__ (self, symbols = []):\n\t\tself.symbols = symbols\n\t\t# refDict/testDict contains the test results\n\t\t# of each testlet identified by name as the key\n\t\tself._currTestlet = \"UNKNOWN\"\n\t\tself.testDict = {}\n\t\tself.refDict = {}\n\n\t\tif __envir__.executor_name == __envir__.transpiler_name:\n\t\t\tself.ui = JSTesterUI()\n\t\telse:\n\t\t\tself.ui = None\n\n\tdef sortedRepr (self, any):\n\t\t# When using sets or dicts, use elemens or keys\n\t\t# of one type, in sort order\n\t\tdef tryGetNumKey (key):\n\t\t\tif type (key) == str:\t# Try to interpret key as numerical, see comment with repr function in __builtins__\n\t\t\t\ttry:\n\t\t\t\t\treturn int (key)\n\t\t\t\texcept:\n\t\t\t\t\ttry:\n\t\t\t\t\t\treturn float (key)\n\t\t\t\t\texcept:\n\t\t\t\t\t\treturn key\n\t\t\telse:\n\t\t\t\treturn key\n\n\t\tif type (any) == dict:\n\t\t\treturn '{' + ', '.join ([\n\t\t\t\t'{}: {}'.format (repr (key), repr (any [key]))\n\t\t\t\tfor index, key in enumerate (sorted ([tryGetNumKey (key) for key in any.keys ()], key = lambda aKey: str (aKey)))\n\t\t\t]) + '}'\n\t\telif type (any) == set:\n\t\t\tif len (any):\n\t\t\t\treturn '{' + ', '.join (sorted ([str (item) for item in list (any)])) + '}'\n\t\t\telse:\n\t\t\t\treturn repr (any)\n\t\telif type (any) == range:\n\t\t\treturn repr (list (any))\n\t\telse:\n\t\t\treturn repr (any)\n\n\t__pragma__('kwargs')\n\tdef check (self, *args, ancestor = 2):\n\t\t\"\"\" Given a set of values from either the python or transcrypt\n\t\tenvironments, we log the position of the check call in the test\n\t\tand representative values of the passed arguments for later\n\t\tcomparison.\n\t\t\"\"\"\n\t\tposition=getFileLocation(ancestor)\n\t\t# N.B. stubs.browser provides a special sorting repr\n\t\titem = ' '.join ([self.sortedRepr (arg) for arg in args])\n\t\tif __envir__.executor_name == __envir__.transpiler_name:\n\t\t\tself.testDict[self._currTestlet].append((position,item))\n\t\telse:\n\t\t\tself.refDict[self._currTestlet].append((position,item))\n\n\t__pragma__('nokwargs')\n\n\tdef expectException(self, func):\n\t\t\"\"\" This method attempts to call the passed method and\n\t\tchecks to see whether an exception was generated.\n\t\t@return string indicating \"no exception\" or \"exception\"\n\t\t\"\"\"\n\t\ttry:\n\t\t\tfunc()\n\t\t\treturn(\"no exception\")\n\t\texcept Exception as exc:\n\t\t\treturn(\"exception\")\n\n\tdef throwToError(self, func):\n\t\t\"\"\" This function invokes the passed function and then\n\t\tconverts an exception to an error response so that\n\t\tthe unit test can continue even in the case where an\n\t\texception may or may not occur.\n\t\t\"\"\"\n\t\ttry:\n\t\t\treturn(func())\n\t\texcept Exception as exc:\n\t\t\treturn (None, \"!!!{}\".format(str(exc)))\n\n\tdef checkEval(self, func):\n\t\t\"\"\" Check the result of the passed function which is\n\t\tinvoked without arguments. If this function throws an\n\t\texception, that exception is caught and converted to an error\n\t\twith can be compared against the result. This allows the\n\t\tuser to control for exception that may or may not be generated\n\t\tin the unit tests\n\t\t\"\"\"\n\t\tret = self.throwToError(func)\n\t\tself.check(ret, ancestor = 3)\n\n\n\tdef checkPad(self, val, count):\n\t\t\"\"\" This method is to help manage flow control in unit tests and\n        keep all unit tests aligned\n\t\t\"\"\"\n\t\tfor i in range(0, count):\n\t\t\tself.check(val)\n\n\tdef _getTotalErrorCnt(self, testData, refData):\n\t\t\"\"\" This method determines the total number of non-matching\n\t\t    values in the test and reference data for a particular module.\n\t\t\"\"\"\n\t\terrCount = 0\n\t\tfor i,(refPos, refItem) in enumerate(refData):\n\t\t\ttry:\n\t\t\t\ttestPos,testItem = testData[i]\n\t\t\t\tif ( testItem != refItem ):\n\t\t\t\t\terrCount+=1\n\t\t\texcept:\n\t\t\t\terrCount+=1\n\t\treturn(errCount)\n\n\tdef compare (self):\n\t\t# Load the python reference data from the hidden HTML div\n\t\tdc = DataConverter()\n\t\tself.refDict = dc.getPythonResults()\n\n\t\ttotalErrors = 0\n\t\tsKeys = sorted(self.refDict.keys())\n\t\tfor key in sKeys:\n\t\t\trefData = self.refDict[key]\n\t\t\ttry:\n\t\t\t\ttestData = self.testDict[key]\n\t\t\t\tif ( testData is None ):\n\t\t\t\t\traise KeyError(\"No Test Data Module: {}\".format(key))\n\t\t\texcept KeyError:\n\t\t\t\t# No Test Data found for this key - we will populate with\n\t\t\t\t# errors for all ref data\n\t\t\t\tself.ui.appendSeqRowName(key, len(refData))\n\t\t\t\tfor i,(refPos, refItem) in enumerate(refData):\n\t\t\t\t\tself.ui.appendTableResult(key, None, None, refPos, refItem, False)\n\t\t\t\tcontinue\n\t\t\t# know we have testData so let's determine the total number of\n\t\t\t# errors for this test module. This will allow us to both set\n\t\t\t# the num of errors in the test module header row and set the\n\t\t\t# rows to the appropriate initial collapsed/expanded state.\n\t\t\terrCount= self._getTotalErrorCnt(testData, refData)\n\t\t\tcollapse = (errCount == 0)\n\t\t\tself.ui.appendSeqRowName(key, errCount)\n\n\t\t\t# Now we will populate the table with all the rows\n\t\t\t# of data fro the comparison\n\t\t\tfor i,(refPos, refItem) in enumerate(refData):\n\t\t\t\ttry:\n\t\t\t\t\t# This will throw if testData's length is\n\t\t\t\t\t# shorter than refData's\n\t\t\t\t\ttestPos,testItem = testData[i]\n\t\t\t\texcept:\n\t\t\t\t\ttestPos = None\n\t\t\t\t\ttestItem = None\n\n\t\t\t\tself.ui.appendTableResult(\n\t\t\t\t\tkey, testPos, testItem, refPos, refItem, collapse\n\t\t\t\t)\n\n\t\t\ttotalErrors += errCount\n\n\t\tself.ui.setOutputStatus( totalErrors == 0 )\n\n\n\tdef _cleanName(self, name):\n\t\t\"\"\" Clean the passed name of characters that won't be allowed\n\t\t    in CSS class or HTML id strings.\n\t\t\"\"\"\n\t\t# Convert testletName to replace any of the characters that\n\t\t# are not acceptable in a CSS class or HTML id - this is to\n\t\t# make our lives easier\n\t\t# @note - I'm SPECIFICALLY not using a regex here because the\n\t\t#   regex engine module is still under dev and could possibly\n\t\t#   have issues\n\t\tret = name\n\t\tinvalidChars = [\n\t\t\t'~', '!', '@', '$', '%',\n\t\t\t'^', '&', '*', '(', ')',\n\t\t\t'+', '=', ',', '.', '/',\n\t\t\t\"'\", ';', ':', '\"', '?',\n\t\t\t'>', '<', '[', ']', '\\\\',\n\t\t\t'{', '}', '|', '`', '#',\n\t\t\t\" \",\n\t\t]\n\t\tfor ch in invalidChars:\n\t\t\tret = ret.replace(ch, \"_\")\n\t\treturn(ret)\n\n\tdef run (self, testlet, testletName):\n\t\ttestletName = self._cleanName(testletName)\n\t\tself._currTestlet = testletName\n\t\tif __envir__.executor_name == __envir__.transpiler_name:\n\t\t\tself.testDict[self._currTestlet] = []\n\t\telse:\n\t\t\tself.refDict[self._currTestlet] = []\n\t\ttry:\n\t\t\ttestlet.run (self)\n\t\texcept Exception as exc:\n\t\t\tif ( self.ui is not None ):\n\t\t\t\tself.ui.setOutputStatus(False)\n\t\t\t\tself.ui.showException(testletName, exc)\n\t\t\telse:\n\t\t\t\t# Error - no UI yet\n\t\t\t\traise Exception(\"No Valid UI instance yet\")\n\n\n\tdef done (self):\n\t\tif __envir__.executor_name == __envir__.transpiler_name:\n\t\t\tself.compare ()\n\t\telse:\n\t\t\tfnameBase = __main__.__file__ [ : -3] .replace ('\\\\', '/') .rsplit ('/', 1) [-1]\n\t\t\thg = HTMLGenerator(fnameBase)\n\t\t\tfor minified in (False, True):\n\t\t\t\thg.generate_html(self.refDict, minified)\n",
		"# File: autotester/html.py\n# Author: Carl Allendorph\n# Date: 20NOV2016\n#\n# Description:\n#   This file contains the HTML generation code for the autotester.\n# This includes generating the initial HTML file as output of the\n# python run, and the javascript that builds the results at runtime\n# in the browser.\n#\n\nfrom org.transcrypt.stubs.browser import __main__, __envir__, __pragma__\n\n__pragma__ ('nokwargs')\n\nokColor = 'green'\nerrorColor = 'red'\nhighlightColor = 'yellow'\ntestletNameColor = 'blue'\n\nmessageDivId = 'message'\nreferenceDivId = 'python'\nrefResultDivId = \"pyresults\"\nrefPosDivId = \"pypos\"\ntestDivId = 'transcrypt'\ntableId = 'resulttable'\nresultsDivId = 'results'\nfaultRowClass = 'faultrow'\ntestletHeaderClass = \"testletheader\"\ntransValClass = \"trans-val\"\ntransPosClass = \"trans-pos\"\npyValClass = \"py-val\"\npyPosClass = \"py-pos\"\nexcAreaId = \"exc-area\"\nexcHeaderClass = \"exc-header\"\nforceCollapseId = \"force-collapse\"\nforceExpandId = \"force-expand\"\n\nclass HTMLGenerator(object):\n\t\"\"\" This class generates the HTML template for the autotester results.\n\tThis code is primarily run during the Python execution cycle but\n\tdoes define strings that are referenced by the javascript as well.\n\t\"\"\"\n\tdef __init__(self, filenameBase = None):\n\t\t\"\"\"\n\t\t@param filenameBase string denoting the base filename for the\n\t\tfiles this class will generate. This should NOT include the\n\t\tfile extension (.html for example). This will be tacked on\n\t\tlater depending on minified state.\n\t\t\"\"\"\n\t\tself._fnameBase = filenameBase\n\n\tdef generate_html(self, refDict, minified = False):\n\t\t\"\"\" Generate the HTML file that gets generated by the\n\t\tPython script portion of the test. File will be named\n\t\t'<fnameBase.html'\n\t\t@param refDict Dict of python reference data associated with\n\t\t  each of the test modules. The keys of this dict are the names\n\t\t  of the ref modules.\n\t\t@param minified indicates whether the output file should use the\n\t\t  minified version of the javascript or not. If minified, then\n\t\t  the output file will be name 'fnameBase.min.html'\n\t\t\"\"\"\n\t\tif ( self._fnameBase is None ):\n\t\t\traise ValueError(\"Filename Base must be defined to generate\")\n\t\tminInfix = '.min' if minified else ''\n\t\tfname = minInfix.join([self._fnameBase, '.html'])\n\t\tjsFileName = minInfix.join([self._fnameBase, '.js'])\n\t\tjsPath = \"{}/{}\".format(__envir__.target_subdir, jsFileName)\n\n\t\twith open( fname, 'w') as f:\n\t\t\tf.write(\"<html><head>\")\n\t\t\tself._writeCSS(f)\n\t\t\tf.write(\"</head><body>\")\n\n\t\t\tself._writeStatusHeaderTemplate(f)\n\n\t\t\tdc = DataConverter()\n\t\t\tdc.writeHiddenResults(f, refDict)\n\n\t\t\tself._writeTableArea(f)\n\n\t\t\tf.write ('<script src=\"{}\"></script>\\n\\n'.format (jsPath))\n\t\t\tf.write(\"</body></html>\")\n\n\t##########################\n\t# Internal Methods\n\t##########################\n\n\tdef _writeCSS(self, f):\n\t\tcssOut = \"\"\"\n\t\t<style>\n\t\t  body {\n\t\t    max-width: 100%;\n\t\t  }\n\t\t  .faultrow > td {\n\t\t     background-color: LightCoral;\n\t\t  }\n\t\t  #resulttable {\n\t\t    border-collapse: collapse;\n\t\t    width: 100%;\n\t\t    table-layout: fixed;\n\t\t  }\n\t\t  #resulttable th, #resulttable td {\n\t\t    border: 1px solid grey;\n\t\t  }\n\t\t  .testletheader > td {\n\t\t    background-color: LightSkyBlue;\n\t\t  }\n\t\t  .header-pos {\n\t\t    width: 20%;\n\t\t  }\n\t\t  .header-val {\n\t\t    width: 30%;\n\t\t  }\n\t\t  .py-pos,.trans-pos {\n\t\t    width: 20%;\n\t\t    overflow: hidden;\n\t\t  }\n\t\t  .py-val, .trans-val {\n\t\t    width: 30%;\n\t\t    overflow-x: auto;\n\t\t  }\n\t\t  .exc-header {\n\t      color: red;\n\t\t  }\n\t\t  .collapsed {\n\t\t    display: None;\n\t\t  }\n\t\t</style>\n\t\t\"\"\"\n\t\tf.write(cssOut)\n\n\tdef _writeStatusHeaderTemplate(self, f):\n\t\tf.write ('<b>Status:</b>\\n')\n\t\tf.write ('<div id=\"{}\"></div><br><br>\\n\\n'.format (messageDivId))\n\n\tdef _writeTableArea(self, f):\n\t\tf.write ('<div id=\"{}\"></div>'.format(excAreaId))\n\t\tf.write ('<div id=\"{}\">'.format(resultsDivId))\n\t\tf.write ('<div> <a id=\"{}\" href=\"#\"> Collapse All</a> <a id=\"{}\" href=\"#\">Expand All</a></div>'.format(forceCollapseId, forceExpandId))\n\t\tf.write ('<table id=\"{}\"><thead><tr> <th colspan=\"2\"> CPython </th> <th colspan=\"2\"> Transcrypt </th> </tr>'.format(tableId))\n\t\tf.write ('<tr> <th class=\"header-pos\"> Location </th> <th class=\"header-val\"> Value </th> <th class=\"header-val\"> Value </th> <th class=\"header-pos\"> Location </th> </tr></thead><tbody></tbody>')\n\t\tf.write ('</table>')\n\t\tf.write ('</div>')\n\nclass DataConverter(object):\n\t\"\"\" This class contains code that stores the python results in\n\tthe HTML document and can extract the data from the HTML to\n\tprepare it for comparison with the javascript results.\n\t\"\"\"\n\n\tdef writeHiddenResults(self, f, refDict):\n\t\t\"\"\" Write the Python results into a div that is hidden by\n\t\tdefault so that we can extract it at runtime.\n\t\t@param f file that we are writing the content into\n\t\t@param refDict python reference result data in the form of\n\t\ta dict. The keys are the names of the individual test modules.\n\t\t\"\"\"\n\t\tf.write('<div id=\"{}\" style=\"display: None\">'.format(referenceDivId))\n\t\tfor key in refDict.keys():\n\t\t\titemData = ' | '.join([x[1] for x in refDict[key]])\n\t\t\tposContent = ' | '.join([x[0] for x in refDict[key]])\n\t\t\tf.write('<div id=\"{}\">\\n'.format(key))\n\t\t\t# @note - we should probably HTML escape this\n\t\t\t#    data so that we don't get the HTML rendering\n\t\t\t#    engine mucking with our test result.\n\t\t\tf.write ('<div id=\"{}\">{}</div>\\n\\n'.format (refResultDivId, itemData))\n\t\t\tf.write ('<div id=\"{}\">{}</div>\\n'.format(refPosDivId, posContent))\n\t\t\tf.write('</div>\\n')\n\t\tf.write('</div></div>\\n')\n\n\tdef getPythonResults(self):\n\t\t\"\"\" Acquire the python unit test results from the\n\t\t    hidden div and parse into a dictionary.\n\t\t@return dict whose keys are the names of the test\n\t\t  submodules.\n\t\t\"\"\"\n\t\trefData = document.getElementById(referenceDivId)\n\t\t# Each of the children of this element is in the form\n\t\t# <div id=\"{key}\">\n\t\t#   <div id=\"pyresults\"> {Result Content} </div>\n\t\t#   <div id=\"pypos\"> {Result Positions} </div>\n\t\t# </div>\n\t\trefDict = {}\n\t\tfor child in refData.children:\n\t\t\tkeyName = child.getAttribute(\"id\")\n\t\t\tposData,resultData = self._extractPosResult(child)\n\t\t\trefDict[keyName] = zip(posData, resultData)\n\t\treturn(refDict)\n\n\tdef _extractPosResult(self, elem):\n\t\tresultData = None\n\t\tposData = None\n\t\tfor e in elem.children:\n\t\t\tidStr = e.getAttribute(\"id\")\n\t\t\tif ( idStr == refResultDivId):\n\t\t\t\tresultData = e.innerHTML.split(' | ')\n\t\t\telif ( idStr == refPosDivId):\n\t\t\t\tposData = e.innerHTML.split(' | ')\n\t\t\telse:\n\t\t\t\t# Unknown Element - very strange\n\t\t\t\tpass\n\t\treturn(posData, resultData)\n\n\ndef getRowClsName(name):\n\t\"\"\" Utility method for naming the test module class that\n\t    a row belows to\n\t\"\"\"\n\treturn(\"mod-\" + name)\n\n\nclass JSTesterUI(object):\n\t\"\"\" This class contains the code that populates the autotester results\n\twhile running in the javascript runtime.\n\t\"\"\"\n\tdef __init__(self):\n\t\t\"\"\"\n\t\t\"\"\"\n\t\tself.expander = TestModuleExpander()\n\n\tdef setOutputStatus(self, success):\n\t\tif ( success ):\n\t\t\tdocument.getElementById(messageDivId).innerHTML = '<div style=\"color: {}\">Test succeeded</div>'.format (okColor)\n\t\telse:\n\t\t\tdocument.getElementById(messageDivId).innerHTML = '<div style=\"color: {}\"><b>Test failed</b></div>'.format (errorColor)\n\n\tdef appendSeqRowName(self, name, errCount):\n\t\t\"\"\"\n\t\t\"\"\"\n\t\ttable = document.getElementById(tableId)\n\t\t# Insert at the end\n\t\trow = table.insertRow(-1);\n\t\trow.id = name\n\t\trow.classList.add(testletHeaderClass)\n\t\tself.expander.setupCollapseableHeader(row, (errCount == 0))\n\n\t\t# Populate the Row\n\t\theaderCell = row.insertCell(0)\n\t\theaderCell.innerHTML = name + \" | Errors = \" + str(errCount)\n\t\theaderCell.colSpan = 4\n\t\theaderCell.style.textAlign= \"center\"\n\n\n\tdef appendTableResult(self, name, testPos, testItem, refPos, refItem, collapse=False):\n\t\tclsName = getRowClsName(name)\n\n\t\ttable = document.getElementById(tableId)\n\t\t# Insert at the end\n\t\trow = table.insertRow(-1);\n\t\trow.classList.add(clsName)\n\t\tif ( testItem != refItem ):\n\t\t\trow.classList.add(faultRowClass)\n\t\t\trefPos = \"!!!\" + refPos\n\t\telse:\n\t\t\tself.expander.setCollapsed(row, collapse)\n\n\t\t# Populate the Row\n\t\tcpy_pos = row.insertCell(0)\n\t\tcpy_pos.innerHTML = refPos\n\t\tcpy_pos.classList.add(pyPosClass)\n\t\tcpy_val = row.insertCell(1)\n\t\tcpy_val.innerHTML = refItem\n\t\tcpy_val.classList.add(pyValClass)\n\t\ttrans_val = row.insertCell(2)\n\t\tif ( testItem is not None ):\n\t\t\ttrans_val.innerHTML = testItem\n\t\ttrans_val.classList.add(transValClass)\n\t\ttrans_pos = row.insertCell(3)\n\t\tif ( testPos is not None ):\n\t\t\ttrans_pos.innerHTML = testPos\n\t\ttrans_pos.classList.add(transPosClass)\n\n\n\tdef showException(self, testname, exc):\n\t\t\"\"\"\n\t\t\"\"\"\n\t\texcElem = document.getElementById(excAreaId)\n\t\theader = document.createElement(\"H2\")\n\t\theader.classList.add(excHeaderClass)\n\t\theader.innerHTML = \"Exception Thrown in JS Runtime\";\n\t\texcElem.appendChild(header)\n\t\tcontent = document.createElement(\"p\")\n\t\tcontent.innerHTML = \"Exception in {}: {}\".format(testname, str(exc))\n\t\texcElem.appendChild(content)\n\t\tstacktrace = document.createElement(\"p\")\n\t\tif ( exc.stack is not None ):\n\t\t\tstacktrace.innerHTML = str(exc.stack)\n\t\telse:\n\t\t\tstacktrace.innerHTML = \"No Stack Trace Available!\"\n\n\nclass TestModuleExpander(object):\n\t\"\"\" This class handles expanding or contracting a set of\n\ttest row results under a particular test.\n\t\"\"\"\n\tdef __init__(self):\n\t\t\"\"\"\n\t\t\"\"\"\n\t\tself.collapsedClass = \"collapsed\"\n\t\tself.modCollapseClass = \"mod-collapsed\"\n\n\t\tself._expandCollapseAllFuncs()\n\n\tdef setCollapsed(self, row, collapse):\n\t\t\"\"\"\n\t\t\"\"\"\n\t\tif ( collapse ):\n\t\t\trow.classList.add(self.collapsedClass)\n\t\telse:\n\t\t\trow.classList.remove(self.collapsedClass)\n\n\n\tdef setupCollapseableHeader(self, row, startCollapsed = False):\n\t\t\"\"\"\n\t\t\"\"\"\n\t\tif ( startCollapsed ):\n\t\t\trow.classList.add(self.modCollapseClass)\n\n\t\tdef toggleCollapse(evt):\n\t\t\t\"\"\" Toggle whether the\n\t\t\t\"\"\"\n\t\t\theaderRow = evt.target.parentElement\n\t\t\tdoCollapse = not headerRow.classList.contains(self.modCollapseClass)\n\t\t\tself.collapseModule(headerRow, doCollapse)\n\n\t\trow.onclick = toggleCollapse\n\n\n\tdef collapseModule(self, headerRow, doCollapse):\n\t\t\"\"\" collapse/expand particular module in the table of results\n\t\t\"\"\"\n\t\tname = headerRow.id\n\t\ttable = document.getElementById(tableId)\n\t\tclsName = getRowClsName(name)\n\t\tallRows = table.tHead.children\n\t\trows = filter(lambda x: x.classList.contains(clsName), allRows)\n\n\t\tfor row in rows:\n\t\t\tself.setCollapsed(row, doCollapse)\n\n\t\tif ( doCollapse ):\n\t\t\theaderRow.classList.add(self.modCollapseClass)\n\t\telse:\n\t\t\theaderRow.classList.remove(self.modCollapseClass)\n\n\tdef _expandCollapseAllFuncs(self):\n\t\t\"\"\" This function sets up the callback handlers for the\n\t\tcollapse all and expand all links\n\t\t\"\"\"\n\n\t\tdef applyToAll(evt, collapse):\n\t\t\t\"\"\"\n\t\t\t\"\"\"\n\t\t\ttable = document.getElementById(tableId)\n\n\t\t\t# find all rows in the testletheader class\n\t\t\tfiltFunc = lambda x: x.classList.contains(testletHeaderClass)\n\t\t\theaderRows = filter(filtFunc, table.tHead.children)\n\n\t\t\tfor headerRow in headerRows:\n\t\t\t\tself.collapseModule(headerRow, collapse)\n\n\t\tdef collapseAll(evt):\n\t\t\t\"\"\" collapse all rows handler\n\t\t\t\"\"\"\n\t\t\tevt.preventDefault()\n\t\t\tapplyToAll(evt, True)\n\t\t\treturn(False)\n\n\t\tdef expandAll(evt):\n\t\t\t\"\"\" Expand All Rows Handler\n\t\t\t\"\"\"\n\t\t\tevt.preventDefault()\n\t\t\tapplyToAll(evt, False)\n\t\t\treturn(False)\n\n\t\tforceCollapse = document.getElementById(forceCollapseId)\n\t\tforceCollapse.onclick = collapseAll\n\n\t\tforceExpand = document.getElementById(forceExpandId)\n\t\tforceExpand.onclick = expandAll\n",
		"class A:\n    p = 1234\n    def getX (self):\n        return self._x\n\n    def setX (self, value):\n        self._x = value\n            \n    def getY (self):\n        return self._y\n\n    def setY (self, value):\n        self._y = 1000 + value  # Weird but should be possible\n        \n    def getY2 (self):\n        return self._y\n\n    def setY2 (self, value):\n        self._y = value\n        \n    def getT    (self):\n        return self._t\n\n    def setT (self, value):\n        self._t = value\n        \n    def getU (self):\n        return self._u + 10000\n\n    def setU (self, value):\n        self._u = value - 5000\n            \n    x, y, y2 = property (getX, setX), property (getY, setY), property (getY2, setY2)\n    t = property (getT, setT)\n    u = property (getU, setU)\n    \nA.q = 5678\n\nclass B:\n    def getZ (self):\n        return self.z_\n    \n    def setZ (self, value):\n        self.z_ = value\n        \n    z = property (getZ, setZ)\n    \nclass C:\n    def __init__ (self):\n        self.offset = 1234\n\n    def getW (self):\n        return self.w_ + self.offset\n        \n    def setW (self, value):\n        self.w_ = value - self.offset\n        \n    w = property (getW, setW)\n    \ndef run (autoTester):\n    a1 = A ()\n    a2 = A ()\n\n    a1.y2 = 1000\n    a2.y2 = 2000\n    \n    a1.x = 5\n    a1.y = 6\n    \n    a2.x = 7\n    a2.y = 8\n\n    a1.t = 77\n    a1.u = 88\n        \n    autoTester.check (a1.x, a1.y, a1.y2)\n    autoTester.check (a2.x, a2.y, a2.y2)\n    autoTester.check (a1.p, a2.p, a1.q, a2.q)\n    \n    autoTester.check (a1.t, a1.u)\n    \n    b = B ()\n    c = C ()\n    \n    b.z = 100100\n    c.z = 200200\n    c.w = 300300\n    \n    autoTester.check (a1.x, b.z, c.z, c.w)\n    \n    c.w = 400400\n    c.z = 500500\n    b.z = 600600\n    \n    autoTester.check (a1.x, b.z, c.z, c.w)\n",
		"\ndef run(test):\n    \"\"\" Test the repr and string implementations\n    \"\"\"\n\n    v = 1\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = \"asdf\"\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = True\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = False\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = 1.2\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = -31.2\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = 63e-12\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = 24e37\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = -34e-23\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = -89e32\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = None\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = [None]\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = [None, None]\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = [None, 1.02]\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = [1,3.000234]\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = [1,2,3]\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = [1.04, 2.03, 3.005]\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = [\"asdf\", 2.00009, \"1234\"]\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = set([1,2,3])\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = set([])\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = (1,2)\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = (3.4, 4.4)\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = (None, 5.32)\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = {}\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = { \"a\": 1 }\n    test.check( repr(v) )\n    test.check( str(v) )\n\n    # @note - in python the dictionary key\n    #     ordering if not specified. So the following tests\n    #     cannot be reliably completed when there are more than\n    #     one key in a dict - so I've skipped this test coverage.\n\n    d = { \"asdf\": 3.4 }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"qwer\": \"qwerqwer qwerqwer\" }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"a9342\" : None }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"nfdns\" : True }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"alel;e;\" : False }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"didi\" : [True,False,True] }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"bibi\" : [1,2,3] }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"gigi\" : [\"Asdf\",\"qwer\",\"rewer\"] }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"hihi\" : (\"esdf\",\"qwer\",\"rewer\") }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"jiji\" : [None, None, None] }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"jiji\" : (1.3, 3.4) }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n\n    d = { \"jiji\" : { \"c\" : 4 } }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n\n    class Test1(object):\n        def __init__(self, val):\n            self._val = val\n\n        def __str__(self):\n            return(\"[Test1 {}]\".format(self._val))\n\n        def __repr__(self):\n            return(str(self))\n\n    class Test2(object):\n        def __init__(self, val):\n            self._val = val\n\n        def __repr__(self):\n            return(\"[Test2 {},{}]\".format(self._val, self._val*2))\n\n        def __str__(self):\n            return( repr(self) )\n\n    class Test3(Test2):\n        def __str__(self):\n            return(\"[Test3 {}]\".format(self._val))\n\n    class Test4(object):\n        def __init__(self, val):\n            self._val = val\n\n        def __repr__(self):\n            return(\"[Test4 {}]\".format(self._val))\n\n\n    t1 = Test1(2)\n    test.check( repr(t1) )\n    test.check( str(t1) )\n    t1 = Test1(4.5)\n    test.check( repr(t1) )\n    test.check( str(t1) )\n    t1 = Test1(\"blarg\")\n    test.check( repr(t1) )\n    test.check( str(t1) )\n    t1 = Test1([1,2,3])\n    test.check( repr(t1) )\n    test.check( str(t1) )\n\n    t2 = Test2(3)\n    test.check( repr(t2) )\n    test.check( str(t2) )\n    t2 = Test2(7.6)\n    test.check( repr(t2) )\n    test.check( str(t2) )\n    t2 = Test2(-8.9)\n    test.check( repr(t2) )\n    test.check( str(t2) )\n\n    t3 = Test3(8)\n    test.check( repr(t3) )\n    test.check( str(t3) )\n\n    t3 = Test3(3.4)\n    test.check( repr(t3) )\n    test.check( str(t3) )\n\n    test.check( repr( [t1,t2,3] ) )\n\n    d = { \"irew\" : t1 }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"irew\" : [t1,t2,t3] }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n\n    t4 = Test4(\"qwer\")\n    test.check( repr(t4) )\n    test.check( str(t4) )\n",
		"def run (autoTester):\n    even = {2 * i for i in [0, 9, 1, 7, 2, 8, 3, 6, 4, 5]}\n    autoTester.check (even)\n    \n    odd = {2 * i + 1 for i in [5, 6, 7, 8, 9, 4, 3, 1, 2, 0]}\n    autoTester.check (odd)\n    \n    even.add (12)\n    even.add (12)\n    autoTester.check (even)\n    \n    even.discard (12)\n    even.discard (12)\n    autoTester.check (even)\n    \n    uni = even.union (odd)\n    autoTester.check (uni)\n    \n    autoTester.check (odd.isdisjoint (even))\n    autoTester.check (uni.isdisjoint (even))\n        \n    autoTester.check (even.issuperset (uni))\n    autoTester.check (uni.issuperset (even))\n    \n    autoTester.check (even.issubset (uni))\n    autoTester.check (uni.issubset (even))\n    \n    first = {4, 1, 0, 5, 3, 2, 6}\n    autoTester.check (first)\n    \n    second = {3, 5, 6, 9, 4, 7, 8}\n    autoTester.check (second)\n    \n    inter = first.intersection (second)\n    autoTester.check (inter)\n    \n    diff = first.difference (second)\n    autoTester.check (diff)\n    \n    symDiff = first.symmetric_difference (second)\n    autoTester.check (symDiff)\n    \n    aSet = {200, 4, 5, 100}\n    aSet.update (first, symDiff, second)\n    autoTester.check (aSet)\n    ",
		"class A:\n    def __init__ (self):\n        self.i = 0\n        \n    def f (self):\n        return self.i\n\na = A ()\n        \ndef run (autoTester):\n    x = 3\n    y = 5\n    z = x + y\n    autoTester.check (z)\n    \n    l = [1, 2, 3]\n    l [1] = l [2]\n    autoTester.check (l)\n    \n    # Should generate x++\n    x += 1\n    autoTester.check (x)\n    x += +1\n    autoTester.check (x)\n    x -= -1\n    autoTester.check (x)\n    \n    # Should generate y--\n    y -= 1\n    autoTester.check (y)\n    y -= +1\n    autoTester.check (y)\n    y += -1\n    autoTester.check (y)\n    \n    x += -3\n    autoTester.check (x)\n    \n    x += 6\n    autoTester.check (x)\n    \n    y -= 3\n    autoTester.check (y)\n    \n    l [1] += l [1]\n    autoTester.check (l)\n    \n    x += y\n    y += x\n    \n    autoTester.check (x, y)\n    \n    f = a.f\n    \n    a.i += 1\n    autoTester.check (f ())\n    \n    a.i += 10\n    autoTester.check (f ())\n    \n    a.i += a.i\n    autoTester.check (f ())\n",
		"from org.transcrypt.stubs.browser import __pragma__\n\n__pragma__ ('tconv')\n\ndef run (autoTester):\n    autoTester.check (len ({1:2}))\n\n    autoTester.check ('Select nonemtpy container, if any<br>')\n\n    autoTester.check ((0) or (1, 2, 3))\n    autoTester.check (() or (1, 2, 3))\n    autoTester.check (() or ())\n    \n    autoTester.check ((-1) or (0) or (1, 2, 3))\n    autoTester.check (() or (0) or (1, 2, 3))\n    autoTester.check (() or () or (1, 2, 3))\n    autoTester.check (() or () or ())\n    \n    autoTester.check ([0] or [1, 2, 3])\n    autoTester.check ([] or [1, 2, 3])\n    autoTester.check ([] or [])\n    \n    autoTester.check ([-1] or [0] or [1, 2, 3])\n    autoTester.check ([] or [0] or [1, 2, 3])\n    autoTester.check ([] or [] or [1, 2, 3])\n    autoTester.check ([] or [] or [])\n    \n    autoTester.check ({0} or {1, 2, 3, 4})\n    autoTester.check (set () or {1, 2, 3, 4})\n    autoTester.check (set () or set ())\n    \n    autoTester.check ({-1} or {0} or {1, 2, 3, 5})\n    autoTester.check (set () or {0} or {1, 2, 3, 6})\n    autoTester.check (set () or set () or {1, 2, 3, 7})\n    autoTester.check (set () or set () or set ())\n    \n    autoTester.check ({0:10} or {1:11, 2:12, 3:13})\n    autoTester.check ({} or {1, 2, 3, 8})\n    autoTester.check ({} or {})\n    \n    autoTester.check ({-1:-11} or {0:10} or {1:11, 2:12, 3:13})\n    autoTester.check ({} or {0:10} or {1:11, 2:12, 3:13})\n    autoTester.check ({} or {} or {1:11, 2:12, 3:13})\n    autoTester.check ({} or {} or {})\n    \n    autoTester.check ('<br><br>')\n    autoTester.check ('Boolean evaluations')\n    for expression in (\n        '<br> -- falsy -- <br>',\n        (),\n        [],\n        set (),\n        {},\n        0,\n        '',\n        3 > 5,\n        False,\n        '<br> -- truthy -- <br>',\n        (1, 2, 3),\n        [1, 2, 3],\n        {1, 2, 3},\n        {'a': 1, 'b': 2, 'c': 3},\n        3,\n        'hello',\n        5 > 3,\n        True\n    ):\n        if expression in ('<br> -- falsy -- <br>', '<br> -- truthy -- <br>'):\n            autoTester.check (expression)\n        else:\n            autoTester.check (expression, ' . . . ')\n            autoTester.check ('operators')\n            autoTester.check (not not expression)\n            autoTester.check (not not (True and expression))\n            autoTester.check (not not (False or expression))\n            autoTester.check (not not (expression and True))\n            autoTester.check (not not (expression and False))\n            \n            autoTester.check ('if')\n            if expression:\n                autoTester.check (True)\n            else:\n                autoTester.check (False)\n                \n            if expression or expression:\n                autoTester.check (True)\n            else:\n                autoTester.check (False)\n                \n            if False:\n                autoTester.check ('if')\n            elif expression:\n                autoTester.check ('elif')\n            else:\n                autoTester.check ('else')\n                \n            autoTester.check ('while')\n            while expression:\n                autoTester.check (True)\n                break\n                \n            autoTester.check ('condex')\n            autoTester.check (True if expression else False)\n            \n    if (0.0):\n        autoTester.check ('0.0')\n    elif (0.1):\n        autoTester.check ('0.1')\n    else:\n        autoTester.check ('Shouldn\\'t be here...')\n        \n    class A:\n        pass\n        \n    autoTester.check (not not A ())\n    ",
		"def run (autoTester):\n    ((a, b), santa, [c, d], e) = ((1, 2), 'santa-claus', {3, 4}, 5)\n    autoTester.check (a, b, c, d, e, santa)\n    \n    for i, x in enumerate ((0.5, 1.5, 2.5, 3.5)):\n        autoTester.check (i, x)\n    \n    e, pi = 3.14, 2.74\n    e, pi = pi, e\n    autoTester.check (e, pi)\n    \n    def f ():\n        return [(i, 2 * i) for i in range (7000, 10000, 1000)]\n        \n    def g ():\n        return f\n        \n    [k, l], [m, n], (o, p) = g () ()\n    \n    autoTester.check (k, l, m, n, o, p)\n",
		"from org.transcrypt.stubs.browser import __pragma__\nimport org.transcrypt.autotester\n\nimport arguments\nimport attribs_by_name\nimport callable_test\nimport classes\nimport complex_numbers\nimport conditional_expressions\nimport control_structures\n\n__pragma__ ('ifdef', '__py3.6__')   # Needed because Transcrypt imports are compile time\nif '__py3.6__' in __symbols__:      # Needed because CPython doesn't understand pragma's\n    import dashed_numbers\n__pragma__ ('endif')\n\nimport data_structures\nimport decorators\nimport dict_comprehensions\nimport dictionaries\nimport div_issues\nimport div_pulls\nimport docstrings\nimport exceptions\nimport extended_slices\n\n__pragma__ ('ifdef', '__py3.6__')   # Needed because Transcrypt imports are compile time\nif '__py3.6__' in __symbols__:      # Needed because CPython doesn't understand pragma's\n    import fstrings\n__pragma__ ('endif')\n\nimport general_functions\nimport indices_and_slices\n\n__pragma__ ('ifdef', '__esv6__')\nif '__esv6__' in __symbols__:\n    import iterators_and_generators\n__pragma__ ('endif')\n\nimport lambda_functions\nimport list_comprehensions\nimport local_classes\nimport metaclasses\nimport module_builtin\nimport module_cmath\n\n__pragma__ ('ifdef', '__esv6__')\nif '__esv6__' in __symbols__:\n    import module_itertools\n__pragma__ ('endif')\n\nimport module_math\nimport modules\nimport nonlocals\nimport operator_overloading\nimport properties\nimport reprtest\n\n__pragma__ ('ifdef', '__esv6__')\nif '__esv6__' in __symbols__:\n    import proxies\n__pragma__ ('endif')\n\nimport set_comprehensions\nimport simple_and_augmented_assignment\nimport truthyness\nimport tuple_assignment\n\nautoTester = org.transcrypt.autotester.AutoTester ()\n\nautoTester.run (arguments, 'arguments')\nautoTester.run (attribs_by_name, 'attribs_by_name')\nautoTester.run (callable_test, \"callable\")\nautoTester.run (classes, 'classes')\nautoTester.run (complex_numbers, 'complex_numbers')\nautoTester.run (conditional_expressions, 'conditional_expressions')\nautoTester.run (control_structures, 'control_structures')\n\n__pragma__ ('ifdef', '__py3.6__')\nif '__py3.6__' in __symbols__:\n    autoTester.run (dashed_numbers, 'dashed_numbers')\n__pragma__ ('endif')\n\nautoTester.run (data_structures, 'data_structures')\nautoTester.run (decorators, 'decorators')\nautoTester.run (dict_comprehensions, 'dict_comprehensions')\nautoTester.run (dictionaries, 'dictionaries')\nautoTester.run (div_issues, 'div_issues')\nautoTester.run (div_pulls, 'div_pulls')\nautoTester.run (docstrings, 'docstrings')\nautoTester.run (exceptions, 'exceptions')\nautoTester.run (extended_slices, 'extended_slices')\n\n__pragma__ ('ifdef', '__py3.6__')\nif '__py3.6__' in __symbols__:\n    autoTester.run (fstrings, 'fstrings')\n__pragma__ ('endif')\n\nautoTester.run (general_functions, 'general_functions')\nautoTester.run (indices_and_slices, 'indices_and_slices')\n\n__pragma__ ('ifdef', '__esv6__')\nif '__esv6__' in __symbols__:\n    autoTester.run (iterators_and_generators, 'iterators_and_generators')\n__pragma__ ('endif')\n    \nautoTester.run (lambda_functions, 'lambda_functions')\nautoTester.run (list_comprehensions, 'list_comprehensions')\nautoTester.run (local_classes, 'local_classes')\nautoTester.run (metaclasses, 'metaclasses')\nautoTester.run (module_builtin, 'module_builtin')\nautoTester.run (module_cmath, 'module_cmath')\n\n__pragma__ ('ifdef', '__esv6__')\nif '__esv6__' in __symbols__:\n    autoTester.run (module_itertools, 'module_itertools')\n__pragma__ ('endif')\n    \nautoTester.run (module_math, 'module_math')\nautoTester.run (modules, 'modules')\nautoTester.run (nonlocals, 'nonlocals')\nautoTester.run (operator_overloading, 'operator_overloading')\nautoTester.run (properties, 'properties')\nautoTester.run (reprtest, 'repr_str')\n\n__pragma__ ('ifdef', '__esv6__')\nif '__esv6__' in __symbols__:\n    autoTester.run (proxies, 'proxies')\n__pragma__ ('endif')\n\nautoTester.run (set_comprehensions, 'set_comprehensions')\nautoTester.run (simple_and_augmented_assignment, 'simple_and_augmented_assignment')\nautoTester.run (truthyness, 'truthyness')\nautoTester.run (tuple_assignment, 'tuple_assignemt')\n\nautoTester.done ()\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChltrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC5FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAPA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC/FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAIA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AAIA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAIA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACtEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACtxiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AAIA;AAAA;AAEA;AAIA;AAIA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACrxKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACjFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACptvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAIA;AAEA;AACA;AAAA;AAIA;AAAA;AAAA;AAEA;AAAA;AAIA;AAAA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACzDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAuCA;AAGA;AAeA;AACA;AAAA;AAAA;AAWA;AAAA;AAIA;AACA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACttDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuDA;AAvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACvbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAMA;AAMA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC/HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgUA;AAvTA;AAAA;AAAA;AAQA;AAEA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAMA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAcA;AAIA;AAMA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAEA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAQA;AACA;AAAA;AAGA;AAIA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAMA;AAAA;AAGA;AAUA;AACA;AASA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AChUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAAA;AAAA;AAAA;AAOA;AAAA;AAEA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAMA;AACA;AAyCA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAMA;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAMA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAIA;AAAA;AAGA;AAIA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAIA;AAGA;AACA;AAEA;AAAA;AAEA;AAGA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAKA;AAGA;AAGA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC9XA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC9FA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACtMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AAAA;AAEA;AAAA;AAIA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGA;AAAA;AAGA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAKA;AAEA;AAAA;AAGA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAAA;AAcA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AClHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACnBA;AAuIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}