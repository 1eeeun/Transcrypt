{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/general_functions/__javascript__/general_functions.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/general_functions/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__\n\nclass A:\n\tfoo='bar'\n\tdef __init__ (self):\n\t\tself.foo2 = 'bar2'\n\nclass B (A):\n\tfoo3='bar3'\n\tdef __init__ (self):\n\t\tself.foo4 = 'bar4'\n\t\t\ndef run (autoTester):\n\tautoTester.check ('sort and sorted<br>')\n\ta = [1, 5, 3, 2, -1]\n\tb = ['sun', 'earth', 'moon']\n\t\n\tautoTester.check (sorted (a))\n\tautoTester.check (sorted (b))\n\t\n\ta.sort ()\n\tautoTester.check (a)\n\t\n\tb.sort ()\n\tautoTester.check (b)\n\n\tautoTester.check (sorted (a, reverse = True))\n\tautoTester.check (sorted (b, reverse = True))\n\t\n\ta.sort (reverse = True)\n\tautoTester.check (a)\n\t\n\tb.sort (reverse = True)\n\tautoTester.check (b)\n\t\n\tb.sort (key = lambda x: len (x)) \n\tautoTester.check (b)\n\n\tb.sort (key = lambda x: len (x), reverse = True) \n\tautoTester.check (b)\n\n\tautoTester.check ('<br><br>dir<br>')\n\tautoTester.check ([entry for entry in dir (A) if not entry.startswith ('__')])\n\tautoTester.check ([entry for entry in dir (A()) if not entry.startswith ('__')])\n\tautoTester.check ([entry for entry in dir (B) if not entry.startswith ('__')])\n\tautoTester.check ([entry for entry in dir (B()) if not entry.startswith ('__')])\n\n\tautoTester.check ('<br><br>any, all, sum<br>')\n\tlist1 = ['ape', 'node', 'mice']\n\tlist2 = ['vim', '', 'jet']\n\tlist3 = ['', '', '']\n\tlist4 = [[1, 2], [1], []]\t# Truthyness into play\n\tautoTester.check (list1, any (list1), all (list1))\n\tautoTester.check (list2, any (list2), all (list2))\n\tautoTester.check (list3, any (list3), all (list3))\n\tautoTester.check (list4, any (list4), all (list4))\n\t\n\tautoTester.check (sum (range (5)))\n\t\n\t__pragma__ ('ifdef', 'e6')\n\tif 'e6' in autoTester.symbols:\t\n\t\tdef generator1 ():\n\t\t\tfor i in range (5):\n\t\t\t\tyield i;\n\t\t\t\t\n\t\tdef generator2 ():\n\t\t\tfor i in range (5):\n\t\t\t\tif i % 2:\n\t\t\t\t\tyield 0\n\t\t\t\telse:\n\t\t\t\t\tyield i;\n\t\t\t\t\t\n\t\tdef generator3 ():\n\t\t\tfor i in range (5):\n\t\t\t\tyield 0;\n\t\t\t\t\n\t\tautoTester.check (generator1 (), any (generator1 ()), all (generator1 ()))\n\t\tautoTester.check (generator2 (), any (generator2 ()), all (generator2 ()))\n\t\tautoTester.check (generator3 (), any (generator3 ()), all (generator3 ()))\n\t\t\n\t\tautoTester.check (sum (generator1 ()))\n\t__pragma__ ('endif')\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAFA;AAIA;AAEA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}