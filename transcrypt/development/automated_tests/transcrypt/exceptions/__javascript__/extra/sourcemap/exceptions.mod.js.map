{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/exceptions/__javascript__/exceptions.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/exceptions/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __envir__, __new__, __pragma__\n\nclass Ex1 (Exception):\n\tpass\n\t\t\nclass Ex2 (Ex1):\n\tpass\n\t\nclass Ex3 (Exception):\n\tpass\n\t\nif __envir__.executor_name == 'python':\n\tclass Table (BaseException):\n\t\tdef __init__ (self, *args):\n\t\t\tself.fields = args\n\t\t\t\n\t\tdef __repr__ (self):\n\t\t\treturn 'Table' + repr (self.fields) .replace (', ', ',') .replace ('\\'', '')\nelse:\n\t__pragma__ ('js', '{}', '''\n\t\tfunction _Table () {\n\t\t\tthis.fields = [] .slice.apply (arguments);\n\t\t}\n\t\t\n\t\t_Table.prototype.__str__ = function () {\n\t\t\treturn ('Table(' + this.fields.toString () + ')');\n\t\t};\n\t''')\n\tTable = _Table\n\ndef test1 ():\n\traise (Exception ('mary'))\n\t\ndef test2 (autoTester):\n\ttry:\n\t\ttest1 ()\n\texcept Ex1 as exception:\n\t\tautoTester.check (111)\n\t\tautoTester.check (exception)\n\texcept Exception as exception:\n\t\tautoTester.check (222)\n\t\tautoTester.check (exception)\n\t\t\ndef run (autoTester):\n\ttest2 (autoTester)\n\t\n\ttry:\n\t\traise Ex2 ('had')\n\texcept Ex1 as exception:\n\t\tautoTester.check ('a')\n\texcept Exception as exception:\n\t\tautoTester.check ('little')\n\t\tautoTester.check (exception)\n\t\t\n\tautoTester.check (333)\n\t\t\n\ttry:\n\t\traise Ex1 ('lamb')\n\texcept Ex2 as exception:\n\t\tautoTester.check ('his')\n\t\tautoTester.check (exception)\n\texcept Ex1 as exception:\n\t\tautoTester.check ('fleece')\n\t\tautoTester.check (exception)\n\texcept Exception as exception:\n\t\tautoTester.check ('was')\n\t\tautoTester.check (exception)\n\tfinally:\n\t\tautoTester.check ('white')\n\t\t\n\tautoTester.check (444)\n\n\tdef test3 ():\n\t\traise Ex3 ('as')\n\t\t\n\tautoTester.check (555)\n\n\ttry:\n\t\ttest3 ()\n\texcept Ex1 as exception:\n\t\tautoTester.check ('snow')\n\t\tautoTester.check (exception)\n\texcept Exception as exception:\n\t\tautoTester.check ('and')\n\t\tautoTester.check (exception)\n\tfinally:\n\t\tautoTester.check ('everywhere')\n\t\t\n\tautoTester.check (666)\n\t\n\ttry:\n\t\traise Ex3 ('that')\n\texcept Ex1 as exception:\n\t\tautoTester.check ('mary')\n\t\tautoTester.check (exception)\n\texcept:\n\t\tautoTester.check ('went')\n\tfinally:\n\t\tautoTester.check ('the')\n\t\n\tautoTester.check (777)\n\t\n\ttry:\n\t\ttry:\n\t\t\traise Ex3 ('lamb')\n\t\texcept Ex1 as exception:\n\t\t\tautoTester.check ('was')\n\t\t\tautoTester.check (exception)\n\t\tfinally:\n\t\t\tautoTester.check ('to')\n\texcept Ex3 as exception:\t# We should get here, exception not swallowed\n\t\tautoTester.check ('go')\n\t\tautoTester.check (exception)\n\t\t\n\ttry:\n\t\traise __new__ (Table ('he', 'followed', 'her'))\n\texcept Ex1 as exception:\n\t\tautoTester.check ('to')\n\t\tautoTester.check (exception)\n\texcept Table as exception:\t# Pure JavaScript exception, if no Python __class__\n\t\tautoTester.check ('school')\n\t\tautoTester.check (exception)\n\texcept Ex3 as exception:\n\t\tautoTester.check ('one')\n\t\tautoTester.check (exception)\n\tfinally:\n\t\tautoTester.check ('day')\n\t\n\ttry:\n\t\tassert 2 * 8 / 4 == 2, 'Assert error 1'\n\texcept AssertionError as exception:\n\t\tautoTester.check (exception)\n\t\t\n\ttry:\n\t\tassert 2 * 8 / 4 == 4, 'Assert error 2'\n\texcept AssertionError as exception:\n\t\tautoTester.check (exception)\n\t\t\n\ttry:\n\t\tassert 2 * 8 / 4 == 2\n\texcept AssertionError as exception:\n\t\tautoTester.check (exception)\n\t\t\n\ttry:\n\t\tassert 2 * 8 / 4 == 4\n\texcept AssertionError as exception:\n\t\tautoTester.check (exception)\n\t\t\n\tautoTester.check (888)\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}