file: Module 
	body: list 
		element: Expr 
			value: Str 
				s: str = Concrete date/time and related types.

See http://www.iana.org/time-zones/repository/tz-link.html for
time zone and DST data sources.

		element: Import 
			names: list 
				element: alias 
					name: str = time
					asname: str = _time
		element: Import 
			names: list 
				element: alias 
					name: str = math
					asname: str = _math
		element: ImportFrom 
			module: str = org.transcrypt.stubs.browser
			names: list 
				element: alias 
					name: str = __envir__
					asname: NoneType = None
			level: int = 0
		element: If 
			test: Compare 
				left: Attribute 
					value: Name 
						id: str = __envir__
						ctx: Load 
					attr: str = executor_name
					ctx: Load 
				ops: list 
					element: Eq 
				comparators: list 
					element: Attribute 
						value: Name 
							id: str = __envir__
							ctx: Load 
						attr: str = transpiler_name
						ctx: Load 
			body: list 
				element: FunctionDef 
					name: str = divmod
					args: arguments 
						args: list 
							element: arg 
								arg: str = n
								annotation: NoneType = None
							element: arg 
								arg: str = d
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Tuple 
								elts: list 
									element: BinOp 
										left: Name 
											id: str = n
											ctx: Load 
										op: FloorDiv 
										right: Name 
											id: str = d
											ctx: Load 
									element: BinOp 
										left: Name 
											id: str = n
											ctx: Load 
										op: Mod 
										right: Name 
											id: str = d
											ctx: Load 
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = modf
					args: arguments 
						args: list 
							element: arg 
								arg: str = n
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = sign
									ctx: Store 
							value: IfExp 
								test: Compare 
									left: Name 
										id: str = n
										ctx: Load 
									ops: list 
										element: GtE 
									comparators: list 
										element: Num 
											n: int = 0
								body: Num 
									n: int = 1
								orelse: UnaryOp 
									op: USub 
									operand: Num 
										n: int = 1
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = f
											ctx: Store 
										element: Name 
											id: str = mod
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = divmod
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = abs
											ctx: Load 
										args: list 
											element: Name 
												id: str = n
												ctx: Load 
										keywords: list 
									element: Num 
										n: int = 1
								keywords: list 
						element: Return 
							value: Tuple 
								elts: list 
									element: BinOp 
										left: Name 
											id: str = mod
											ctx: Load 
										op: Mult 
										right: Name 
											id: str = sign
											ctx: Load 
									element: BinOp 
										left: Name 
											id: str = f
											ctx: Load 
										op: Mult 
										right: Name 
											id: str = sign
											ctx: Load 
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: Assign 
					targets: list 
						element: Attribute 
							value: Name 
								id: str = _math
								ctx: Load 
							attr: str = modf
							ctx: Store 
					value: Name 
						id: str = modf
						ctx: Load 
			orelse: list 
		element: FunctionDef 
			name: str = zfill
			args: arguments 
				args: list 
					element: arg 
						arg: str = s
						annotation: NoneType = None
					element: arg 
						arg: str = c
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = s
							ctx: Store 
					value: Call 
						func: Name 
							id: str = str
							ctx: Load 
						args: list 
							element: Name 
								id: str = s
								ctx: Load 
						keywords: list 
				element: If 
					test: Compare 
						left: Call 
							func: Name 
								id: str = len
								ctx: Load 
							args: list 
								element: Name 
									id: str = s
									ctx: Load 
							keywords: list 
						ops: list 
							element: Lt 
						comparators: list 
							element: Name 
								id: str = c
								ctx: Load 
					body: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = opov
								keywords: list 
						element: Return 
							value: BinOp 
								left: BinOp 
									left: Str 
										s: str = 0
									op: Mult 
									right: BinOp 
										left: Name 
											id: str = c
											ctx: Load 
										op: Sub 
										right: Call 
											func: Name 
												id: str = len
												ctx: Load 
											args: list 
												element: Name 
													id: str = s
													ctx: Load 
											keywords: list 
								op: Add 
								right: Name 
									id: str = s
									ctx: Load 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = noopov
								keywords: list 
					orelse: list 
						element: Return 
							value: Name 
								id: str = s
								ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = rjust
			args: arguments 
				args: list 
					element: arg 
						arg: str = s
						annotation: NoneType = None
					element: arg 
						arg: str = c
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = s
							ctx: Store 
					value: Call 
						func: Name 
							id: str = str
							ctx: Load 
						args: list 
							element: Name 
								id: str = s
								ctx: Load 
						keywords: list 
				element: If 
					test: Compare 
						left: Call 
							func: Name 
								id: str = len
								ctx: Load 
							args: list 
								element: Name 
									id: str = s
									ctx: Load 
							keywords: list 
						ops: list 
							element: Lt 
						comparators: list 
							element: Name 
								id: str = c
								ctx: Load 
					body: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = opov
								keywords: list 
						element: Return 
							value: BinOp 
								left: BinOp 
									left: Str 
										s: str =  
									op: Mult 
									right: BinOp 
										left: Name 
											id: str = c
											ctx: Load 
										op: Sub 
										right: Call 
											func: Name 
												id: str = len
												ctx: Load 
											args: list 
												element: Name 
													id: str = s
													ctx: Load 
											keywords: list 
								op: Add 
								right: Name 
									id: str = s
									ctx: Load 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = noopov
								keywords: list 
					orelse: list 
						element: Return 
							value: Name 
								id: str = s
								ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _cmp
			args: arguments 
				args: list 
					element: arg 
						arg: str = x
						annotation: NoneType = None
					element: arg 
						arg: str = y
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Return 
					value: IfExp 
						test: Compare 
							left: Name 
								id: str = x
								ctx: Load 
							ops: list 
								element: Eq 
							comparators: list 
								element: Name 
									id: str = y
									ctx: Load 
						body: Num 
							n: int = 0
						orelse: IfExp 
							test: Compare 
								left: Name 
									id: str = x
									ctx: Load 
								ops: list 
									element: Gt 
								comparators: list 
									element: Name 
										id: str = y
										ctx: Load 
							body: Num 
								n: int = 1
							orelse: UnaryOp 
								op: USub 
								operand: Num 
									n: int = 1
			decorator_list: list 
			returns: NoneType = None
		element: Assign 
			targets: list 
				element: Name 
					id: str = MINYEAR
					ctx: Store 
			value: Num 
				n: int = 1
		element: Assign 
			targets: list 
				element: Name 
					id: str = MAXYEAR
					ctx: Store 
			value: Num 
				n: int = 9999
		element: Assign 
			targets: list 
				element: Name 
					id: str = _MAXORDINAL
					ctx: Store 
			value: Num 
				n: int = 3652059
		element: Assign 
			targets: list 
				element: Name 
					id: str = _DAYS_IN_MONTH
					ctx: Store 
			value: List 
				elts: list 
					element: UnaryOp 
						op: USub 
						operand: Num 
							n: int = 1
					element: Num 
						n: int = 31
					element: Num 
						n: int = 28
					element: Num 
						n: int = 31
					element: Num 
						n: int = 30
					element: Num 
						n: int = 31
					element: Num 
						n: int = 30
					element: Num 
						n: int = 31
					element: Num 
						n: int = 31
					element: Num 
						n: int = 30
					element: Num 
						n: int = 31
					element: Num 
						n: int = 30
					element: Num 
						n: int = 31
				ctx: Load 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _DAYS_BEFORE_MONTH
					ctx: Store 
			value: List 
				elts: list 
					element: UnaryOp 
						op: USub 
						operand: Num 
							n: int = 1
				ctx: Load 
		element: Assign 
			targets: list 
				element: Name 
					id: str = dbm
					ctx: Store 
			value: Num 
				n: int = 0
		element: For 
			target: Name 
				id: str = dim
				ctx: Store 
			iter: Subscript 
				value: Name 
					id: str = _DAYS_IN_MONTH
					ctx: Load 
				slice: Slice 
					lower: Num 
						n: int = 1
					upper: NoneType = None
					step: NoneType = None
				ctx: Load 
			body: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = _DAYS_BEFORE_MONTH
								ctx: Load 
							attr: str = append
							ctx: Load 
						args: list 
							element: Name 
								id: str = dbm
								ctx: Load 
						keywords: list 
				element: AugAssign 
					target: Name 
						id: str = dbm
						ctx: Store 
					op: Add 
					value: Name 
						id: str = dim
						ctx: Load 
			orelse: list 
		element: Delete 
			targets: list 
				element: Name 
					id: str = dbm
					ctx: Del 
				element: Name 
					id: str = dim
					ctx: Del 
		element: FunctionDef 
			name: str = _is_leap
			args: arguments 
				args: list 
					element: arg 
						arg: str = year
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = year -> 1 if leap year, else 0.
				element: Return 
					value: BoolOp 
						op: And 
						values: list 
							element: Compare 
								left: BinOp 
									left: Name 
										id: str = year
										ctx: Load 
									op: Mod 
									right: Num 
										n: int = 4
								ops: list 
									element: Eq 
								comparators: list 
									element: Num 
										n: int = 0
							element: BoolOp 
								op: Or 
								values: list 
									element: Compare 
										left: BinOp 
											left: Name 
												id: str = year
												ctx: Load 
											op: Mod 
											right: Num 
												n: int = 100
										ops: list 
											element: NotEq 
										comparators: list 
											element: Num 
												n: int = 0
									element: Compare 
										left: BinOp 
											left: Name 
												id: str = year
												ctx: Load 
											op: Mod 
											right: Num 
												n: int = 400
										ops: list 
											element: Eq 
										comparators: list 
											element: Num 
												n: int = 0
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _days_before_year
			args: arguments 
				args: list 
					element: arg 
						arg: str = year
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = year -> number of days before January 1st of year.
				element: Assign 
					targets: list 
						element: Name 
							id: str = y
							ctx: Store 
					value: BinOp 
						left: Name 
							id: str = year
							ctx: Load 
						op: Sub 
						right: Num 
							n: int = 1
				element: Return 
					value: BinOp 
						left: BinOp 
							left: BinOp 
								left: BinOp 
									left: Name 
										id: str = y
										ctx: Load 
									op: Mult 
									right: Num 
										n: int = 365
								op: Add 
								right: BinOp 
									left: Name 
										id: str = y
										ctx: Load 
									op: FloorDiv 
									right: Num 
										n: int = 4
							op: Sub 
							right: BinOp 
								left: Name 
									id: str = y
									ctx: Load 
								op: FloorDiv 
								right: Num 
									n: int = 100
						op: Add 
						right: BinOp 
							left: Name 
								id: str = y
								ctx: Load 
							op: FloorDiv 
							right: Num 
								n: int = 400
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _days_in_month
			args: arguments 
				args: list 
					element: arg 
						arg: str = year
						annotation: NoneType = None
					element: arg 
						arg: str = month
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = year, month -> number of days in that month in that year.
				element: Assert 
					test: Compare 
						left: Num 
							n: int = 1
						ops: list 
							element: LtE 
							element: LtE 
						comparators: list 
							element: Name 
								id: str = month
								ctx: Load 
							element: Num 
								n: int = 12
					msg: Name 
						id: str = month
						ctx: Load 
				element: If 
					test: BoolOp 
						op: And 
						values: list 
							element: Compare 
								left: Name 
									id: str = month
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Num 
										n: int = 2
							element: Call 
								func: Name 
									id: str = _is_leap
									ctx: Load 
								args: list 
									element: Name 
										id: str = year
										ctx: Load 
								keywords: list 
					body: list 
						element: Return 
							value: Num 
								n: int = 29
					orelse: list 
				element: Return 
					value: Subscript 
						value: Name 
							id: str = _DAYS_IN_MONTH
							ctx: Load 
						slice: Index 
							value: Name 
								id: str = month
								ctx: Load 
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _days_before_month
			args: arguments 
				args: list 
					element: arg 
						arg: str = year
						annotation: NoneType = None
					element: arg 
						arg: str = month
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = year, month -> number of days in year preceding first day of month.
				element: Assert 
					test: Compare 
						left: Num 
							n: int = 1
						ops: list 
							element: LtE 
							element: LtE 
						comparators: list 
							element: Name 
								id: str = month
								ctx: Load 
							element: Num 
								n: int = 12
					msg: Str 
						s: str = month must be in 1..12
				element: Return 
					value: BinOp 
						left: Subscript 
							value: Name 
								id: str = _DAYS_BEFORE_MONTH
								ctx: Load 
							slice: Index 
								value: Name 
									id: str = month
									ctx: Load 
							ctx: Load 
						op: Add 
						right: BoolOp 
							op: And 
							values: list 
								element: Compare 
									left: Name 
										id: str = month
										ctx: Load 
									ops: list 
										element: Gt 
									comparators: list 
										element: Num 
											n: int = 2
								element: Call 
									func: Name 
										id: str = _is_leap
										ctx: Load 
									args: list 
										element: Name 
											id: str = year
											ctx: Load 
									keywords: list 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _ymd2ord
			args: arguments 
				args: list 
					element: arg 
						arg: str = year
						annotation: NoneType = None
					element: arg 
						arg: str = month
						annotation: NoneType = None
					element: arg 
						arg: str = day
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = year, month, day -> ordinal, considering 01-Jan-0001 as day 1.
				element: Assert 
					test: Compare 
						left: Num 
							n: int = 1
						ops: list 
							element: LtE 
							element: LtE 
						comparators: list 
							element: Name 
								id: str = month
								ctx: Load 
							element: Num 
								n: int = 12
					msg: Str 
						s: str = month must be in 1..12
				element: Assign 
					targets: list 
						element: Name 
							id: str = dim
							ctx: Store 
					value: Call 
						func: Name 
							id: str = _days_in_month
							ctx: Load 
						args: list 
							element: Name 
								id: str = year
								ctx: Load 
							element: Name 
								id: str = month
								ctx: Load 
						keywords: list 
				element: Assert 
					test: Compare 
						left: Num 
							n: int = 1
						ops: list 
							element: LtE 
							element: LtE 
						comparators: list 
							element: Name 
								id: str = day
								ctx: Load 
							element: Name 
								id: str = dim
								ctx: Load 
					msg: BinOp 
						left: Str 
							s: str = day must be in 1..%d
						op: Mod 
						right: Name 
							id: str = dim
							ctx: Load 
				element: Return 
					value: BinOp 
						left: BinOp 
							left: Call 
								func: Name 
									id: str = _days_before_year
									ctx: Load 
								args: list 
									element: Name 
										id: str = year
										ctx: Load 
								keywords: list 
							op: Add 
							right: Call 
								func: Name 
									id: str = _days_before_month
									ctx: Load 
								args: list 
									element: Name 
										id: str = year
										ctx: Load 
									element: Name 
										id: str = month
										ctx: Load 
								keywords: list 
						op: Add 
						right: Name 
							id: str = day
							ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: Assign 
			targets: list 
				element: Name 
					id: str = _DI400Y
					ctx: Store 
			value: Call 
				func: Name 
					id: str = _days_before_year
					ctx: Load 
				args: list 
					element: Num 
						n: int = 401
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _DI100Y
					ctx: Store 
			value: Call 
				func: Name 
					id: str = _days_before_year
					ctx: Load 
				args: list 
					element: Num 
						n: int = 101
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _DI4Y
					ctx: Store 
			value: Call 
				func: Name 
					id: str = _days_before_year
					ctx: Load 
				args: list 
					element: Num 
						n: int = 5
				keywords: list 
		element: Assert 
			test: Compare 
				left: Name 
					id: str = _DI4Y
					ctx: Load 
				ops: list 
					element: Eq 
				comparators: list 
					element: BinOp 
						left: BinOp 
							left: Num 
								n: int = 4
							op: Mult 
							right: Num 
								n: int = 365
						op: Add 
						right: Num 
							n: int = 1
			msg: NoneType = None
		element: Assert 
			test: Compare 
				left: Name 
					id: str = _DI400Y
					ctx: Load 
				ops: list 
					element: Eq 
				comparators: list 
					element: BinOp 
						left: BinOp 
							left: Num 
								n: int = 4
							op: Mult 
							right: Name 
								id: str = _DI100Y
								ctx: Load 
						op: Add 
						right: Num 
							n: int = 1
			msg: NoneType = None
		element: Assert 
			test: Compare 
				left: Name 
					id: str = _DI100Y
					ctx: Load 
				ops: list 
					element: Eq 
				comparators: list 
					element: BinOp 
						left: BinOp 
							left: Num 
								n: int = 25
							op: Mult 
							right: Name 
								id: str = _DI4Y
								ctx: Load 
						op: Sub 
						right: Num 
							n: int = 1
			msg: NoneType = None
		element: FunctionDef 
			name: str = _ord2ymd
			args: arguments 
				args: list 
					element: arg 
						arg: str = n
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = ordinal -> (year, month, day), considering 01-Jan-0001 as day 1.
				element: AugAssign 
					target: Name 
						id: str = n
						ctx: Store 
					op: Sub 
					value: Num 
						n: int = 1
				element: Assign 
					targets: list 
						element: Tuple 
							elts: list 
								element: Name 
									id: str = n400
									ctx: Store 
								element: Name 
									id: str = n
									ctx: Store 
							ctx: Store 
					value: Call 
						func: Name 
							id: str = divmod
							ctx: Load 
						args: list 
							element: Name 
								id: str = n
								ctx: Load 
							element: Name 
								id: str = _DI400Y
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = year
							ctx: Store 
					value: BinOp 
						left: BinOp 
							left: Name 
								id: str = n400
								ctx: Load 
							op: Mult 
							right: Num 
								n: int = 400
						op: Add 
						right: Num 
							n: int = 1
				element: Assign 
					targets: list 
						element: Tuple 
							elts: list 
								element: Name 
									id: str = n100
									ctx: Store 
								element: Name 
									id: str = n
									ctx: Store 
							ctx: Store 
					value: Call 
						func: Name 
							id: str = divmod
							ctx: Load 
						args: list 
							element: Name 
								id: str = n
								ctx: Load 
							element: Name 
								id: str = _DI100Y
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Tuple 
							elts: list 
								element: Name 
									id: str = n4
									ctx: Store 
								element: Name 
									id: str = n
									ctx: Store 
							ctx: Store 
					value: Call 
						func: Name 
							id: str = divmod
							ctx: Load 
						args: list 
							element: Name 
								id: str = n
								ctx: Load 
							element: Name 
								id: str = _DI4Y
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Tuple 
							elts: list 
								element: Name 
									id: str = n1
									ctx: Store 
								element: Name 
									id: str = n
									ctx: Store 
							ctx: Store 
					value: Call 
						func: Name 
							id: str = divmod
							ctx: Load 
						args: list 
							element: Name 
								id: str = n
								ctx: Load 
							element: Num 
								n: int = 365
						keywords: list 
				element: AugAssign 
					target: Name 
						id: str = year
						ctx: Store 
					op: Add 
					value: BinOp 
						left: BinOp 
							left: BinOp 
								left: Name 
									id: str = n100
									ctx: Load 
								op: Mult 
								right: Num 
									n: int = 100
							op: Add 
							right: BinOp 
								left: Name 
									id: str = n4
									ctx: Load 
								op: Mult 
								right: Num 
									n: int = 4
						op: Add 
						right: Name 
							id: str = n1
							ctx: Load 
				element: If 
					test: BoolOp 
						op: Or 
						values: list 
							element: Compare 
								left: Name 
									id: str = n1
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Num 
										n: int = 4
							element: Compare 
								left: Name 
									id: str = n100
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Num 
										n: int = 4
					body: list 
						element: Assert 
							test: Compare 
								left: Name 
									id: str = n
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Num 
										n: int = 0
							msg: NoneType = None
						element: Return 
							value: Tuple 
								elts: list 
									element: BinOp 
										left: Name 
											id: str = year
											ctx: Load 
										op: Sub 
										right: Num 
											n: int = 1
									element: Num 
										n: int = 12
									element: Num 
										n: int = 31
								ctx: Load 
					orelse: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = leapyear
							ctx: Store 
					value: BoolOp 
						op: And 
						values: list 
							element: Compare 
								left: Name 
									id: str = n1
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Num 
										n: int = 3
							element: BoolOp 
								op: Or 
								values: list 
									element: Compare 
										left: Name 
											id: str = n4
											ctx: Load 
										ops: list 
											element: NotEq 
										comparators: list 
											element: Num 
												n: int = 24
									element: Compare 
										left: Name 
											id: str = n100
											ctx: Load 
										ops: list 
											element: Eq 
										comparators: list 
											element: Num 
												n: int = 3
				element: Assert 
					test: Compare 
						left: Name 
							id: str = leapyear
							ctx: Load 
						ops: list 
							element: Eq 
						comparators: list 
							element: Call 
								func: Name 
									id: str = _is_leap
									ctx: Load 
								args: list 
									element: Name 
										id: str = year
										ctx: Load 
								keywords: list 
					msg: NoneType = None
				element: Assign 
					targets: list 
						element: Name 
							id: str = month
							ctx: Store 
					value: BinOp 
						left: BinOp 
							left: Name 
								id: str = n
								ctx: Load 
							op: Add 
							right: Num 
								n: int = 50
						op: RShift 
						right: Num 
							n: int = 5
				element: Assign 
					targets: list 
						element: Name 
							id: str = preceding
							ctx: Store 
					value: BinOp 
						left: Subscript 
							value: Name 
								id: str = _DAYS_BEFORE_MONTH
								ctx: Load 
							slice: Index 
								value: Name 
									id: str = month
									ctx: Load 
							ctx: Load 
						op: Add 
						right: BoolOp 
							op: And 
							values: list 
								element: Compare 
									left: Name 
										id: str = month
										ctx: Load 
									ops: list 
										element: Gt 
									comparators: list 
										element: Num 
											n: int = 2
								element: Name 
									id: str = leapyear
									ctx: Load 
				element: If 
					test: Compare 
						left: Name 
							id: str = preceding
							ctx: Load 
						ops: list 
							element: Gt 
						comparators: list 
							element: Name 
								id: str = n
								ctx: Load 
					body: list 
						element: AugAssign 
							target: Name 
								id: str = month
								ctx: Store 
							op: Sub 
							value: Num 
								n: int = 1
						element: AugAssign 
							target: Name 
								id: str = preceding
								ctx: Store 
							op: Sub 
							value: BinOp 
								left: Subscript 
									value: Name 
										id: str = _DAYS_IN_MONTH
										ctx: Load 
									slice: Index 
										value: Name 
											id: str = month
											ctx: Load 
									ctx: Load 
								op: Add 
								right: BoolOp 
									op: And 
									values: list 
										element: Compare 
											left: Name 
												id: str = month
												ctx: Load 
											ops: list 
												element: Eq 
											comparators: list 
												element: Num 
													n: int = 2
										element: Name 
											id: str = leapyear
											ctx: Load 
					orelse: list 
				element: AugAssign 
					target: Name 
						id: str = n
						ctx: Store 
					op: Sub 
					value: Name 
						id: str = preceding
						ctx: Load 
				element: Assert 
					test: Compare 
						left: Num 
							n: int = 0
						ops: list 
							element: LtE 
							element: Lt 
						comparators: list 
							element: Name 
								id: str = n
								ctx: Load 
							element: Call 
								func: Name 
									id: str = _days_in_month
									ctx: Load 
								args: list 
									element: Name 
										id: str = year
										ctx: Load 
									element: Name 
										id: str = month
										ctx: Load 
								keywords: list 
					msg: NoneType = None
				element: Return 
					value: Tuple 
						elts: list 
							element: Name 
								id: str = year
								ctx: Load 
							element: Name 
								id: str = month
								ctx: Load 
							element: BinOp 
								left: Name 
									id: str = n
									ctx: Load 
								op: Add 
								right: Num 
									n: int = 1
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: Assign 
			targets: list 
				element: Name 
					id: str = _MONTHNAMES
					ctx: Store 
			value: List 
				elts: list 
					element: NameConstant 
						value: NoneType = None
					element: Str 
						s: str = Jan
					element: Str 
						s: str = Feb
					element: Str 
						s: str = Mar
					element: Str 
						s: str = Apr
					element: Str 
						s: str = May
					element: Str 
						s: str = Jun
					element: Str 
						s: str = Jul
					element: Str 
						s: str = Aug
					element: Str 
						s: str = Sep
					element: Str 
						s: str = Oct
					element: Str 
						s: str = Nov
					element: Str 
						s: str = Dec
				ctx: Load 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _DAYNAMES
					ctx: Store 
			value: List 
				elts: list 
					element: NameConstant 
						value: NoneType = None
					element: Str 
						s: str = Mon
					element: Str 
						s: str = Tue
					element: Str 
						s: str = Wed
					element: Str 
						s: str = Thu
					element: Str 
						s: str = Fri
					element: Str 
						s: str = Sat
					element: Str 
						s: str = Sun
				ctx: Load 
		element: FunctionDef 
			name: str = _build_struct_time
			args: arguments 
				args: list 
					element: arg 
						arg: str = y
						annotation: NoneType = None
					element: arg 
						arg: str = m
						annotation: NoneType = None
					element: arg 
						arg: str = d
						annotation: NoneType = None
					element: arg 
						arg: str = hh
						annotation: NoneType = None
					element: arg 
						arg: str = mm
						annotation: NoneType = None
					element: arg 
						arg: str = ss
						annotation: NoneType = None
					element: arg 
						arg: str = dstflag
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = wday
							ctx: Store 
					value: BinOp 
						left: BinOp 
							left: Call 
								func: Name 
									id: str = _ymd2ord
									ctx: Load 
								args: list 
									element: Name 
										id: str = y
										ctx: Load 
									element: Name 
										id: str = m
										ctx: Load 
									element: Name 
										id: str = d
										ctx: Load 
								keywords: list 
							op: Add 
							right: Num 
								n: int = 6
						op: Mod 
						right: Num 
							n: int = 7
				element: Assign 
					targets: list 
						element: Name 
							id: str = dnum
							ctx: Store 
					value: BinOp 
						left: Call 
							func: Name 
								id: str = _days_before_month
								ctx: Load 
							args: list 
								element: Name 
									id: str = y
									ctx: Load 
								element: Name 
									id: str = m
									ctx: Load 
							keywords: list 
						op: Add 
						right: Name 
							id: str = d
							ctx: Load 
				element: Return 
					value: Tuple 
						elts: list 
							element: Name 
								id: str = y
								ctx: Load 
							element: Name 
								id: str = m
								ctx: Load 
							element: Name 
								id: str = d
								ctx: Load 
							element: Name 
								id: str = hh
								ctx: Load 
							element: Name 
								id: str = mm
								ctx: Load 
							element: Name 
								id: str = ss
								ctx: Load 
							element: Name 
								id: str = wday
								ctx: Load 
							element: Name 
								id: str = dnum
								ctx: Load 
							element: Name 
								id: str = dstflag
								ctx: Load 
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _format_time
			args: arguments 
				args: list 
					element: arg 
						arg: str = hh
						annotation: NoneType = None
					element: arg 
						arg: str = mm
						annotation: NoneType = None
					element: arg 
						arg: str = ss
						annotation: NoneType = None
					element: arg 
						arg: str = us
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = result
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Str 
								s: str = {}:{}:{}
							attr: str = format
							ctx: Load 
						args: list 
							element: Call 
								func: Name 
									id: str = zfill
									ctx: Load 
								args: list 
									element: Name 
										id: str = hh
										ctx: Load 
									element: Num 
										n: int = 2
								keywords: list 
							element: Call 
								func: Name 
									id: str = zfill
									ctx: Load 
								args: list 
									element: Name 
										id: str = mm
										ctx: Load 
									element: Num 
										n: int = 2
								keywords: list 
							element: Call 
								func: Name 
									id: str = zfill
									ctx: Load 
								args: list 
									element: Name 
										id: str = ss
										ctx: Load 
									element: Num 
										n: int = 2
								keywords: list 
						keywords: list 
				element: If 
					test: Name 
						id: str = us
						ctx: Load 
					body: list 
						element: AugAssign 
							target: Name 
								id: str = result
								ctx: Store 
							op: Add 
							value: Call 
								func: Attribute 
									value: Str 
										s: str = .{}
									attr: str = format
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = zfill
											ctx: Load 
										args: list 
											element: Name 
												id: str = us
												ctx: Load 
											element: Num 
												n: int = 6
										keywords: list 
								keywords: list 
					orelse: list 
				element: Return 
					value: Name 
						id: str = result
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _wrap_strftime
			args: arguments 
				args: list 
					element: arg 
						arg: str = object
						annotation: NoneType = None
					element: arg 
						arg: str = format
						annotation: NoneType = None
					element: arg 
						arg: str = timetuple
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = freplace
							ctx: Store 
					value: NameConstant 
						value: NoneType = None
				element: Assign 
					targets: list 
						element: Name 
							id: str = zreplace
							ctx: Store 
					value: NameConstant 
						value: NoneType = None
				element: Assign 
					targets: list 
						element: Name 
							id: str = Zreplace
							ctx: Store 
					value: NameConstant 
						value: NoneType = None
				element: Assign 
					targets: list 
						element: Name 
							id: str = newformat
							ctx: Store 
					value: List 
						elts: list 
						ctx: Load 
				element: Assign 
					targets: list 
						element: Tuple 
							elts: list 
								element: Name 
									id: str = i
									ctx: Store 
								element: Name 
									id: str = n
									ctx: Store 
							ctx: Store 
					value: Tuple 
						elts: list 
							element: Num 
								n: int = 0
							element: Call 
								func: Name 
									id: str = len
									ctx: Load 
								args: list 
									element: Name 
										id: str = format
										ctx: Load 
								keywords: list 
						ctx: Load 
				element: While 
					test: Compare 
						left: Name 
							id: str = i
							ctx: Load 
						ops: list 
							element: Lt 
						comparators: list 
							element: Name 
								id: str = n
								ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = ch
									ctx: Store 
							value: Subscript 
								value: Name 
									id: str = format
									ctx: Load 
								slice: Index 
									value: Name 
										id: str = i
										ctx: Load 
								ctx: Load 
						element: AugAssign 
							target: Name 
								id: str = i
								ctx: Store 
							op: Add 
							value: Num 
								n: int = 1
						element: If 
							test: Compare 
								left: Name 
									id: str = ch
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Str 
										s: str = %
							body: list 
								element: If 
									test: Compare 
										left: Name 
											id: str = i
											ctx: Load 
										ops: list 
											element: Lt 
										comparators: list 
											element: Name 
												id: str = n
												ctx: Load 
									body: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = ch
													ctx: Store 
											value: Subscript 
												value: Name 
													id: str = format
													ctx: Load 
												slice: Index 
													value: Name 
														id: str = i
														ctx: Load 
												ctx: Load 
										element: AugAssign 
											target: Name 
												id: str = i
												ctx: Store 
											op: Add 
											value: Num 
												n: int = 1
										element: If 
											test: Compare 
												left: Name 
													id: str = ch
													ctx: Load 
												ops: list 
													element: Eq 
												comparators: list 
													element: Str 
														s: str = f
											body: list 
												element: If 
													test: Compare 
														left: Name 
															id: str = freplace
															ctx: Load 
														ops: list 
															element: Is 
														comparators: list 
															element: NameConstant 
																value: NoneType = None
													body: list 
														element: Assign 
															targets: list 
																element: Name 
																	id: str = freplace
																	ctx: Store 
															value: Call 
																func: Attribute 
																	value: Str 
																		s: str = {}
																	attr: str = format
																	ctx: Load 
																args: list 
																	element: Call 
																		func: Name 
																			id: str = zfill
																			ctx: Load 
																		args: list 
																			element: Call 
																				func: Name 
																					id: str = getattr
																					ctx: Load 
																				args: list 
																					element: Name 
																						id: str = object
																						ctx: Load 
																					element: Str 
																						s: str = microsecond
																					element: Num 
																						n: int = 0
																				keywords: list 
																			element: Num 
																				n: int = 6
																		keywords: list 
																keywords: list 
													orelse: list 
												element: Expr 
													value: Call 
														func: Attribute 
															value: Name 
																id: str = newformat
																ctx: Load 
															attr: str = append
															ctx: Load 
														args: list 
															element: Name 
																id: str = freplace
																ctx: Load 
														keywords: list 
											orelse: list 
												element: If 
													test: Compare 
														left: Name 
															id: str = ch
															ctx: Load 
														ops: list 
															element: Eq 
														comparators: list 
															element: Str 
																s: str = z
													body: list 
														element: If 
															test: Compare 
																left: Name 
																	id: str = zreplace
																	ctx: Load 
																ops: list 
																	element: Is 
																comparators: list 
																	element: NameConstant 
																		value: NoneType = None
															body: list 
																element: Assign 
																	targets: list 
																		element: Name 
																			id: str = zreplace
																			ctx: Store 
																	value: Str 
																		s: str = 
																element: If 
																	test: Call 
																		func: Name 
																			id: str = hasattr
																			ctx: Load 
																		args: list 
																			element: Name 
																				id: str = object
																				ctx: Load 
																			element: Str 
																				s: str = utcoffset
																		keywords: list 
																	body: list 
																		element: Assign 
																			targets: list 
																				element: Name 
																					id: str = offset
																					ctx: Store 
																			value: Call 
																				func: Attribute 
																					value: Name 
																						id: str = object
																						ctx: Load 
																					attr: str = utcoffset
																					ctx: Load 
																				args: list 
																				keywords: list 
																		element: If 
																			test: Compare 
																				left: Name 
																					id: str = offset
																					ctx: Load 
																				ops: list 
																					element: IsNot 
																				comparators: list 
																					element: NameConstant 
																						value: NoneType = None
																			body: list 
																				element: Assign 
																					targets: list 
																						element: Name 
																							id: str = sign
																							ctx: Store 
																					value: Str 
																						s: str = +
																				element: If 
																					test: Compare 
																						left: Attribute 
																							value: Name 
																								id: str = offset
																								ctx: Load 
																							attr: str = days
																							ctx: Load 
																						ops: list 
																							element: Lt 
																						comparators: list 
																							element: Num 
																								n: int = 0
																					body: list 
																						element: Assign 
																							targets: list 
																								element: Name 
																									id: str = offset
																									ctx: Store 
																							value: UnaryOp 
																								op: USub 
																								operand: Name 
																									id: str = offset
																									ctx: Load 
																						element: Assign 
																							targets: list 
																								element: Name 
																									id: str = sign
																									ctx: Store 
																							value: Str 
																								s: str = -
																					orelse: list 
																				element: Assign 
																					targets: list 
																						element: Tuple 
																							elts: list 
																								element: Name 
																									id: str = h
																									ctx: Store 
																								element: Name 
																									id: str = m
																									ctx: Store 
																							ctx: Store 
																					value: Call 
																						func: Name 
																							id: str = divmod
																							ctx: Load 
																						args: list 
																							element: Name 
																								id: str = offset
																								ctx: Load 
																							element: Call 
																								func: Name 
																									id: str = timedelta
																									ctx: Load 
																								args: list 
																								keywords: list 
																									element: keyword 
																										arg: str = hours
																										value: Num 
																											n: int = 1
																						keywords: list 
																				element: Assert 
																					test: UnaryOp 
																						op: Not 
																						operand: BinOp 
																							left: Name 
																								id: str = m
																								ctx: Load 
																							op: Mod 
																							right: Call 
																								func: Name 
																									id: str = timedelta
																									ctx: Load 
																								args: list 
																								keywords: list 
																									element: keyword 
																										arg: str = minutes
																										value: Num 
																											n: int = 1
																					msg: Str 
																						s: str = whole minute
																				element: AugAssign 
																					target: Name 
																						id: str = m
																						ctx: Store 
																					op: FloorDiv 
																					value: Call 
																						func: Name 
																							id: str = timedelta
																							ctx: Load 
																						args: list 
																						keywords: list 
																							element: keyword 
																								arg: str = minutes
																								value: Num 
																									n: int = 1
																				element: Assign 
																					targets: list 
																						element: Name 
																							id: str = zreplace
																							ctx: Store 
																					value: Call 
																						func: Attribute 
																							value: Str 
																								s: str = {}{}{}
																							attr: str = format
																							ctx: Load 
																						args: list 
																							element: Name 
																								id: str = sign
																								ctx: Load 
																							element: Call 
																								func: Name 
																									id: str = zfill
																									ctx: Load 
																								args: list 
																									element: Name 
																										id: str = h
																										ctx: Load 
																									element: Num 
																										n: int = 2
																								keywords: list 
																							element: Call 
																								func: Name 
																									id: str = zfill
																									ctx: Load 
																								args: list 
																									element: Name 
																										id: str = m
																										ctx: Load 
																									element: Num 
																										n: int = 2
																								keywords: list 
																						keywords: list 
																			orelse: list 
																	orelse: list 
															orelse: list 
														element: Assert 
															test: Compare 
																left: Str 
																	s: str = %
																ops: list 
																	element: NotIn 
																comparators: list 
																	element: Name 
																		id: str = zreplace
																		ctx: Load 
															msg: NoneType = None
														element: Expr 
															value: Call 
																func: Attribute 
																	value: Name 
																		id: str = newformat
																		ctx: Load 
																	attr: str = append
																	ctx: Load 
																args: list 
																	element: Name 
																		id: str = zreplace
																		ctx: Load 
																keywords: list 
													orelse: list 
														element: If 
															test: Compare 
																left: Name 
																	id: str = ch
																	ctx: Load 
																ops: list 
																	element: Eq 
																comparators: list 
																	element: Str 
																		s: str = Z
															body: list 
																element: If 
																	test: Compare 
																		left: Name 
																			id: str = Zreplace
																			ctx: Load 
																		ops: list 
																			element: Is 
																		comparators: list 
																			element: NameConstant 
																				value: NoneType = None
																	body: list 
																		element: Assign 
																			targets: list 
																				element: Name 
																					id: str = Zreplace
																					ctx: Store 
																			value: Str 
																				s: str = 
																		element: If 
																			test: Call 
																				func: Name 
																					id: str = hasattr
																					ctx: Load 
																				args: list 
																					element: Name 
																						id: str = object
																						ctx: Load 
																					element: Str 
																						s: str = tzname
																				keywords: list 
																			body: list 
																				element: Assign 
																					targets: list 
																						element: Name 
																							id: str = s
																							ctx: Store 
																					value: Call 
																						func: Attribute 
																							value: Name 
																								id: str = object
																								ctx: Load 
																							attr: str = tzname
																							ctx: Load 
																						args: list 
																						keywords: list 
																				element: If 
																					test: Compare 
																						left: Name 
																							id: str = s
																							ctx: Load 
																						ops: list 
																							element: IsNot 
																						comparators: list 
																							element: NameConstant 
																								value: NoneType = None
																					body: list 
																						element: Assign 
																							targets: list 
																								element: Name 
																									id: str = Zreplace
																									ctx: Store 
																							value: Call 
																								func: Attribute 
																									value: Name 
																										id: str = s
																										ctx: Load 
																									attr: str = replace
																									ctx: Load 
																								args: list 
																									element: Str 
																										s: str = %
																									element: Str 
																										s: str = %%
																								keywords: list 
																					orelse: list 
																			orelse: list 
																	orelse: list 
																element: Expr 
																	value: Call 
																		func: Attribute 
																			value: Name 
																				id: str = newformat
																				ctx: Load 
																			attr: str = append
																			ctx: Load 
																		args: list 
																			element: Name 
																				id: str = Zreplace
																				ctx: Load 
																		keywords: list 
															orelse: list 
																element: Expr 
																	value: Call 
																		func: Attribute 
																			value: Name 
																				id: str = newformat
																				ctx: Load 
																			attr: str = append
																			ctx: Load 
																		args: list 
																			element: Str 
																				s: str = %
																		keywords: list 
																element: Expr 
																	value: Call 
																		func: Attribute 
																			value: Name 
																				id: str = newformat
																				ctx: Load 
																			attr: str = append
																			ctx: Load 
																		args: list 
																			element: Name 
																				id: str = ch
																				ctx: Load 
																		keywords: list 
									orelse: list 
										element: Expr 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = newformat
														ctx: Load 
													attr: str = append
													ctx: Load 
												args: list 
													element: Str 
														s: str = %
												keywords: list 
							orelse: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = newformat
												ctx: Load 
											attr: str = append
											ctx: Load 
										args: list 
											element: Name 
												id: str = ch
												ctx: Load 
										keywords: list 
					orelse: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = newformat
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Str 
								s: str = 
							attr: str = join
							ctx: Load 
						args: list 
							element: Name 
								id: str = newformat
								ctx: Load 
						keywords: list 
				element: Return 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = _time
								ctx: Load 
							attr: str = strftime
							ctx: Load 
						args: list 
							element: Name 
								id: str = newformat
								ctx: Load 
							element: Name 
								id: str = timetuple
								ctx: Load 
						keywords: list 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _check_tzname
			args: arguments 
				args: list 
					element: arg 
						arg: str = name
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: If 
					test: BoolOp 
						op: And 
						values: list 
							element: Compare 
								left: Name 
									id: str = name
									ctx: Load 
								ops: list 
									element: IsNot 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							element: UnaryOp 
								op: Not 
								operand: Call 
									func: Name 
										id: str = isinstance
										ctx: Load 
									args: list 
										element: Name 
											id: str = name
											ctx: Load 
										element: Name 
											id: str = str
											ctx: Load 
									keywords: list 
					body: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = TypeError
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Str 
												s: str = tzinfo.tzname() must return None or string, not '{}'
											attr: str = format
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = type
													ctx: Load 
												args: list 
													element: Name 
														id: str = name
														ctx: Load 
												keywords: list 
										keywords: list 
								keywords: list 
							cause: NoneType = None
					orelse: list 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _check_utc_offset
			args: arguments 
				args: list 
					element: arg 
						arg: str = name
						annotation: NoneType = None
					element: arg 
						arg: str = offset
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assert 
					test: Compare 
						left: Name 
							id: str = name
							ctx: Load 
						ops: list 
							element: In 
						comparators: list 
							element: Tuple 
								elts: list 
									element: Str 
										s: str = utcoffset
									element: Str 
										s: str = dst
								ctx: Load 
					msg: NoneType = None
				element: If 
					test: Compare 
						left: Name 
							id: str = offset
							ctx: Load 
						ops: list 
							element: Is 
						comparators: list 
							element: NameConstant 
								value: NoneType = None
					body: list 
						element: Return 
							value: NoneType = None
					orelse: list 
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Call 
							func: Name 
								id: str = isinstance
								ctx: Load 
							args: list 
								element: Name 
									id: str = offset
									ctx: Load 
								element: Name 
									id: str = timedelta
									ctx: Load 
							keywords: list 
					body: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = TypeError
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Str 
												s: str = tzinfo.{}() must return None or timedelta, not '{}'
											attr: str = format
											ctx: Load 
										args: list 
											element: Name 
												id: str = name
												ctx: Load 
											element: Call 
												func: Name 
													id: str = type
													ctx: Load 
												args: list 
													element: Name 
														id: str = offset
														ctx: Load 
												keywords: list 
										keywords: list 
								keywords: list 
							cause: NoneType = None
					orelse: list 
				element: If 
					test: BoolOp 
						op: Or 
						values: list 
							element: Attribute 
								value: Call 
									func: Attribute 
										value: Name 
											id: str = offset
											ctx: Load 
										attr: str = __mod__
										ctx: Load 
									args: list 
										element: Call 
											func: Name 
												id: str = timedelta
												ctx: Load 
											args: list 
											keywords: list 
												element: keyword 
													arg: str = minutes
													value: Num 
														n: int = 1
									keywords: list 
								attr: str = microseconds
								ctx: Load 
							element: Attribute 
								value: Name 
									id: str = offset
									ctx: Load 
								attr: str = microseconds
								ctx: Load 
					body: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = ValueError
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Str 
												s: str = tzinfo.{}() must return a whole number of minutes, got {}
											attr: str = format
											ctx: Load 
										args: list 
											element: Name 
												id: str = name
												ctx: Load 
											element: Name 
												id: str = offset
												ctx: Load 
										keywords: list 
								keywords: list 
							cause: NoneType = None
					orelse: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = opov
						keywords: list 
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Compare 
							left: UnaryOp 
								op: USub 
								operand: Call 
									func: Name 
										id: str = timedelta
										ctx: Load 
									args: list 
										element: Num 
											n: int = 1
									keywords: list 
							ops: list 
								element: Lt 
								element: Lt 
							comparators: list 
								element: Name 
									id: str = offset
									ctx: Load 
								element: Call 
									func: Name 
										id: str = timedelta
										ctx: Load 
									args: list 
										element: Num 
											n: int = 1
									keywords: list 
					body: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = ValueError
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Str 
												s: str = {}()={}, must be must be strictly between -timedelta(hours=24) and timedelta(hours=24)
											attr: str = format
											ctx: Load 
										args: list 
											element: Name 
												id: str = name
												ctx: Load 
											element: Name 
												id: str = offset
												ctx: Load 
										keywords: list 
								keywords: list 
							cause: NoneType = None
					orelse: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = noopov
						keywords: list 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _check_int_field
			args: arguments 
				args: list 
					element: arg 
						arg: str = value
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = _type
							ctx: Store 
					value: Call 
						func: Name 
							id: str = type
							ctx: Load 
						args: list 
							element: Name 
								id: str = value
								ctx: Load 
						keywords: list 
				element: If 
					test: Compare 
						left: Name 
							id: str = _type
							ctx: Load 
						ops: list 
							element: Eq 
						comparators: list 
							element: Name 
								id: str = int
								ctx: Load 
					body: list 
						element: Return 
							value: Name 
								id: str = value
								ctx: Load 
					orelse: list 
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Compare 
							left: Name 
								id: str = _type
								ctx: Load 
							ops: list 
								element: Eq 
							comparators: list 
								element: Name 
									id: str = float
									ctx: Load 
					body: list 
						element: Try 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = value
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = value
												ctx: Load 
											attr: str = __int__
											ctx: Load 
										args: list 
										keywords: list 
							handlers: list 
								element: ExceptHandler 
									type: Name 
										id: str = AttributeError
										ctx: Load 
									name: NoneType = None
									body: list 
										element: Pass 
							orelse: list 
								element: If 
									test: Compare 
										left: Call 
											func: Name 
												id: str = type
												ctx: Load 
											args: list 
												element: Name 
													id: str = value
													ctx: Load 
											keywords: list 
										ops: list 
											element: Eq 
										comparators: list 
											element: Name 
												id: str = int
												ctx: Load 
									body: list 
										element: Return 
											value: Name 
												id: str = value
												ctx: Load 
									orelse: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = TypeError
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Str 
														s: str = __int__ returned non-int (type {})
													attr: str = format
													ctx: Load 
												args: list 
													element: Attribute 
														value: Call 
															func: Name 
																id: str = type
																ctx: Load 
															args: list 
																element: Name 
																	id: str = value
																	ctx: Load 
															keywords: list 
														attr: str = __name__
														ctx: Load 
												keywords: list 
										keywords: list 
									cause: NoneType = None
							finalbody: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = TypeError
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Str 
												s: str = an integer is required (got type {})
											attr: str = format
											ctx: Load 
										args: list 
											element: Attribute 
												value: Call 
													func: Name 
														id: str = type
														ctx: Load 
													args: list 
														element: Name 
															id: str = value
															ctx: Load 
													keywords: list 
												attr: str = __name__
												ctx: Load 
										keywords: list 
								keywords: list 
							cause: NoneType = None
					orelse: list 
				element: Raise 
					exc: Call 
						func: Name 
							id: str = TypeError
							ctx: Load 
						args: list 
							element: Str 
								s: str = integer argument expected, got float
						keywords: list 
					cause: NoneType = None
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _check_date_fields
			args: arguments 
				args: list 
					element: arg 
						arg: str = year
						annotation: NoneType = None
					element: arg 
						arg: str = month
						annotation: NoneType = None
					element: arg 
						arg: str = day
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = year
							ctx: Store 
					value: Call 
						func: Name 
							id: str = _check_int_field
							ctx: Load 
						args: list 
							element: Name 
								id: str = year
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = month
							ctx: Store 
					value: Call 
						func: Name 
							id: str = _check_int_field
							ctx: Load 
						args: list 
							element: Name 
								id: str = month
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = day
							ctx: Store 
					value: Call 
						func: Name 
							id: str = _check_int_field
							ctx: Load 
						args: list 
							element: Name 
								id: str = day
								ctx: Load 
						keywords: list 
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Compare 
							left: Name 
								id: str = MINYEAR
								ctx: Load 
							ops: list 
								element: LtE 
								element: LtE 
							comparators: list 
								element: Name 
									id: str = year
									ctx: Load 
								element: Name 
									id: str = MAXYEAR
									ctx: Load 
					body: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = ValueError
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Str 
												s: str = year must be in {}..{}
											attr: str = format
											ctx: Load 
										args: list 
											element: Name 
												id: str = MINYEAR
												ctx: Load 
											element: Name 
												id: str = MAXYEAR
												ctx: Load 
										keywords: list 
									element: Name 
										id: str = year
										ctx: Load 
								keywords: list 
							cause: NoneType = None
					orelse: list 
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Compare 
							left: Num 
								n: int = 1
							ops: list 
								element: LtE 
								element: LtE 
							comparators: list 
								element: Name 
									id: str = month
									ctx: Load 
								element: Num 
									n: int = 12
					body: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = ValueError
									ctx: Load 
								args: list 
									element: Str 
										s: str = month must be in 1..12
									element: Name 
										id: str = month
										ctx: Load 
								keywords: list 
							cause: NoneType = None
					orelse: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = dim
							ctx: Store 
					value: Call 
						func: Name 
							id: str = _days_in_month
							ctx: Load 
						args: list 
							element: Name 
								id: str = year
								ctx: Load 
							element: Name 
								id: str = month
								ctx: Load 
						keywords: list 
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Compare 
							left: Num 
								n: int = 1
							ops: list 
								element: LtE 
								element: LtE 
							comparators: list 
								element: Name 
									id: str = day
									ctx: Load 
								element: Name 
									id: str = dim
									ctx: Load 
					body: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = ValueError
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Str 
												s: str = day must be in 1..{}
											attr: str = format
											ctx: Load 
										args: list 
											element: Name 
												id: str = dim
												ctx: Load 
										keywords: list 
									element: Name 
										id: str = day
										ctx: Load 
								keywords: list 
							cause: NoneType = None
					orelse: list 
				element: Return 
					value: Tuple 
						elts: list 
							element: Name 
								id: str = year
								ctx: Load 
							element: Name 
								id: str = month
								ctx: Load 
							element: Name 
								id: str = day
								ctx: Load 
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _check_time_fields
			args: arguments 
				args: list 
					element: arg 
						arg: str = hour
						annotation: NoneType = None
					element: arg 
						arg: str = minute
						annotation: NoneType = None
					element: arg 
						arg: str = second
						annotation: NoneType = None
					element: arg 
						arg: str = microsecond
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = hour
							ctx: Store 
					value: Call 
						func: Name 
							id: str = _check_int_field
							ctx: Load 
						args: list 
							element: Name 
								id: str = hour
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = minute
							ctx: Store 
					value: Call 
						func: Name 
							id: str = _check_int_field
							ctx: Load 
						args: list 
							element: Name 
								id: str = minute
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = second
							ctx: Store 
					value: Call 
						func: Name 
							id: str = _check_int_field
							ctx: Load 
						args: list 
							element: Name 
								id: str = second
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = microsecond
							ctx: Store 
					value: Call 
						func: Name 
							id: str = _check_int_field
							ctx: Load 
						args: list 
							element: Name 
								id: str = microsecond
								ctx: Load 
						keywords: list 
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Compare 
							left: Num 
								n: int = 0
							ops: list 
								element: LtE 
								element: LtE 
							comparators: list 
								element: Name 
									id: str = hour
									ctx: Load 
								element: Num 
									n: int = 23
					body: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = ValueError
									ctx: Load 
								args: list 
									element: Str 
										s: str = hour must be in 0..23
									element: Name 
										id: str = hour
										ctx: Load 
								keywords: list 
							cause: NoneType = None
					orelse: list 
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Compare 
							left: Num 
								n: int = 0
							ops: list 
								element: LtE 
								element: LtE 
							comparators: list 
								element: Name 
									id: str = minute
									ctx: Load 
								element: Num 
									n: int = 59
					body: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = ValueError
									ctx: Load 
								args: list 
									element: Str 
										s: str = minute must be in 0..59
									element: Name 
										id: str = minute
										ctx: Load 
								keywords: list 
							cause: NoneType = None
					orelse: list 
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Compare 
							left: Num 
								n: int = 0
							ops: list 
								element: LtE 
								element: LtE 
							comparators: list 
								element: Name 
									id: str = second
									ctx: Load 
								element: Num 
									n: int = 59
					body: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = ValueError
									ctx: Load 
								args: list 
									element: Str 
										s: str = second must be in 0..59
									element: Name 
										id: str = second
										ctx: Load 
								keywords: list 
							cause: NoneType = None
					orelse: list 
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Compare 
							left: Num 
								n: int = 0
							ops: list 
								element: LtE 
								element: LtE 
							comparators: list 
								element: Name 
									id: str = microsecond
									ctx: Load 
								element: Num 
									n: int = 999999
					body: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = ValueError
									ctx: Load 
								args: list 
									element: Str 
										s: str = microsecond must be in 0..999999
									element: Name 
										id: str = microsecond
										ctx: Load 
								keywords: list 
							cause: NoneType = None
					orelse: list 
				element: Return 
					value: Tuple 
						elts: list 
							element: Name 
								id: str = hour
								ctx: Load 
							element: Name 
								id: str = minute
								ctx: Load 
							element: Name 
								id: str = second
								ctx: Load 
							element: Name 
								id: str = microsecond
								ctx: Load 
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _check_tzinfo_arg
			args: arguments 
				args: list 
					element: arg 
						arg: str = tz
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: If 
					test: BoolOp 
						op: And 
						values: list 
							element: Compare 
								left: Name 
									id: str = tz
									ctx: Load 
								ops: list 
									element: IsNot 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							element: UnaryOp 
								op: Not 
								operand: Call 
									func: Name 
										id: str = isinstance
										ctx: Load 
									args: list 
										element: Name 
											id: str = tz
											ctx: Load 
										element: Name 
											id: str = tzinfo
											ctx: Load 
									keywords: list 
					body: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = TypeError
									ctx: Load 
								args: list 
									element: Str 
										s: str = tzinfo argument must be None or of a tzinfo subclass
								keywords: list 
							cause: NoneType = None
					orelse: list 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _cmperror
			args: arguments 
				args: list 
					element: arg 
						arg: str = x
						annotation: NoneType = None
					element: arg 
						arg: str = y
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Raise 
					exc: Call 
						func: Name 
							id: str = TypeError
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Str 
										s: str = can't compare '{}' to '{}'
									attr: str = format
									ctx: Load 
								args: list 
									element: Attribute 
										value: Call 
											func: Name 
												id: str = type
												ctx: Load 
											args: list 
												element: Name 
													id: str = x
													ctx: Load 
											keywords: list 
										attr: str = __name__
										ctx: Load 
									element: Attribute 
										value: Call 
											func: Name 
												id: str = type
												ctx: Load 
											args: list 
												element: Name 
													id: str = y
													ctx: Load 
											keywords: list 
										attr: str = __name__
										ctx: Load 
								keywords: list 
						keywords: list 
					cause: NoneType = None
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _divide_and_round
			args: arguments 
				args: list 
					element: arg 
						arg: str = a
						annotation: NoneType = None
					element: arg 
						arg: str = b
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = divide a by b and round result to the nearest integer

    When the ratio is exactly half-way between two integers,
    the even integer is returned.
    
				element: Assign 
					targets: list 
						element: Tuple 
							elts: list 
								element: Name 
									id: str = q
									ctx: Store 
								element: Name 
									id: str = r
									ctx: Store 
							ctx: Store 
					value: Call 
						func: Name 
							id: str = divmod
							ctx: Load 
						args: list 
							element: Name 
								id: str = a
								ctx: Load 
							element: Name 
								id: str = b
								ctx: Load 
						keywords: list 
				element: AugAssign 
					target: Name 
						id: str = r
						ctx: Store 
					op: Mult 
					value: Num 
						n: int = 2
				element: Assign 
					targets: list 
						element: Name 
							id: str = greater_than_half
							ctx: Store 
					value: IfExp 
						test: Compare 
							left: Name 
								id: str = b
								ctx: Load 
							ops: list 
								element: Gt 
							comparators: list 
								element: Num 
									n: int = 0
						body: Compare 
							left: Name 
								id: str = r
								ctx: Load 
							ops: list 
								element: Gt 
							comparators: list 
								element: Name 
									id: str = b
									ctx: Load 
						orelse: Compare 
							left: Name 
								id: str = r
								ctx: Load 
							ops: list 
								element: Lt 
							comparators: list 
								element: Name 
									id: str = b
									ctx: Load 
				element: If 
					test: BoolOp 
						op: Or 
						values: list 
							element: Name 
								id: str = greater_than_half
								ctx: Load 
							element: BoolOp 
								op: And 
								values: list 
									element: Compare 
										left: Name 
											id: str = r
											ctx: Load 
										ops: list 
											element: Eq 
										comparators: list 
											element: Name 
												id: str = b
												ctx: Load 
									element: Compare 
										left: BinOp 
											left: Name 
												id: str = q
												ctx: Load 
											op: Mod 
											right: Num 
												n: int = 2
										ops: list 
											element: Eq 
										comparators: list 
											element: Num 
												n: int = 1
					body: list 
						element: AugAssign 
							target: Name 
								id: str = q
								ctx: Store 
							op: Add 
							value: Num 
								n: int = 1
					orelse: list 
				element: Return 
					value: Name 
						id: str = q
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: ClassDef 
			name: str = timedelta
			bases: list 
			keywords: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = Represent the difference between two datetime objects.

    Supported operators:

    - add, subtract timedelta
    - unary plus, minus, abs
    - compare to timedelta
    - multiply, divide by int

    In addition, datetime supports subtraction of two datetime objects
    returning a timedelta, and addition or subtraction of a datetime
    and a timedelta giving a datetime.

    Representation: (days, seconds, microseconds).  Why?  Because I
    felt like it.
    
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = kwargs
						keywords: list 
				element: FunctionDef 
					name: str = __init__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = days
								annotation: NoneType = None
							element: arg 
								arg: str = seconds
								annotation: NoneType = None
							element: arg 
								arg: str = microseconds
								annotation: NoneType = None
							element: arg 
								arg: str = milliseconds
								annotation: NoneType = None
							element: arg 
								arg: str = minutes
								annotation: NoneType = None
							element: arg 
								arg: str = hours
								annotation: NoneType = None
							element: arg 
								arg: str = weeks
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = d
									ctx: Store 
								element: Name 
									id: str = s
									ctx: Store 
								element: Name 
									id: str = us
									ctx: Store 
							value: Num 
								n: int = 0
						element: AugAssign 
							target: Name 
								id: str = days
								ctx: Store 
							op: Add 
							value: BinOp 
								left: Name 
									id: str = weeks
									ctx: Load 
								op: Mult 
								right: Num 
									n: int = 7
						element: AugAssign 
							target: Name 
								id: str = seconds
								ctx: Store 
							op: Add 
							value: BinOp 
								left: BinOp 
									left: Name 
										id: str = minutes
										ctx: Load 
									op: Mult 
									right: Num 
										n: int = 60
								op: Add 
								right: BinOp 
									left: Name 
										id: str = hours
										ctx: Load 
									op: Mult 
									right: Num 
										n: int = 3600
						element: AugAssign 
							target: Name 
								id: str = microseconds
								ctx: Store 
							op: Add 
							value: BinOp 
								left: Name 
									id: str = milliseconds
									ctx: Load 
								op: Mult 
								right: Num 
									n: int = 1000
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = days
										ctx: Load 
									element: Name 
										id: str = float
										ctx: Load 
								keywords: list 
							body: list 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = dayfrac
													ctx: Store 
												element: Name 
													id: str = days
													ctx: Store 
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = _math
												ctx: Load 
											attr: str = modf
											ctx: Load 
										args: list 
											element: Name 
												id: str = days
												ctx: Load 
										keywords: list 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = daysecondsfrac
													ctx: Store 
												element: Name 
													id: str = daysecondswhole
													ctx: Store 
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = _math
												ctx: Load 
											attr: str = modf
											ctx: Load 
										args: list 
											element: BinOp 
												left: Name 
													id: str = dayfrac
													ctx: Load 
												op: Mult 
												right: BinOp 
													left: Num 
														n: float = 24.0
													op: Mult 
													right: Num 
														n: float = 3600.0
										keywords: list 
								element: Assert 
									test: Compare 
										left: Name 
											id: str = daysecondswhole
											ctx: Load 
										ops: list 
											element: Eq 
										comparators: list 
											element: Call 
												func: Name 
													id: str = int
													ctx: Load 
												args: list 
													element: Name 
														id: str = daysecondswhole
														ctx: Load 
												keywords: list 
									msg: NoneType = None
								element: Assign 
									targets: list 
										element: Name 
											id: str = s
											ctx: Store 
									value: Call 
										func: Name 
											id: str = int
											ctx: Load 
										args: list 
											element: Name 
												id: str = daysecondswhole
												ctx: Load 
										keywords: list 
								element: Assert 
									test: Compare 
										left: Name 
											id: str = days
											ctx: Load 
										ops: list 
											element: Eq 
										comparators: list 
											element: Call 
												func: Name 
													id: str = int
													ctx: Load 
												args: list 
													element: Name 
														id: str = days
														ctx: Load 
												keywords: list 
									msg: NoneType = None
								element: Assign 
									targets: list 
										element: Name 
											id: str = d
											ctx: Store 
									value: Call 
										func: Name 
											id: str = int
											ctx: Load 
										args: list 
											element: Name 
												id: str = days
												ctx: Load 
										keywords: list 
							orelse: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = daysecondsfrac
											ctx: Store 
									value: Num 
										n: float = 0.0
								element: Assign 
									targets: list 
										element: Name 
											id: str = d
											ctx: Store 
									value: Name 
										id: str = days
										ctx: Load 
						element: Assert 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = daysecondsfrac
										ctx: Load 
									element: Tuple 
										elts: list 
											element: Name 
												id: str = float
												ctx: Load 
											element: Name 
												id: str = int
												ctx: Load 
										ctx: Load 
								keywords: list 
							msg: NoneType = None
						element: Assert 
							test: Compare 
								left: Call 
									func: Name 
										id: str = abs
										ctx: Load 
									args: list 
										element: Name 
											id: str = daysecondsfrac
											ctx: Load 
									keywords: list 
								ops: list 
									element: LtE 
								comparators: list 
									element: Num 
										n: float = 1.0
							msg: NoneType = None
						element: Assert 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = d
										ctx: Load 
									element: Name 
										id: str = int
										ctx: Load 
								keywords: list 
							msg: NoneType = None
						element: Assert 
							test: Compare 
								left: Call 
									func: Name 
										id: str = abs
										ctx: Load 
									args: list 
										element: Name 
											id: str = s
											ctx: Load 
									keywords: list 
								ops: list 
									element: LtE 
								comparators: list 
									element: BinOp 
										left: Num 
											n: int = 24
										op: Mult 
										right: Num 
											n: int = 3600
							msg: NoneType = None
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = seconds
										ctx: Load 
									element: Name 
										id: str = float
										ctx: Load 
								keywords: list 
							body: list 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = secondsfrac
													ctx: Store 
												element: Name 
													id: str = seconds
													ctx: Store 
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = _math
												ctx: Load 
											attr: str = modf
											ctx: Load 
										args: list 
											element: Name 
												id: str = seconds
												ctx: Load 
										keywords: list 
								element: Assert 
									test: Compare 
										left: Name 
											id: str = seconds
											ctx: Load 
										ops: list 
											element: Eq 
										comparators: list 
											element: Call 
												func: Name 
													id: str = int
													ctx: Load 
												args: list 
													element: Name 
														id: str = seconds
														ctx: Load 
												keywords: list 
									msg: NoneType = None
								element: Assign 
									targets: list 
										element: Name 
											id: str = seconds
											ctx: Store 
									value: Call 
										func: Name 
											id: str = int
											ctx: Load 
										args: list 
											element: Name 
												id: str = seconds
												ctx: Load 
										keywords: list 
								element: AugAssign 
									target: Name 
										id: str = secondsfrac
										ctx: Store 
									op: Add 
									value: Name 
										id: str = daysecondsfrac
										ctx: Load 
								element: Assert 
									test: Compare 
										left: Call 
											func: Name 
												id: str = abs
												ctx: Load 
											args: list 
												element: Name 
													id: str = secondsfrac
													ctx: Load 
											keywords: list 
										ops: list 
											element: LtE 
										comparators: list 
											element: Num 
												n: float = 2.0
									msg: NoneType = None
							orelse: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = secondsfrac
											ctx: Store 
									value: Name 
										id: str = daysecondsfrac
										ctx: Load 
						element: Assert 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = secondsfrac
										ctx: Load 
									element: Tuple 
										elts: list 
											element: Name 
												id: str = float
												ctx: Load 
											element: Name 
												id: str = int
												ctx: Load 
										ctx: Load 
								keywords: list 
							msg: NoneType = None
						element: Assert 
							test: Compare 
								left: Call 
									func: Name 
										id: str = abs
										ctx: Load 
									args: list 
										element: Name 
											id: str = secondsfrac
											ctx: Load 
									keywords: list 
								ops: list 
									element: LtE 
								comparators: list 
									element: Num 
										n: float = 2.0
							msg: NoneType = None
						element: Assert 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = seconds
										ctx: Load 
									element: Name 
										id: str = int
										ctx: Load 
								keywords: list 
							msg: NoneType = None
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = days
											ctx: Store 
										element: Name 
											id: str = seconds
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = divmod
									ctx: Load 
								args: list 
									element: Name 
										id: str = seconds
										ctx: Load 
									element: BinOp 
										left: Num 
											n: int = 24
										op: Mult 
										right: Num 
											n: int = 3600
								keywords: list 
						element: AugAssign 
							target: Name 
								id: str = d
								ctx: Store 
							op: Add 
							value: Name 
								id: str = days
								ctx: Load 
						element: AugAssign 
							target: Name 
								id: str = s
								ctx: Store 
							op: Add 
							value: Call 
								func: Name 
									id: str = int
									ctx: Load 
								args: list 
									element: Name 
										id: str = seconds
										ctx: Load 
								keywords: list 
						element: Assert 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = s
										ctx: Load 
									element: Name 
										id: str = int
										ctx: Load 
								keywords: list 
							msg: NoneType = None
						element: Assert 
							test: Compare 
								left: Call 
									func: Name 
										id: str = abs
										ctx: Load 
									args: list 
										element: Name 
											id: str = s
											ctx: Load 
									keywords: list 
								ops: list 
									element: LtE 
								comparators: list 
									element: BinOp 
										left: BinOp 
											left: Num 
												n: int = 2
											op: Mult 
											right: Num 
												n: int = 24
										op: Mult 
										right: Num 
											n: int = 3600
							msg: NoneType = None
						element: Assign 
							targets: list 
								element: Name 
									id: str = usdouble
									ctx: Store 
							value: BinOp 
								left: Name 
									id: str = secondsfrac
									ctx: Load 
								op: Mult 
								right: Num 
									n: float = 1000000.0
						element: Assert 
							test: Compare 
								left: Call 
									func: Name 
										id: str = abs
										ctx: Load 
									args: list 
										element: Name 
											id: str = usdouble
											ctx: Load 
									keywords: list 
								ops: list 
									element: Lt 
								comparators: list 
									element: Num 
										n: float = 2100000.0
							msg: NoneType = None
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = microseconds
										ctx: Load 
									element: Name 
										id: str = float
										ctx: Load 
								keywords: list 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = microseconds
											ctx: Store 
									value: Call 
										func: Name 
											id: str = round
											ctx: Load 
										args: list 
											element: BinOp 
												left: Name 
													id: str = microseconds
													ctx: Load 
												op: Add 
												right: Name 
													id: str = usdouble
													ctx: Load 
										keywords: list 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = seconds
													ctx: Store 
												element: Name 
													id: str = microseconds
													ctx: Store 
											ctx: Store 
									value: Call 
										func: Name 
											id: str = divmod
											ctx: Load 
										args: list 
											element: Name 
												id: str = microseconds
												ctx: Load 
											element: Num 
												n: int = 1000000
										keywords: list 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = days
													ctx: Store 
												element: Name 
													id: str = seconds
													ctx: Store 
											ctx: Store 
									value: Call 
										func: Name 
											id: str = divmod
											ctx: Load 
										args: list 
											element: Name 
												id: str = seconds
												ctx: Load 
											element: BinOp 
												left: Num 
													n: int = 24
												op: Mult 
												right: Num 
													n: int = 3600
										keywords: list 
								element: AugAssign 
									target: Name 
										id: str = d
										ctx: Store 
									op: Add 
									value: Name 
										id: str = days
										ctx: Load 
								element: AugAssign 
									target: Name 
										id: str = s
										ctx: Store 
									op: Add 
									value: Name 
										id: str = seconds
										ctx: Load 
							orelse: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = microseconds
											ctx: Store 
									value: Call 
										func: Name 
											id: str = int
											ctx: Load 
										args: list 
											element: Name 
												id: str = microseconds
												ctx: Load 
										keywords: list 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = seconds
													ctx: Store 
												element: Name 
													id: str = microseconds
													ctx: Store 
											ctx: Store 
									value: Call 
										func: Name 
											id: str = divmod
											ctx: Load 
										args: list 
											element: Name 
												id: str = microseconds
												ctx: Load 
											element: Num 
												n: int = 1000000
										keywords: list 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = days
													ctx: Store 
												element: Name 
													id: str = seconds
													ctx: Store 
											ctx: Store 
									value: Call 
										func: Name 
											id: str = divmod
											ctx: Load 
										args: list 
											element: Name 
												id: str = seconds
												ctx: Load 
											element: BinOp 
												left: Num 
													n: int = 24
												op: Mult 
												right: Num 
													n: int = 3600
										keywords: list 
								element: AugAssign 
									target: Name 
										id: str = d
										ctx: Store 
									op: Add 
									value: Name 
										id: str = days
										ctx: Load 
								element: AugAssign 
									target: Name 
										id: str = s
										ctx: Store 
									op: Add 
									value: Name 
										id: str = seconds
										ctx: Load 
								element: Assign 
									targets: list 
										element: Name 
											id: str = microseconds
											ctx: Store 
									value: Call 
										func: Name 
											id: str = round
											ctx: Load 
										args: list 
											element: BinOp 
												left: Name 
													id: str = microseconds
													ctx: Load 
												op: Add 
												right: Name 
													id: str = usdouble
													ctx: Load 
										keywords: list 
						element: Assert 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = s
										ctx: Load 
									element: Name 
										id: str = int
										ctx: Load 
								keywords: list 
							msg: NoneType = None
						element: Assert 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = microseconds
										ctx: Load 
									element: Name 
										id: str = int
										ctx: Load 
								keywords: list 
							msg: NoneType = None
						element: Assert 
							test: Compare 
								left: Call 
									func: Name 
										id: str = abs
										ctx: Load 
									args: list 
										element: Name 
											id: str = s
											ctx: Load 
									keywords: list 
								ops: list 
									element: LtE 
								comparators: list 
									element: BinOp 
										left: BinOp 
											left: Num 
												n: int = 3
											op: Mult 
											right: Num 
												n: int = 24
										op: Mult 
										right: Num 
											n: int = 3600
							msg: NoneType = None
						element: Assert 
							test: Compare 
								left: Call 
									func: Name 
										id: str = abs
										ctx: Load 
									args: list 
										element: Name 
											id: str = microseconds
											ctx: Load 
									keywords: list 
								ops: list 
									element: Lt 
								comparators: list 
									element: Num 
										n: float = 3100000.0
							msg: NoneType = None
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = seconds
											ctx: Store 
										element: Name 
											id: str = us
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = divmod
									ctx: Load 
								args: list 
									element: Name 
										id: str = microseconds
										ctx: Load 
									element: Num 
										n: int = 1000000
								keywords: list 
						element: AugAssign 
							target: Name 
								id: str = s
								ctx: Store 
							op: Add 
							value: Name 
								id: str = seconds
								ctx: Load 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = days
											ctx: Store 
										element: Name 
											id: str = s
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = divmod
									ctx: Load 
								args: list 
									element: Name 
										id: str = s
										ctx: Load 
									element: BinOp 
										left: Num 
											n: int = 24
										op: Mult 
										right: Num 
											n: int = 3600
								keywords: list 
						element: AugAssign 
							target: Name 
								id: str = d
								ctx: Store 
							op: Add 
							value: Name 
								id: str = days
								ctx: Load 
						element: Assert 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = d
										ctx: Load 
									element: Name 
										id: str = int
										ctx: Load 
								keywords: list 
							msg: NoneType = None
						element: Assert 
							test: BoolOp 
								op: And 
								values: list 
									element: Call 
										func: Name 
											id: str = isinstance
											ctx: Load 
										args: list 
											element: Name 
												id: str = s
												ctx: Load 
											element: Name 
												id: str = int
												ctx: Load 
										keywords: list 
									element: Compare 
										left: Num 
											n: int = 0
										ops: list 
											element: LtE 
											element: Lt 
										comparators: list 
											element: Name 
												id: str = s
												ctx: Load 
											element: BinOp 
												left: Num 
													n: int = 24
												op: Mult 
												right: Num 
													n: int = 3600
							msg: NoneType = None
						element: Assert 
							test: BoolOp 
								op: And 
								values: list 
									element: Call 
										func: Name 
											id: str = isinstance
											ctx: Load 
										args: list 
											element: Name 
												id: str = us
												ctx: Load 
											element: Name 
												id: str = int
												ctx: Load 
										keywords: list 
									element: Compare 
										left: Num 
											n: int = 0
										ops: list 
											element: LtE 
											element: Lt 
										comparators: list 
											element: Name 
												id: str = us
												ctx: Load 
											element: Num 
												n: int = 1000000
							msg: NoneType = None
						element: If 
							test: Compare 
								left: Call 
									func: Name 
										id: str = abs
										ctx: Load 
									args: list 
										element: Name 
											id: str = d
											ctx: Load 
									keywords: list 
								ops: list 
									element: Gt 
								comparators: list 
									element: Num 
										n: int = 999999999
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = OverflowError
											ctx: Load 
										args: list 
											element: BinOp 
												left: Str 
													s: str = timedelta # of days is too large: %d
												op: Mod 
												right: Name 
													id: str = d
													ctx: Load 
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _days
									ctx: Store 
							value: Name 
								id: str = d
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _seconds
									ctx: Store 
							value: Name 
								id: str = s
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _microseconds
									ctx: Store 
							value: Name 
								id: str = us
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = nokwargs
						keywords: list 
				element: FunctionDef 
					name: str = __repr__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _microseconds
								ctx: Load 
							body: list 
								element: Return 
									value: Call 
										func: Attribute 
											value: Str 
												s: str = datetime.timedelta({}, {}, {})
											attr: str = format
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _days
												ctx: Load 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _seconds
												ctx: Load 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _microseconds
												ctx: Load 
										keywords: list 
							orelse: list 
						element: If 
							test: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _seconds
								ctx: Load 
							body: list 
								element: Return 
									value: Call 
										func: Attribute 
											value: Str 
												s: str = datetime.timedelta({}, {})
											attr: str = format
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _days
												ctx: Load 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _seconds
												ctx: Load 
										keywords: list 
							orelse: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Str 
										s: str = datetime.timedelta({})
									attr: str = format
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _days
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __str__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = mm
											ctx: Store 
										element: Name 
											id: str = ss
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = divmod
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _seconds
										ctx: Load 
									element: Num 
										n: int = 60
								keywords: list 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = hh
											ctx: Store 
										element: Name 
											id: str = mm
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = divmod
									ctx: Load 
								args: list 
									element: Name 
										id: str = mm
										ctx: Load 
									element: Num 
										n: int = 60
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = s
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Str 
										s: str = {}:{}:{}
									attr: str = format
									ctx: Load 
								args: list 
									element: Name 
										id: str = hh
										ctx: Load 
									element: Call 
										func: Name 
											id: str = zfill
											ctx: Load 
										args: list 
											element: Name 
												id: str = mm
												ctx: Load 
											element: Num 
												n: int = 2
										keywords: list 
									element: Call 
										func: Name 
											id: str = zfill
											ctx: Load 
										args: list 
											element: Name 
												id: str = ss
												ctx: Load 
											element: Num 
												n: int = 2
										keywords: list 
								keywords: list 
						element: If 
							test: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _days
								ctx: Load 
							body: list 
								element: FunctionDef 
									name: str = plural
									args: arguments 
										args: list 
											element: arg 
												arg: str = n
												annotation: NoneType = None
										vararg: NoneType = None
										kwonlyargs: list 
										kw_defaults: list 
										kwarg: NoneType = None
										defaults: list 
									body: list 
										element: Return 
											value: Tuple 
												elts: list 
													element: Name 
														id: str = n
														ctx: Load 
													element: BoolOp 
														op: Or 
														values: list 
															element: BoolOp 
																op: And 
																values: list 
																	element: Compare 
																		left: Call 
																			func: Name 
																				id: str = abs
																				ctx: Load 
																			args: list 
																				element: Name 
																					id: str = n
																					ctx: Load 
																			keywords: list 
																		ops: list 
																			element: NotEq 
																		comparators: list 
																			element: Num 
																				n: int = 1
																	element: Str 
																		s: str = s
															element: Str 
																s: str = 
												ctx: Load 
									decorator_list: list 
									returns: NoneType = None
								element: Assign 
									targets: list 
										element: Name 
											id: str = s
											ctx: Store 
									value: BinOp 
										left: Call 
											func: Attribute 
												value: Str 
													s: str = {} day{}, 
												attr: str = format
												ctx: Load 
											args: list 
												element: Call 
													func: Name 
														id: str = plural
														ctx: Load 
													args: list 
														element: Attribute 
															value: Name 
																id: str = self
																ctx: Load 
															attr: str = _days
															ctx: Load 
													keywords: list 
											keywords: list 
										op: Add 
										right: Name 
											id: str = s
											ctx: Load 
							orelse: list 
						element: If 
							test: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _microseconds
								ctx: Load 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = s
											ctx: Store 
									value: BinOp 
										left: Name 
											id: str = s
											ctx: Load 
										op: Add 
										right: Call 
											func: Attribute 
												value: Str 
													s: str = .{}
												attr: str = format
												ctx: Load 
											args: list 
												element: Call 
													func: Name 
														id: str = zfill
														ctx: Load 
													args: list 
														element: Attribute 
															value: Name 
																id: str = self
																ctx: Load 
															attr: str = _microseconds
															ctx: Load 
														element: Num 
															n: int = 6
													keywords: list 
											keywords: list 
							orelse: list 
						element: Return 
							value: Name 
								id: str = s
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = total_seconds
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Total seconds in the duration.
						element: Return 
							value: BinOp 
								left: BinOp 
									left: BinOp 
										left: BinOp 
											left: BinOp 
												left: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = days
													ctx: Load 
												op: Mult 
												right: Num 
													n: int = 86400
											op: Add 
											right: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = seconds
												ctx: Load 
										op: Mult 
										right: BinOp 
											left: Num 
												n: int = 10
											op: Pow 
											right: Num 
												n: int = 6
									op: Add 
									right: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = microseconds
										ctx: Load 
								op: Div 
								right: BinOp 
									left: Num 
										n: int = 10
									op: Pow 
									right: Num 
										n: int = 6
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = days
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = days
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _days
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = seconds
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = seconds
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _seconds
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = microseconds
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = microseconds
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _microseconds
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __add__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
											element: BinOp 
												left: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = _days
													ctx: Load 
												op: Add 
												right: Attribute 
													value: Name 
														id: str = other
														ctx: Load 
													attr: str = _days
													ctx: Load 
											element: BinOp 
												left: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = _seconds
													ctx: Load 
												op: Add 
												right: Attribute 
													value: Name 
														id: str = other
														ctx: Load 
													attr: str = _seconds
													ctx: Load 
											element: BinOp 
												left: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = _microseconds
													ctx: Load 
												op: Add 
												right: Attribute 
													value: Name 
														id: str = other
														ctx: Load 
													attr: str = _microseconds
													ctx: Load 
										keywords: list 
							orelse: list 
						element: Return 
							value: Name 
								id: str = NotImplemented
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __radd__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = __add__
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __sub__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
											element: BinOp 
												left: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = _days
													ctx: Load 
												op: Sub 
												right: Attribute 
													value: Name 
														id: str = other
														ctx: Load 
													attr: str = _days
													ctx: Load 
											element: BinOp 
												left: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = _seconds
													ctx: Load 
												op: Sub 
												right: Attribute 
													value: Name 
														id: str = other
														ctx: Load 
													attr: str = _seconds
													ctx: Load 
											element: BinOp 
												left: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = _microseconds
													ctx: Load 
												op: Sub 
												right: Attribute 
													value: Name 
														id: str = other
														ctx: Load 
													attr: str = _microseconds
													ctx: Load 
										keywords: list 
							orelse: list 
						element: Return 
							value: Name 
								id: str = NotImplemented
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __rsub__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: BinOp 
										left: UnaryOp 
											op: USub 
											operand: Name 
												id: str = self
												ctx: Load 
										op: Add 
										right: Name 
											id: str = other
											ctx: Load 
							orelse: list 
						element: Return 
							value: Name 
								id: str = NotImplemented
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __neg__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Call 
								func: Name 
									id: str = timedelta
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _days
											ctx: Load 
									element: UnaryOp 
										op: USub 
										operand: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _seconds
											ctx: Load 
									element: UnaryOp 
										op: USub 
										operand: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _microseconds
											ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __pos__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Name 
								id: str = self
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __abs__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _days
									ctx: Load 
								ops: list 
									element: Lt 
								comparators: list 
									element: Num 
										n: int = 0
							body: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = __pragma__
											ctx: Load 
										args: list 
											element: Str 
												s: str = opov
										keywords: list 
								element: Return 
									value: UnaryOp 
										op: USub 
										operand: Name 
											id: str = self
											ctx: Load 
								element: Expr 
									value: Call 
										func: Name 
											id: str = __pragma__
											ctx: Load 
										args: list 
											element: Str 
												s: str = noopov
										keywords: list 
							orelse: list 
								element: Return 
									value: Name 
										id: str = self
										ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __mul__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = int
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
											element: BinOp 
												left: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = _days
													ctx: Load 
												op: Mult 
												right: Name 
													id: str = other
													ctx: Load 
											element: BinOp 
												left: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = _seconds
													ctx: Load 
												op: Mult 
												right: Name 
													id: str = other
													ctx: Load 
											element: BinOp 
												left: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = _microseconds
													ctx: Load 
												op: Mult 
												right: Name 
													id: str = other
													ctx: Load 
										keywords: list 
							orelse: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = float
										ctx: Load 
								keywords: list 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = usec
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _to_microseconds
											ctx: Load 
										args: list 
										keywords: list 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = a
													ctx: Store 
												element: Name 
													id: str = b
													ctx: Store 
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = other
												ctx: Load 
											attr: str = as_integer_ratio
											ctx: Load 
										args: list 
										keywords: list 
								element: Return 
									value: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
											element: Num 
												n: int = 0
											element: Num 
												n: int = 0
											element: Call 
												func: Name 
													id: str = _divide_and_round
													ctx: Load 
												args: list 
													element: BinOp 
														left: Name 
															id: str = usec
															ctx: Load 
														op: Mult 
														right: Name 
															id: str = a
															ctx: Load 
													element: Name 
														id: str = b
														ctx: Load 
												keywords: list 
										keywords: list 
							orelse: list 
						element: Return 
							value: Name 
								id: str = NotImplemented
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __rmul__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = __mul__
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = _to_microseconds
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: BinOp 
								left: BinOp 
									left: BinOp 
										left: BinOp 
											left: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _days
												ctx: Load 
											op: Mult 
											right: BinOp 
												left: Num 
													n: int = 24
												op: Mult 
												right: Num 
													n: int = 3600
										op: Add 
										right: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _seconds
											ctx: Load 
									op: Mult 
									right: Num 
										n: int = 1000000
								op: Add 
								right: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _microseconds
									ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __floordiv__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: UnaryOp 
								op: Not 
								operand: Call 
									func: Name 
										id: str = isinstance
										ctx: Load 
									args: list 
										element: Name 
											id: str = other
											ctx: Load 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = int
													ctx: Load 
												element: Name 
													id: str = timedelta
													ctx: Load 
											ctx: Load 
									keywords: list 
							body: list 
								element: Return 
									value: Name 
										id: str = NotImplemented
										ctx: Load 
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = usec
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _to_microseconds
									ctx: Load 
								args: list 
								keywords: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: BinOp 
										left: Name 
											id: str = usec
											ctx: Load 
										op: FloorDiv 
										right: Call 
											func: Attribute 
												value: Name 
													id: str = other
													ctx: Load 
												attr: str = _to_microseconds
												ctx: Load 
											args: list 
											keywords: list 
							orelse: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = int
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
											element: Num 
												n: int = 0
											element: Num 
												n: int = 0
											element: BinOp 
												left: Name 
													id: str = usec
													ctx: Load 
												op: FloorDiv 
												right: Name 
													id: str = other
													ctx: Load 
										keywords: list 
							orelse: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __truediv__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: UnaryOp 
								op: Not 
								operand: Call 
									func: Name 
										id: str = isinstance
										ctx: Load 
									args: list 
										element: Name 
											id: str = other
											ctx: Load 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = int
													ctx: Load 
												element: Name 
													id: str = float
													ctx: Load 
												element: Name 
													id: str = timedelta
													ctx: Load 
											ctx: Load 
									keywords: list 
							body: list 
								element: Return 
									value: Name 
										id: str = NotImplemented
										ctx: Load 
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = usec
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _to_microseconds
									ctx: Load 
								args: list 
								keywords: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: BinOp 
										left: Name 
											id: str = usec
											ctx: Load 
										op: Div 
										right: Call 
											func: Attribute 
												value: Name 
													id: str = other
													ctx: Load 
												attr: str = _to_microseconds
												ctx: Load 
											args: list 
											keywords: list 
							orelse: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = int
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
											element: Num 
												n: int = 0
											element: Num 
												n: int = 0
											element: Call 
												func: Name 
													id: str = _divide_and_round
													ctx: Load 
												args: list 
													element: Name 
														id: str = usec
														ctx: Load 
													element: Name 
														id: str = other
														ctx: Load 
												keywords: list 
										keywords: list 
							orelse: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = float
										ctx: Load 
								keywords: list 
							body: list 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = a
													ctx: Store 
												element: Name 
													id: str = b
													ctx: Store 
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = other
												ctx: Load 
											attr: str = as_integer_ratio
											ctx: Load 
										args: list 
										keywords: list 
								element: Return 
									value: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
											element: Num 
												n: int = 0
											element: Num 
												n: int = 0
											element: Call 
												func: Name 
													id: str = _divide_and_round
													ctx: Load 
												args: list 
													element: BinOp 
														left: Name 
															id: str = b
															ctx: Load 
														op: Mult 
														right: Name 
															id: str = usec
															ctx: Load 
													element: Name 
														id: str = a
														ctx: Load 
												keywords: list 
										keywords: list 
							orelse: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __mod__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = r
											ctx: Store 
									value: BinOp 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _to_microseconds
												ctx: Load 
											args: list 
											keywords: list 
										op: Mod 
										right: Call 
											func: Attribute 
												value: Name 
													id: str = other
													ctx: Load 
												attr: str = _to_microseconds
												ctx: Load 
											args: list 
											keywords: list 
								element: Return 
									value: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
											element: Num 
												n: int = 0
											element: Num 
												n: int = 0
											element: Name 
												id: str = r
												ctx: Load 
										keywords: list 
							orelse: list 
						element: Return 
							value: Name 
								id: str = NotImplemented
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __divmod__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							body: list 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = q
													ctx: Store 
												element: Name 
													id: str = r
													ctx: Store 
											ctx: Store 
									value: Call 
										func: Name 
											id: str = divmod
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = _to_microseconds
													ctx: Load 
												args: list 
												keywords: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = other
														ctx: Load 
													attr: str = _to_microseconds
													ctx: Load 
												args: list 
												keywords: list 
										keywords: list 
								element: Return 
									value: Tuple 
										elts: list 
											element: Name 
												id: str = q
												ctx: Load 
											element: Call 
												func: Name 
													id: str = timedelta
													ctx: Load 
												args: list 
													element: Num 
														n: int = 0
													element: Num 
														n: int = 0
													element: Name 
														id: str = r
														ctx: Load 
												keywords: list 
										ctx: Load 
							orelse: list 
						element: Return 
							value: Name 
								id: str = NotImplemented
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __eq__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: Eq 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: Return 
									value: NameConstant 
										value: bool = False
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __le__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: LtE 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = _cmperror
											ctx: Load 
										args: list 
											element: Name 
												id: str = self
												ctx: Load 
											element: Name 
												id: str = other
												ctx: Load 
										keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __lt__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: Lt 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = _cmperror
											ctx: Load 
										args: list 
											element: Name 
												id: str = self
												ctx: Load 
											element: Name 
												id: str = other
												ctx: Load 
										keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __ge__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: GtE 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = _cmperror
											ctx: Load 
										args: list 
											element: Name 
												id: str = self
												ctx: Load 
											element: Name 
												id: str = other
												ctx: Load 
										keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __gt__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: Gt 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = _cmperror
											ctx: Load 
										args: list 
											element: Name 
												id: str = self
												ctx: Load 
											element: Name 
												id: str = other
												ctx: Load 
										keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = _cmp
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Assert 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							msg: NoneType = None
						element: Return 
							value: Call 
								func: Name 
									id: str = _cmp
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _to_microseconds
											ctx: Load 
										args: list 
										keywords: list 
									element: Call 
										func: Attribute 
											value: Name 
												id: str = other
												ctx: Load 
											attr: str = _to_microseconds
											ctx: Load 
										args: list 
										keywords: list 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __bool__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: BoolOp 
								op: Or 
								values: list 
									element: Compare 
										left: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _days
											ctx: Load 
										ops: list 
											element: NotEq 
										comparators: list 
											element: Num 
												n: int = 0
									element: Compare 
										left: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _seconds
											ctx: Load 
										ops: list 
											element: NotEq 
										comparators: list 
											element: Num 
												n: int = 0
									element: Compare 
										left: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _microseconds
											ctx: Load 
										ops: list 
											element: NotEq 
										comparators: list 
											element: Num 
												n: int = 0
					decorator_list: list 
					returns: NoneType = None
			decorator_list: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _td_min
					ctx: Store 
			value: Call 
				func: Name 
					id: str = timedelta
					ctx: Load 
				args: list 
					element: UnaryOp 
						op: USub 
						operand: Num 
							n: int = 999999999
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _td_max
					ctx: Store 
			value: Call 
				func: Name 
					id: str = timedelta
					ctx: Load 
				args: list 
				keywords: list 
					element: keyword 
						arg: str = days
						value: Num 
							n: int = 999999999
					element: keyword 
						arg: str = hours
						value: Num 
							n: int = 23
					element: keyword 
						arg: str = minutes
						value: Num 
							n: int = 59
					element: keyword 
						arg: str = seconds
						value: Num 
							n: int = 59
					element: keyword 
						arg: str = microseconds
						value: Num 
							n: int = 999999
		element: Assign 
			targets: list 
				element: Name 
					id: str = _td_resolution
					ctx: Store 
			value: Call 
				func: Name 
					id: str = timedelta
					ctx: Load 
				args: list 
				keywords: list 
					element: keyword 
						arg: str = microseconds
						value: Num 
							n: int = 1
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = js
					element: Str 
						s: str = {}
					element: Str 
						s: str = Object.defineProperty (timedelta, 'min', {get: function () {return _td_min;}})
				keywords: list 
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = js
					element: Str 
						s: str = {}
					element: Str 
						s: str = Object.defineProperty (timedelta, 'max', {get: function () {return _td_max;}})
				keywords: list 
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = js
					element: Str 
						s: str = {}
					element: Str 
						s: str = Object.defineProperty (timedelta, 'resolution', {get: function () {return _td_resolution;}})
				keywords: list 
		element: ClassDef 
			name: str = date
			bases: list 
			keywords: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = Concrete date type.

    Constructors:

    __new__()
    fromtimestamp()
    today()
    fromordinal()

    Operators:

    __repr__, __str__
    __eq__, __le__, __lt__, __ge__, __gt__,
    __add__, __radd__, __sub__ (add/radd only with timedelta arg)

    Methods:

    timetuple()
    toordinal()
    weekday()
    isoweekday(), isocalendar(), isoformat()
    ctime()
    strftime()

    Properties (readonly):
    year, month, day
    
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = kwargs
						keywords: list 
				element: FunctionDef 
					name: str = __init__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = year
								annotation: NoneType = None
							element: arg 
								arg: str = month
								annotation: NoneType = None
							element: arg 
								arg: str = day
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: NoneType = None
					body: list 
						element: Expr 
							value: Str 
								s: str = Constructor.

        Arguments:

        year, month, day (required, base 1)
        
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = year
											ctx: Store 
										element: Name 
											id: str = month
											ctx: Store 
										element: Name 
											id: str = day
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = _check_date_fields
									ctx: Load 
								args: list 
									element: Name 
										id: str = year
										ctx: Load 
									element: Name 
										id: str = month
										ctx: Load 
									element: Name 
										id: str = day
										ctx: Load 
								keywords: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _year
									ctx: Store 
							value: Name 
								id: str = year
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _month
									ctx: Store 
							value: Name 
								id: str = month
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _day
									ctx: Store 
							value: Name 
								id: str = day
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = nokwargs
						keywords: list 
				element: FunctionDef 
					name: str = fromtimestamp
					args: arguments 
						args: list 
							element: arg 
								arg: str = cls
								annotation: NoneType = None
							element: arg 
								arg: str = t
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Construct a date from a POSIX timestamp (like time.time()).
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = y
											ctx: Store 
										element: Name 
											id: str = m
											ctx: Store 
										element: Name 
											id: str = d
											ctx: Store 
										element: Name 
											id: str = hh
											ctx: Store 
										element: Name 
											id: str = mm
											ctx: Store 
										element: Name 
											id: str = ss
											ctx: Store 
										element: Name 
											id: str = weekday
											ctx: Store 
										element: Name 
											id: str = jday
											ctx: Store 
										element: Name 
											id: str = dst
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = _time
										ctx: Load 
									attr: str = localtime
									ctx: Load 
								args: list 
									element: Name 
										id: str = t
										ctx: Load 
								keywords: list 
						element: Return 
							value: Call 
								func: Name 
									id: str = cls
									ctx: Load 
								args: list 
									element: Name 
										id: str = y
										ctx: Load 
									element: Name 
										id: str = m
										ctx: Load 
									element: Name 
										id: str = d
										ctx: Load 
								keywords: list 
					decorator_list: list 
						element: Name 
							id: str = classmethod
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = today
					args: arguments 
						args: list 
							element: arg 
								arg: str = cls
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Construct a date from time.time().
						element: Assign 
							targets: list 
								element: Name 
									id: str = t
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = _time
										ctx: Load 
									attr: str = time
									ctx: Load 
								args: list 
								keywords: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = cls
										ctx: Load 
									attr: str = fromtimestamp
									ctx: Load 
								args: list 
									element: Name 
										id: str = t
										ctx: Load 
								keywords: list 
					decorator_list: list 
						element: Name 
							id: str = classmethod
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = fromordinal
					args: arguments 
						args: list 
							element: arg 
								arg: str = cls
								annotation: NoneType = None
							element: arg 
								arg: str = n
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Contruct a date from a proleptic Gregorian ordinal.

        January 1 of year 1 is day 1.  Only the year, month and day are
        non-zero in the result.
        
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = y
											ctx: Store 
										element: Name 
											id: str = m
											ctx: Store 
										element: Name 
											id: str = d
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = _ord2ymd
									ctx: Load 
								args: list 
									element: Name 
										id: str = n
										ctx: Load 
								keywords: list 
						element: Return 
							value: Call 
								func: Name 
									id: str = cls
									ctx: Load 
								args: list 
									element: Name 
										id: str = y
										ctx: Load 
									element: Name 
										id: str = m
										ctx: Load 
									element: Name 
										id: str = d
										ctx: Load 
								keywords: list 
					decorator_list: list 
						element: Name 
							id: str = classmethod
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __repr__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Convert to formal string, for repr().

        >>> dt = datetime(2010, 1, 1)
        >>> repr(dt)
        'datetime.datetime(2010, 1, 1, 0, 0)'

        >>> dt = datetime(2010, 1, 1, tzinfo=timezone.utc)
        >>> repr(dt)
        'datetime.datetime(2010, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)'
        
						element: Return 
							value: Call 
								func: Attribute 
									value: Str 
										s: str = datetime.date({}, {}, {})
									attr: str = format
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _year
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _month
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _day
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = ctime
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return ctime() style string.
						element: Assign 
							targets: list 
								element: Name 
									id: str = weekday
									ctx: Store 
							value: BoolOp 
								op: Or 
								values: list 
									element: BinOp 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = toordinal
												ctx: Load 
											args: list 
											keywords: list 
										op: Mod 
										right: Num 
											n: int = 7
									element: Num 
										n: int = 7
						element: Return 
							value: Call 
								func: Attribute 
									value: Str 
										s: str = {} {} {} 00:00:00 {}
									attr: str = format
									ctx: Load 
								args: list 
									element: Subscript 
										value: Name 
											id: str = _DAYNAMES
											ctx: Load 
										slice: Index 
											value: Name 
												id: str = weekday
												ctx: Load 
										ctx: Load 
									element: Subscript 
										value: Name 
											id: str = _MONTHNAMES
											ctx: Load 
										slice: Index 
											value: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _month
												ctx: Load 
										ctx: Load 
									element: Call 
										func: Name 
											id: str = rjust
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _day
												ctx: Load 
											element: Num 
												n: int = 2
										keywords: list 
									element: Call 
										func: Name 
											id: str = zfill
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _year
												ctx: Load 
											element: Num 
												n: int = 4
										keywords: list 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = strftime
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = fmt
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Format using strftime().
						element: Return 
							value: Call 
								func: Name 
									id: str = _wrap_strftime
									ctx: Load 
								args: list 
									element: Name 
										id: str = self
										ctx: Load 
									element: Name 
										id: str = fmt
										ctx: Load 
									element: Call 
										func: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = timetuple
											ctx: Load 
										args: list 
										keywords: list 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __format__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = fmt
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: UnaryOp 
								op: Not 
								operand: Call 
									func: Name 
										id: str = isinstance
										ctx: Load 
									args: list 
										element: Name 
											id: str = fmt
											ctx: Load 
										element: Name 
											id: str = str
											ctx: Load 
									keywords: list 
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = TypeError
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Str 
														s: str = must be str, not {}
													attr: str = format
													ctx: Load 
												args: list 
													element: Attribute 
														value: Call 
															func: Name 
																id: str = type
																ctx: Load 
															args: list 
																element: Name 
																	id: str = fmt
																	ctx: Load 
															keywords: list 
														attr: str = __name__
														ctx: Load 
												keywords: list 
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: If 
							test: Compare 
								left: Call 
									func: Name 
										id: str = len
										ctx: Load 
									args: list 
										element: Name 
											id: str = fmt
											ctx: Load 
									keywords: list 
								ops: list 
									element: NotEq 
								comparators: list 
									element: Num 
										n: int = 0
							body: list 
								element: Return 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = strftime
											ctx: Load 
										args: list 
											element: Name 
												id: str = fmt
												ctx: Load 
										keywords: list 
							orelse: list 
						element: Return 
							value: Call 
								func: Name 
									id: str = str
									ctx: Load 
								args: list 
									element: Name 
										id: str = self
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = isoformat
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return the date formatted according to ISO.

        This is 'YYYY-MM-DD'.

        References:
        - http://www.w3.org/TR/NOTE-datetime
        - http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        
						element: Return 
							value: Call 
								func: Attribute 
									value: Str 
										s: str = {}-{}-{}
									attr: str = format
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = zfill
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _year
												ctx: Load 
											element: Num 
												n: int = 4
										keywords: list 
									element: Call 
										func: Name 
											id: str = zfill
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _month
												ctx: Load 
											element: Num 
												n: int = 2
										keywords: list 
									element: Call 
										func: Name 
											id: str = zfill
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _day
												ctx: Load 
											element: Num 
												n: int = 2
										keywords: list 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __str__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = isoformat
									ctx: Load 
								args: list 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = year
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = year (1-9999)
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _year
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = month
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = month (1-12)
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _month
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = day
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = day (1-31)
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _day
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = timetuple
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return local time tuple compatible with time.localtime().
						element: Return 
							value: Call 
								func: Name 
									id: str = _build_struct_time
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _year
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _month
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _day
										ctx: Load 
									element: Num 
										n: int = 0
									element: Num 
										n: int = 0
									element: Num 
										n: int = 0
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: int = 1
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = toordinal
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return proleptic Gregorian ordinal for the year, month and day.

        January 1 of year 1 is day 1.  Only the year, month and day values
        contribute to the result.
        
						element: Return 
							value: Call 
								func: Name 
									id: str = _ymd2ord
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _year
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _month
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _day
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = kwargs
						keywords: list 
				element: FunctionDef 
					name: str = replace
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = year
								annotation: NoneType = None
							element: arg 
								arg: str = month
								annotation: NoneType = None
							element: arg 
								arg: str = day
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: NoneType = None
					body: list 
						element: Expr 
							value: Str 
								s: str = Return a new date with new values for the specified fields.
						element: If 
							test: Compare 
								left: Name 
									id: str = year
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = year
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _year
										ctx: Load 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = month
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = month
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _month
										ctx: Load 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = day
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = day
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _day
										ctx: Load 
							orelse: list 
						element: Return 
							value: Call 
								func: Name 
									id: str = date
									ctx: Load 
								args: list 
									element: Name 
										id: str = year
										ctx: Load 
									element: Name 
										id: str = month
										ctx: Load 
									element: Name 
										id: str = day
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = nokwargs
						keywords: list 
				element: FunctionDef 
					name: str = __eq__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = date
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: Eq 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
						element: Return 
							value: Name 
								id: str = NotImplemented
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __le__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = date
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: LtE 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
						element: Return 
							value: Name 
								id: str = NotImplemented
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __lt__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = date
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: Lt 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
						element: Return 
							value: Name 
								id: str = NotImplemented
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __ge__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = date
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: GtE 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
						element: Return 
							value: Name 
								id: str = NotImplemented
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __gt__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = date
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: Gt 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
						element: Return 
							value: Name 
								id: str = NotImplemented
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = _cmp
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Assert 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = date
										ctx: Load 
								keywords: list 
							msg: NoneType = None
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = y
											ctx: Store 
										element: Name 
											id: str = m
											ctx: Store 
										element: Name 
											id: str = d
											ctx: Store 
									ctx: Store 
							value: Tuple 
								elts: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _year
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _month
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _day
										ctx: Load 
								ctx: Load 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = y2
											ctx: Store 
										element: Name 
											id: str = m2
											ctx: Store 
										element: Name 
											id: str = d2
											ctx: Store 
									ctx: Store 
							value: Tuple 
								elts: list 
									element: Attribute 
										value: Name 
											id: str = other
											ctx: Load 
										attr: str = _year
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = other
											ctx: Load 
										attr: str = _month
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = other
											ctx: Load 
										attr: str = _day
										ctx: Load 
								ctx: Load 
						element: Return 
							value: Call 
								func: Name 
									id: str = _cmp
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Str 
												s: str = {}{}{}
											attr: str = format
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Name 
														id: str = y
														ctx: Load 
													element: Num 
														n: int = 4
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Name 
														id: str = m
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Name 
														id: str = d
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
										keywords: list 
									element: Call 
										func: Attribute 
											value: Str 
												s: str = {}{}{}
											attr: str = format
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Name 
														id: str = y2
														ctx: Load 
													element: Num 
														n: int = 4
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Name 
														id: str = m2
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Name 
														id: str = d2
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
										keywords: list 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __add__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Add a date to a timedelta.
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = o
											ctx: Store 
									value: BinOp 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = toordinal
												ctx: Load 
											args: list 
											keywords: list 
										op: Add 
										right: Attribute 
											value: Name 
												id: str = other
												ctx: Load 
											attr: str = days
											ctx: Load 
								element: If 
									test: Compare 
										left: Num 
											n: int = 0
										ops: list 
											element: Lt 
											element: LtE 
										comparators: list 
											element: Name 
												id: str = o
												ctx: Load 
											element: Name 
												id: str = _MAXORDINAL
												ctx: Load 
									body: list 
										element: Return 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = date
														ctx: Load 
													attr: str = fromordinal
													ctx: Load 
												args: list 
													element: Name 
														id: str = o
														ctx: Load 
												keywords: list 
									orelse: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = OverflowError
											ctx: Load 
										args: list 
											element: Str 
												s: str = result out of range
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: Return 
							value: Name 
								id: str = NotImplemented
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __radd__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = __add__
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __sub__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Subtract two dates, or a date and a timedelta.
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = timedelta
										ctx: Load 
								keywords: list 
							body: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = __pragma__
											ctx: Load 
										args: list 
											element: Str 
												s: str = opov
										keywords: list 
								element: Return 
									value: BinOp 
										left: Name 
											id: str = self
											ctx: Load 
										op: Add 
										right: Call 
											func: Name 
												id: str = timedelta
												ctx: Load 
											args: list 
												element: UnaryOp 
													op: USub 
													operand: Attribute 
														value: Name 
															id: str = other
															ctx: Load 
														attr: str = days
														ctx: Load 
											keywords: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = __pragma__
											ctx: Load 
										args: list 
											element: Str 
												s: str = noopov
										keywords: list 
							orelse: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = date
										ctx: Load 
								keywords: list 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = days1
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = toordinal
											ctx: Load 
										args: list 
										keywords: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = days2
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = other
												ctx: Load 
											attr: str = toordinal
											ctx: Load 
										args: list 
										keywords: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = __pragma__
											ctx: Load 
										args: list 
											element: Str 
												s: str = opov
										keywords: list 
								element: Return 
									value: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
											element: BinOp 
												left: Name 
													id: str = days1
													ctx: Load 
												op: Sub 
												right: Name 
													id: str = days2
													ctx: Load 
										keywords: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = __pragma__
											ctx: Load 
										args: list 
											element: Str 
												s: str = noopov
										keywords: list 
							orelse: list 
						element: Return 
							value: Name 
								id: str = NotImplemented
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = weekday
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return day of the week, where Monday == 0 ... Sunday == 6.
						element: Return 
							value: BinOp 
								left: BinOp 
									left: Call 
										func: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = toordinal
											ctx: Load 
										args: list 
										keywords: list 
									op: Add 
									right: Num 
										n: int = 6
								op: Mod 
								right: Num 
									n: int = 7
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = isoweekday
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return day of the week, where Monday == 1 ... Sunday == 7.
						element: Return 
							value: BoolOp 
								op: Or 
								values: list 
									element: BinOp 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = toordinal
												ctx: Load 
											args: list 
											keywords: list 
										op: Mod 
										right: Num 
											n: int = 7
									element: Num 
										n: int = 7
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = isocalendar
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return a 3-tuple containing ISO year, week number, and weekday.

        The first ISO week of the year is the (Mon-Sun) week
        containing the year's first Thursday; everything else derives
        from that.

        The first week is 1; Monday is 1 ... Sunday is 7.

        ISO calendar algorithm taken from
        http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm
        (used with permission)
        
						element: Assign 
							targets: list 
								element: Name 
									id: str = year
									ctx: Store 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _year
								ctx: Load 
						element: Assign 
							targets: list 
								element: Name 
									id: str = week1monday
									ctx: Store 
							value: Call 
								func: Name 
									id: str = _isoweek1monday
									ctx: Load 
								args: list 
									element: Name 
										id: str = year
										ctx: Load 
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = today
									ctx: Store 
							value: Call 
								func: Name 
									id: str = _ymd2ord
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _year
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _month
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _day
										ctx: Load 
								keywords: list 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = week
											ctx: Store 
										element: Name 
											id: str = day
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = divmod
									ctx: Load 
								args: list 
									element: BinOp 
										left: Name 
											id: str = today
											ctx: Load 
										op: Sub 
										right: Name 
											id: str = week1monday
											ctx: Load 
									element: Num 
										n: int = 7
								keywords: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = week
									ctx: Load 
								ops: list 
									element: Lt 
								comparators: list 
									element: Num 
										n: int = 0
							body: list 
								element: AugAssign 
									target: Name 
										id: str = year
										ctx: Store 
									op: Sub 
									value: Num 
										n: int = 1
								element: Assign 
									targets: list 
										element: Name 
											id: str = week1monday
											ctx: Store 
									value: Call 
										func: Name 
											id: str = _isoweek1monday
											ctx: Load 
										args: list 
											element: Name 
												id: str = year
												ctx: Load 
										keywords: list 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = week
													ctx: Store 
												element: Name 
													id: str = day
													ctx: Store 
											ctx: Store 
									value: Call 
										func: Name 
											id: str = divmod
											ctx: Load 
										args: list 
											element: BinOp 
												left: Name 
													id: str = today
													ctx: Load 
												op: Sub 
												right: Name 
													id: str = week1monday
													ctx: Load 
											element: Num 
												n: int = 7
										keywords: list 
							orelse: list 
								element: If 
									test: Compare 
										left: Name 
											id: str = week
											ctx: Load 
										ops: list 
											element: GtE 
										comparators: list 
											element: Num 
												n: int = 52
									body: list 
										element: If 
											test: Compare 
												left: Name 
													id: str = today
													ctx: Load 
												ops: list 
													element: GtE 
												comparators: list 
													element: Call 
														func: Name 
															id: str = _isoweek1monday
															ctx: Load 
														args: list 
															element: BinOp 
																left: Name 
																	id: str = year
																	ctx: Load 
																op: Add 
																right: Num 
																	n: int = 1
														keywords: list 
											body: list 
												element: AugAssign 
													target: Name 
														id: str = year
														ctx: Store 
													op: Add 
													value: Num 
														n: int = 1
												element: Assign 
													targets: list 
														element: Name 
															id: str = week
															ctx: Store 
													value: Num 
														n: int = 0
											orelse: list 
									orelse: list 
						element: Return 
							value: Tuple 
								elts: list 
									element: Name 
										id: str = year
										ctx: Load 
									element: BinOp 
										left: Name 
											id: str = week
											ctx: Load 
										op: Add 
										right: Num 
											n: int = 1
									element: BinOp 
										left: Name 
											id: str = day
											ctx: Load 
										op: Add 
										right: Num 
											n: int = 1
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: Assign 
					targets: list 
						element: Name 
							id: str = resolution
							ctx: Store 
					value: Call 
						func: Name 
							id: str = timedelta
							ctx: Load 
						args: list 
						keywords: list 
							element: keyword 
								arg: str = days
								value: Num 
									n: int = 1
			decorator_list: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _date_class
					ctx: Store 
			value: Name 
				id: str = date
				ctx: Load 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _d_min
					ctx: Store 
			value: Call 
				func: Name 
					id: str = date
					ctx: Load 
				args: list 
					element: Num 
						n: int = 1
					element: Num 
						n: int = 1
					element: Num 
						n: int = 1
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _d_max
					ctx: Store 
			value: Call 
				func: Name 
					id: str = date
					ctx: Load 
				args: list 
					element: Num 
						n: int = 9999
					element: Num 
						n: int = 12
					element: Num 
						n: int = 31
				keywords: list 
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = js
					element: Str 
						s: str = {}
					element: Str 
						s: str = Object.defineProperty (date, 'min', {get: function () {return _d_min;}})
				keywords: list 
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = js
					element: Str 
						s: str = {}
					element: Str 
						s: str = Object.defineProperty (date, 'max', {get: function () {return _d_max;}})
				keywords: list 
		element: ClassDef 
			name: str = tzinfo
			bases: list 
			keywords: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = Abstract base class for time zone info classes.

    Subclasses must override the name(), utcoffset() and dst() methods.
    
				element: FunctionDef 
					name: str = tzname
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = dt
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = datetime -> string name of time zone.
						element: Raise 
							exc: Call 
								func: Name 
									id: str = NotImplementedError
									ctx: Load 
								args: list 
									element: Str 
										s: str = tzinfo subclass must override tzname()
								keywords: list 
							cause: NoneType = None
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = utcoffset
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = dt
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = datetime -> minutes east of UTC (negative for west of UTC)
						element: Raise 
							exc: Call 
								func: Name 
									id: str = NotImplementedError
									ctx: Load 
								args: list 
									element: Str 
										s: str = tzinfo subclass must override utcoffset()
								keywords: list 
							cause: NoneType = None
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = dst
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = dt
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = datetime -> DST offset in minutes east of UTC.

        Return 0 if DST not in effect.  utcoffset() must include the DST
        offset.
        
						element: Raise 
							exc: Call 
								func: Name 
									id: str = NotImplementedError
									ctx: Load 
								args: list 
									element: Str 
										s: str = tzinfo subclass must override dst()
								keywords: list 
							cause: NoneType = None
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = fromutc
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = dt
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = datetime in UTC -> datetime in local time.
						element: If 
							test: UnaryOp 
								op: Not 
								operand: Call 
									func: Name 
										id: str = isinstance
										ctx: Load 
									args: list 
										element: Name 
											id: str = dt
											ctx: Load 
										element: Name 
											id: str = datetime
											ctx: Load 
									keywords: list 
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = TypeError
											ctx: Load 
										args: list 
											element: Str 
												s: str = fromutc() requires a datetime argument
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = dt
										ctx: Load 
									attr: str = tzinfo
									ctx: Load 
								ops: list 
									element: IsNot 
								comparators: list 
									element: Name 
										id: str = self
										ctx: Load 
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = ValueError
											ctx: Load 
										args: list 
											element: Str 
												s: str = dt.tzinfo is not self
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = dtoff
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = dt
										ctx: Load 
									attr: str = utcoffset
									ctx: Load 
								args: list 
								keywords: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = dtoff
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = ValueError
											ctx: Load 
										args: list 
											element: Str 
												s: str = fromutc() requires a non-None utcoffset() result
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = dtdst
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = dt
										ctx: Load 
									attr: str = dst
									ctx: Load 
								args: list 
								keywords: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = dtdst
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = ValueError
											ctx: Load 
										args: list 
											element: Str 
												s: str = fromutc() requires a non-None dst() result
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = delta
									ctx: Store 
							value: BinOp 
								left: Name 
									id: str = dtoff
									ctx: Load 
								op: Sub 
								right: Name 
									id: str = dtdst
									ctx: Load 
						element: If 
							test: Name 
								id: str = delta
								ctx: Load 
							body: list 
								element: AugAssign 
									target: Name 
										id: str = dt
										ctx: Store 
									op: Add 
									value: Name 
										id: str = delta
										ctx: Load 
								element: Assign 
									targets: list 
										element: Name 
											id: str = dtdst
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = dt
												ctx: Load 
											attr: str = dst
											ctx: Load 
										args: list 
										keywords: list 
								element: If 
									test: Compare 
										left: Name 
											id: str = dtdst
											ctx: Load 
										ops: list 
											element: Is 
										comparators: list 
											element: NameConstant 
												value: NoneType = None
									body: list 
										element: Raise 
											exc: Call 
												func: Name 
													id: str = ValueError
													ctx: Load 
												args: list 
													element: Str 
														s: str = fromutc(): dt.dst gave inconsistent results; cannot convert
												keywords: list 
											cause: NoneType = None
									orelse: list 
							orelse: list 
						element: Return 
							value: BinOp 
								left: Name 
									id: str = dt
									ctx: Load 
								op: Add 
								right: Name 
									id: str = dtdst
									ctx: Load 
					decorator_list: list 
					returns: NoneType = None
			decorator_list: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _tzinfo_class
					ctx: Store 
			value: Name 
				id: str = tzinfo
				ctx: Load 
		element: ClassDef 
			name: str = time
			bases: list 
			keywords: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = Time with time zone.

    Constructors:

    __new__()

    Operators:

    __repr__, __str__
    __eq__, __le__, __lt__, __ge__, __gt__,

    Methods:

    strftime()
    isoformat()
    utcoffset()
    tzname()
    dst()

    Properties (readonly):
    hour, minute, second, microsecond, tzinfo
    
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = kwargs
						keywords: list 
				element: FunctionDef 
					name: str = __init__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = hour
								annotation: NoneType = None
							element: arg 
								arg: str = minute
								annotation: NoneType = None
							element: arg 
								arg: str = second
								annotation: NoneType = None
							element: arg 
								arg: str = microsecond
								annotation: NoneType = None
							element: arg 
								arg: str = tzinfo
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
							element: NameConstant 
								value: NoneType = None
					body: list 
						element: Expr 
							value: Str 
								s: str = Constructor.

        Arguments:

        hour, minute (required)
        second, microsecond (default to zero)
        tzinfo (default to None)
        
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = hour
											ctx: Store 
										element: Name 
											id: str = minute
											ctx: Store 
										element: Name 
											id: str = second
											ctx: Store 
										element: Name 
											id: str = microsecond
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = _check_time_fields
									ctx: Load 
								args: list 
									element: Name 
										id: str = hour
										ctx: Load 
									element: Name 
										id: str = minute
										ctx: Load 
									element: Name 
										id: str = second
										ctx: Load 
									element: Name 
										id: str = microsecond
										ctx: Load 
								keywords: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = _check_tzinfo_arg
									ctx: Load 
								args: list 
									element: Name 
										id: str = tzinfo
										ctx: Load 
								keywords: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _hour
									ctx: Store 
							value: Name 
								id: str = hour
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _minute
									ctx: Store 
							value: Name 
								id: str = minute
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _second
									ctx: Store 
							value: Name 
								id: str = second
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _microsecond
									ctx: Store 
							value: Name 
								id: str = microsecond
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _tzinfo
									ctx: Store 
							value: Name 
								id: str = tzinfo
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = nokwargs
						keywords: list 
				element: FunctionDef 
					name: str = hour
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = hour (0-23)
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _hour
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = minute
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = minute (0-59)
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _minute
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = second
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = second (0-59)
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _second
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = microsecond
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = microsecond (0-999999)
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _microsecond
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = tzinfo
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = timezone info object
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _tzinfo
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __eq__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = time
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
												element: keyword 
													arg: str = allow_mixed
													value: NameConstant 
														value: bool = True
										ops: list 
											element: Eq 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: Return 
									value: NameConstant 
										value: bool = False
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __le__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = time
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: LtE 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = _cmperror
											ctx: Load 
										args: list 
											element: Name 
												id: str = self
												ctx: Load 
											element: Name 
												id: str = other
												ctx: Load 
										keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __lt__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = time
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: Lt 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = _cmperror
											ctx: Load 
										args: list 
											element: Name 
												id: str = self
												ctx: Load 
											element: Name 
												id: str = other
												ctx: Load 
										keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __ge__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = time
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: GtE 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = _cmperror
											ctx: Load 
										args: list 
											element: Name 
												id: str = self
												ctx: Load 
											element: Name 
												id: str = other
												ctx: Load 
										keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __gt__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = time
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: Gt 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = _cmperror
											ctx: Load 
										args: list 
											element: Name 
												id: str = self
												ctx: Load 
											element: Name 
												id: str = other
												ctx: Load 
										keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = kwargs
						keywords: list 
				element: FunctionDef 
					name: str = _cmp
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
							element: arg 
								arg: str = allow_mixed
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: NameConstant 
								value: bool = False
					body: list 
						element: Assert 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = time
										ctx: Load 
								keywords: list 
							msg: NoneType = None
						element: Assign 
							targets: list 
								element: Name 
									id: str = mytz
									ctx: Store 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _tzinfo
								ctx: Load 
						element: Assign 
							targets: list 
								element: Name 
									id: str = ottz
									ctx: Store 
							value: Attribute 
								value: Name 
									id: str = other
									ctx: Load 
								attr: str = _tzinfo
								ctx: Load 
						element: Assign 
							targets: list 
								element: Name 
									id: str = myoff
									ctx: Store 
								element: Name 
									id: str = otoff
									ctx: Store 
							value: NameConstant 
								value: NoneType = None
						element: If 
							test: Compare 
								left: Name 
									id: str = mytz
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: Name 
										id: str = ottz
										ctx: Load 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = base_compare
											ctx: Store 
									value: NameConstant 
										value: bool = True
							orelse: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = myoff
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = utcoffset
											ctx: Load 
										args: list 
										keywords: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = otoff
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = other
												ctx: Load 
											attr: str = utcoffset
											ctx: Load 
										args: list 
										keywords: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = base_compare
											ctx: Store 
									value: Compare 
										left: Name 
											id: str = myoff
											ctx: Load 
										ops: list 
											element: Eq 
										comparators: list 
											element: Name 
												id: str = otoff
												ctx: Load 
						element: If 
							test: Name 
								id: str = base_compare
								ctx: Load 
							body: list 
								element: Return 
									value: Call 
										func: Name 
											id: str = _cmp
											ctx: Load 
										args: list 
											element: Tuple 
												elts: list 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = _hour
														ctx: Load 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = _minute
														ctx: Load 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = _second
														ctx: Load 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = _microsecond
														ctx: Load 
												ctx: Load 
											element: Tuple 
												elts: list 
													element: Attribute 
														value: Name 
															id: str = other
															ctx: Load 
														attr: str = _hour
														ctx: Load 
													element: Attribute 
														value: Name 
															id: str = other
															ctx: Load 
														attr: str = _minute
														ctx: Load 
													element: Attribute 
														value: Name 
															id: str = other
															ctx: Load 
														attr: str = _second
														ctx: Load 
													element: Attribute 
														value: Name 
															id: str = other
															ctx: Load 
														attr: str = _microsecond
														ctx: Load 
												ctx: Load 
										keywords: list 
							orelse: list 
						element: If 
							test: BoolOp 
								op: Or 
								values: list 
									element: Compare 
										left: Name 
											id: str = myoff
											ctx: Load 
										ops: list 
											element: Is 
										comparators: list 
											element: NameConstant 
												value: NoneType = None
									element: Compare 
										left: Name 
											id: str = otoff
											ctx: Load 
										ops: list 
											element: Is 
										comparators: list 
											element: NameConstant 
												value: NoneType = None
							body: list 
								element: If 
									test: Name 
										id: str = allow_mixed
										ctx: Load 
									body: list 
										element: Return 
											value: Num 
												n: int = 2
									orelse: list 
										element: Raise 
											exc: Call 
												func: Name 
													id: str = TypeError
													ctx: Load 
												args: list 
													element: Str 
														s: str = cannot compare naive and aware times
												keywords: list 
											cause: NoneType = None
							orelse: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = opov
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = myhhmm
									ctx: Store 
							value: BinOp 
								left: BinOp 
									left: BinOp 
										left: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _hour
											ctx: Load 
										op: Mult 
										right: Num 
											n: int = 60
									op: Add 
									right: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _minute
										ctx: Load 
								op: Sub 
								right: BinOp 
									left: Name 
										id: str = myoff
										ctx: Load 
									op: FloorDiv 
									right: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
										keywords: list 
											element: keyword 
												arg: str = minutes
												value: Num 
													n: int = 1
						element: Assign 
							targets: list 
								element: Name 
									id: str = othhmm
									ctx: Store 
							value: BinOp 
								left: BinOp 
									left: BinOp 
										left: Attribute 
											value: Name 
												id: str = other
												ctx: Load 
											attr: str = _hour
											ctx: Load 
										op: Mult 
										right: Num 
											n: int = 60
									op: Add 
									right: Attribute 
										value: Name 
											id: str = other
											ctx: Load 
										attr: str = _minute
										ctx: Load 
								op: Sub 
								right: BinOp 
									left: Name 
										id: str = otoff
										ctx: Load 
									op: FloorDiv 
									right: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
										keywords: list 
											element: keyword 
												arg: str = minutes
												value: Num 
													n: int = 1
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = noopov
								keywords: list 
						element: Return 
							value: Call 
								func: Name 
									id: str = _cmp
									ctx: Load 
								args: list 
									element: Tuple 
										elts: list 
											element: Name 
												id: str = myhhmm
												ctx: Load 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _second
												ctx: Load 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _microsecond
												ctx: Load 
										ctx: Load 
									element: Tuple 
										elts: list 
											element: Name 
												id: str = othhmm
												ctx: Load 
											element: Attribute 
												value: Name 
													id: str = other
													ctx: Load 
												attr: str = _second
												ctx: Load 
											element: Attribute 
												value: Name 
													id: str = other
													ctx: Load 
												attr: str = _microsecond
												ctx: Load 
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = nokwargs
						keywords: list 
				element: FunctionDef 
					name: str = _tzstr
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = sep
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: Str 
								s: str = :
					body: list 
						element: Expr 
							value: Str 
								s: str = Return formatted timezone offset (+xx:xx) or None.
						element: Assign 
							targets: list 
								element: Name 
									id: str = off
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = utcoffset
									ctx: Load 
								args: list 
								keywords: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = off
									ctx: Load 
								ops: list 
									element: IsNot 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: If 
									test: Compare 
										left: Attribute 
											value: Name 
												id: str = off
												ctx: Load 
											attr: str = days
											ctx: Load 
										ops: list 
											element: Lt 
										comparators: list 
											element: Num 
												n: int = 0
									body: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = sign
													ctx: Store 
											value: Str 
												s: str = -
										element: Assign 
											targets: list 
												element: Name 
													id: str = off
													ctx: Store 
											value: UnaryOp 
												op: USub 
												operand: Name 
													id: str = off
													ctx: Load 
									orelse: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = sign
													ctx: Store 
											value: Str 
												s: str = +
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = hh
													ctx: Store 
												element: Name 
													id: str = mm
													ctx: Store 
											ctx: Store 
									value: Call 
										func: Name 
											id: str = divmod
											ctx: Load 
										args: list 
											element: Name 
												id: str = off
												ctx: Load 
											element: Call 
												func: Name 
													id: str = timedelta
													ctx: Load 
												args: list 
												keywords: list 
													element: keyword 
														arg: str = hours
														value: Num 
															n: int = 1
										keywords: list 
								element: Assert 
									test: UnaryOp 
										op: Not 
										operand: BinOp 
											left: Name 
												id: str = mm
												ctx: Load 
											op: Mod 
											right: Call 
												func: Name 
													id: str = timedelta
													ctx: Load 
												args: list 
												keywords: list 
													element: keyword 
														arg: str = minutes
														value: Num 
															n: int = 1
									msg: Str 
										s: str = whole minute
								element: AugAssign 
									target: Name 
										id: str = mm
										ctx: Store 
									op: FloorDiv 
									value: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
										keywords: list 
											element: keyword 
												arg: str = minutes
												value: Num 
													n: int = 1
								element: Assert 
									test: Compare 
										left: Num 
											n: int = 0
										ops: list 
											element: LtE 
											element: Lt 
										comparators: list 
											element: Name 
												id: str = hh
												ctx: Load 
											element: Num 
												n: int = 24
									msg: NoneType = None
								element: Assign 
									targets: list 
										element: Name 
											id: str = off
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Str 
												s: str = {}{}{}{}
											attr: str = format
											ctx: Load 
										args: list 
											element: Name 
												id: str = sign
												ctx: Load 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Name 
														id: str = hh
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
											element: Name 
												id: str = sep
												ctx: Load 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Name 
														id: str = mm
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
										keywords: list 
							orelse: list 
						element: Return 
							value: Name 
								id: str = off
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __repr__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Convert to formal string, for repr().
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _microsecond
									ctx: Load 
								ops: list 
									element: NotEq 
								comparators: list 
									element: Num 
										n: int = 0
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = s
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Str 
												s: str = , {}, {}
											attr: str = format
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _second
												ctx: Load 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _microsecond
												ctx: Load 
										keywords: list 
							orelse: list 
								element: If 
									test: Compare 
										left: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _second
											ctx: Load 
										ops: list 
											element: NotEq 
										comparators: list 
											element: Num 
												n: int = 0
									body: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = s
													ctx: Store 
											value: Call 
												func: Attribute 
													value: Str 
														s: str = , {}
													attr: str = format
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = _second
														ctx: Load 
												keywords: list 
									orelse: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = s
													ctx: Store 
											value: Str 
												s: str = 
						element: Assign 
							targets: list 
								element: Name 
									id: str = s
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Str 
										s: str = datetime.time({}, {}{})
									attr: str = format
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _hour
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _minute
										ctx: Load 
									element: Name 
										id: str = s
										ctx: Load 
								keywords: list 
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _tzinfo
									ctx: Load 
								ops: list 
									element: IsNot 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assert 
									test: Compare 
										left: Subscript 
											value: Name 
												id: str = s
												ctx: Load 
											slice: Slice 
												lower: UnaryOp 
													op: USub 
													operand: Num 
														n: int = 1
												upper: NoneType = None
												step: NoneType = None
											ctx: Load 
										ops: list 
											element: Eq 
										comparators: list 
											element: Str 
												s: str = )
									msg: NoneType = None
								element: Assign 
									targets: list 
										element: Name 
											id: str = s
											ctx: Store 
									value: BinOp 
										left: BinOp 
											left: Subscript 
												value: Name 
													id: str = s
													ctx: Load 
												slice: Slice 
													lower: NoneType = None
													upper: BinOp 
														left: Call 
															func: Name 
																id: str = len
																ctx: Load 
															args: list 
																element: Name 
																	id: str = s
																	ctx: Load 
															keywords: list 
														op: Sub 
														right: Num 
															n: int = 1
													step: NoneType = None
												ctx: Load 
											op: Add 
											right: Call 
												func: Attribute 
													value: Str 
														s: str = , tzinfo={}
													attr: str = format
													ctx: Load 
												args: list 
													element: Call 
														func: Attribute 
															value: Attribute 
																value: Name 
																	id: str = self
																	ctx: Load 
																attr: str = _tzinfo
																ctx: Load 
															attr: str = __repr__
															ctx: Load 
														args: list 
														keywords: list 
												keywords: list 
										op: Add 
										right: Str 
											s: str = )
							orelse: list 
						element: Return 
							value: Name 
								id: str = s
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = isoformat
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return the time formatted according to ISO.

        This is 'HH:MM:SS.mmmmmm+zz:zz', or 'HH:MM:SS+zz:zz' if
        self.microsecond == 0.
        
						element: Assign 
							targets: list 
								element: Name 
									id: str = s
									ctx: Store 
							value: Call 
								func: Name 
									id: str = _format_time
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _hour
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _minute
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _second
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _microsecond
										ctx: Load 
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = tz
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _tzstr
									ctx: Load 
								args: list 
								keywords: list 
						element: If 
							test: Name 
								id: str = tz
								ctx: Load 
							body: list 
								element: AugAssign 
									target: Name 
										id: str = s
										ctx: Store 
									op: Add 
									value: Name 
										id: str = tz
										ctx: Load 
							orelse: list 
						element: Return 
							value: Name 
								id: str = s
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __str__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = isoformat
									ctx: Load 
								args: list 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = strftime
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = fmt
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Format using strftime().  The date part of the timestamp passed
        to underlying strftime should not be used.
        
						element: Assign 
							targets: list 
								element: Name 
									id: str = timetuple
									ctx: Store 
							value: Tuple 
								elts: list 
									element: Num 
										n: int = 1900
									element: Num 
										n: int = 1
									element: Num 
										n: int = 1
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _hour
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _minute
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _second
										ctx: Load 
									element: Num 
										n: int = 0
									element: Num 
										n: int = 1
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: int = 1
								ctx: Load 
						element: Return 
							value: Call 
								func: Name 
									id: str = _wrap_strftime
									ctx: Load 
								args: list 
									element: Name 
										id: str = self
										ctx: Load 
									element: Name 
										id: str = fmt
										ctx: Load 
									element: Name 
										id: str = timetuple
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __format__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = fmt
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: UnaryOp 
								op: Not 
								operand: Call 
									func: Name 
										id: str = isinstance
										ctx: Load 
									args: list 
										element: Name 
											id: str = fmt
											ctx: Load 
										element: Name 
											id: str = str
											ctx: Load 
									keywords: list 
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = TypeError
											ctx: Load 
										args: list 
											element: BinOp 
												left: Str 
													s: str = must be str, not %s
												op: Mod 
												right: Attribute 
													value: Call 
														func: Name 
															id: str = type
															ctx: Load 
														args: list 
															element: Name 
																id: str = fmt
																ctx: Load 
														keywords: list 
													attr: str = __name__
													ctx: Load 
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: If 
							test: Compare 
								left: Call 
									func: Name 
										id: str = len
										ctx: Load 
									args: list 
										element: Name 
											id: str = fmt
											ctx: Load 
									keywords: list 
								ops: list 
									element: NotEq 
								comparators: list 
									element: Num 
										n: int = 0
							body: list 
								element: Return 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = strftime
											ctx: Load 
										args: list 
											element: Name 
												id: str = fmt
												ctx: Load 
										keywords: list 
							orelse: list 
						element: Return 
							value: Call 
								func: Name 
									id: str = str
									ctx: Load 
								args: list 
									element: Name 
										id: str = self
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = utcoffset
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return the timezone offset in minutes east of UTC (negative west of
        UTC).
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _tzinfo
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Return 
									value: NameConstant 
										value: NoneType = None
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = offset
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _tzinfo
										ctx: Load 
									attr: str = utcoffset
									ctx: Load 
								args: list 
									element: NameConstant 
										value: NoneType = None
								keywords: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = _check_utc_offset
									ctx: Load 
								args: list 
									element: Str 
										s: str = utcoffset
									element: Name 
										id: str = offset
										ctx: Load 
								keywords: list 
						element: Return 
							value: Name 
								id: str = offset
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = tzname
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return the timezone name.

        Note that the name is 100% informational -- there's no requirement that
        it mean anything in particular. For example, "GMT", "UTC", "-500",
        "-5:00", "EDT", "US/Eastern", "America/New York" are all valid replies.
        
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _tzinfo
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Return 
									value: NameConstant 
										value: NoneType = None
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = name
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _tzinfo
										ctx: Load 
									attr: str = tzname
									ctx: Load 
								args: list 
									element: NameConstant 
										value: NoneType = None
								keywords: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = _check_tzname
									ctx: Load 
								args: list 
									element: Name 
										id: str = name
										ctx: Load 
								keywords: list 
						element: Return 
							value: Name 
								id: str = name
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = dst
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return 0 if DST is not in effect, or the DST offset (in minutes
        eastward) if DST is in effect.

        This is purely informational; the DST offset has already been added to
        the UTC offset returned by utcoffset() if applicable, so there's no
        need to consult dst() unless you're interested in displaying the DST
        info.
        
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _tzinfo
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Return 
									value: NameConstant 
										value: NoneType = None
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = offset
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _tzinfo
										ctx: Load 
									attr: str = dst
									ctx: Load 
								args: list 
									element: NameConstant 
										value: NoneType = None
								keywords: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = _check_utc_offset
									ctx: Load 
								args: list 
									element: Str 
										s: str = dst
									element: Name 
										id: str = offset
										ctx: Load 
								keywords: list 
						element: Return 
							value: Name 
								id: str = offset
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = kwargs
						keywords: list 
				element: FunctionDef 
					name: str = replace
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = hour
								annotation: NoneType = None
							element: arg 
								arg: str = minute
								annotation: NoneType = None
							element: arg 
								arg: str = second
								annotation: NoneType = None
							element: arg 
								arg: str = microsecond
								annotation: NoneType = None
							element: arg 
								arg: str = tzinfo
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: bool = True
					body: list 
						element: Expr 
							value: Str 
								s: str = Return a new time with new values for the specified fields.
						element: If 
							test: Compare 
								left: Name 
									id: str = hour
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = hour
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = hour
										ctx: Load 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = minute
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = minute
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = minute
										ctx: Load 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = second
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = second
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = second
										ctx: Load 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = microsecond
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = microsecond
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = microsecond
										ctx: Load 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = tzinfo
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: bool = True
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = tzinfo
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = tzinfo
										ctx: Load 
							orelse: list 
						element: Return 
							value: Call 
								func: Name 
									id: str = time
									ctx: Load 
								args: list 
									element: Name 
										id: str = hour
										ctx: Load 
									element: Name 
										id: str = minute
										ctx: Load 
									element: Name 
										id: str = second
										ctx: Load 
									element: Name 
										id: str = microsecond
										ctx: Load 
									element: Name 
										id: str = tzinfo
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = nokwargs
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = resolution
							ctx: Store 
					value: Call 
						func: Name 
							id: str = timedelta
							ctx: Load 
						args: list 
						keywords: list 
							element: keyword 
								arg: str = microseconds
								value: Num 
									n: int = 1
			decorator_list: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _time_class
					ctx: Store 
			value: Name 
				id: str = time
				ctx: Load 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _tm_min
					ctx: Store 
			value: Call 
				func: Name 
					id: str = time
					ctx: Load 
				args: list 
					element: Num 
						n: int = 0
					element: Num 
						n: int = 0
					element: Num 
						n: int = 0
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _tm_max
					ctx: Store 
			value: Call 
				func: Name 
					id: str = time
					ctx: Load 
				args: list 
					element: Num 
						n: int = 23
					element: Num 
						n: int = 59
					element: Num 
						n: int = 59
					element: Num 
						n: int = 999999
				keywords: list 
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = js
					element: Str 
						s: str = {}
					element: Str 
						s: str = Object.defineProperty (time, 'min', {get: function () {return _tm_min;}})
				keywords: list 
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = js
					element: Str 
						s: str = {}
					element: Str 
						s: str = Object.defineProperty (time, 'max', {get: function () {return _tm_max;}})
				keywords: list 
		element: ClassDef 
			name: str = datetime
			bases: list 
				element: Name 
					id: str = date
					ctx: Load 
			keywords: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
    
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = kwargs
						keywords: list 
				element: FunctionDef 
					name: str = __init__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = year
								annotation: NoneType = None
							element: arg 
								arg: str = month
								annotation: NoneType = None
							element: arg 
								arg: str = day
								annotation: NoneType = None
							element: arg 
								arg: str = hour
								annotation: NoneType = None
							element: arg 
								arg: str = minute
								annotation: NoneType = None
							element: arg 
								arg: str = second
								annotation: NoneType = None
							element: arg 
								arg: str = microsecond
								annotation: NoneType = None
							element: arg 
								arg: str = tzinfo
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: NoneType = None
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
							element: NameConstant 
								value: NoneType = None
					body: list 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = year
											ctx: Store 
										element: Name 
											id: str = month
											ctx: Store 
										element: Name 
											id: str = day
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = _check_date_fields
									ctx: Load 
								args: list 
									element: Name 
										id: str = year
										ctx: Load 
									element: Name 
										id: str = month
										ctx: Load 
									element: Name 
										id: str = day
										ctx: Load 
								keywords: list 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = hour
											ctx: Store 
										element: Name 
											id: str = minute
											ctx: Store 
										element: Name 
											id: str = second
											ctx: Store 
										element: Name 
											id: str = microsecond
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = _check_time_fields
									ctx: Load 
								args: list 
									element: Name 
										id: str = hour
										ctx: Load 
									element: Name 
										id: str = minute
										ctx: Load 
									element: Name 
										id: str = second
										ctx: Load 
									element: Name 
										id: str = microsecond
										ctx: Load 
								keywords: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = _check_tzinfo_arg
									ctx: Load 
								args: list 
									element: Name 
										id: str = tzinfo
										ctx: Load 
								keywords: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _year
									ctx: Store 
							value: Name 
								id: str = year
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _month
									ctx: Store 
							value: Name 
								id: str = month
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _day
									ctx: Store 
							value: Name 
								id: str = day
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _hour
									ctx: Store 
							value: Name 
								id: str = hour
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _minute
									ctx: Store 
							value: Name 
								id: str = minute
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _second
									ctx: Store 
							value: Name 
								id: str = second
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _microsecond
									ctx: Store 
							value: Name 
								id: str = microsecond
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _tzinfo
									ctx: Store 
							value: Name 
								id: str = tzinfo
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = nokwargs
						keywords: list 
				element: FunctionDef 
					name: str = hour
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = hour (0-23)
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _hour
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = minute
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = minute (0-59)
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _minute
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = second
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = second (0-59)
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _second
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = microsecond
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = microsecond (0-999999)
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _microsecond
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = tzinfo
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = timezone info object
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _tzinfo
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = property
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = _fromtimestamp
					args: arguments 
						args: list 
							element: arg 
								arg: str = cls
								annotation: NoneType = None
							element: arg 
								arg: str = t
								annotation: NoneType = None
							element: arg 
								arg: str = utc
								annotation: NoneType = None
							element: arg 
								arg: str = tz
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Construct a datetime from a POSIX timestamp (like time.time()).

        A timezone info object may be passed in as well.
        
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = frac
											ctx: Store 
										element: Name 
											id: str = t
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = _math
										ctx: Load 
									attr: str = modf
									ctx: Load 
								args: list 
									element: Name 
										id: str = t
										ctx: Load 
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = us
									ctx: Store 
							value: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: BinOp 
										left: Name 
											id: str = frac
											ctx: Load 
										op: Mult 
										right: Num 
											n: float = 1000000.0
								keywords: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = us
									ctx: Load 
								ops: list 
									element: GtE 
								comparators: list 
									element: Num 
										n: int = 1000000
							body: list 
								element: AugAssign 
									target: Name 
										id: str = t
										ctx: Store 
									op: Add 
									value: Num 
										n: int = 1
								element: AugAssign 
									target: Name 
										id: str = us
										ctx: Store 
									op: Sub 
									value: Num 
										n: int = 1000000
							orelse: list 
								element: If 
									test: Compare 
										left: Name 
											id: str = us
											ctx: Load 
										ops: list 
											element: Lt 
										comparators: list 
											element: Num 
												n: int = 0
									body: list 
										element: AugAssign 
											target: Name 
												id: str = t
												ctx: Store 
											op: Sub 
											value: Num 
												n: int = 1
										element: AugAssign 
											target: Name 
												id: str = us
												ctx: Store 
											op: Add 
											value: Num 
												n: int = 1000000
									orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = converter
									ctx: Store 
							value: IfExp 
								test: Name 
									id: str = utc
									ctx: Load 
								body: Attribute 
									value: Name 
										id: str = _time
										ctx: Load 
									attr: str = gmtime
									ctx: Load 
								orelse: Attribute 
									value: Name 
										id: str = _time
										ctx: Load 
									attr: str = localtime
									ctx: Load 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = y
											ctx: Store 
										element: Name 
											id: str = m
											ctx: Store 
										element: Name 
											id: str = d
											ctx: Store 
										element: Name 
											id: str = hh
											ctx: Store 
										element: Name 
											id: str = mm
											ctx: Store 
										element: Name 
											id: str = ss
											ctx: Store 
										element: Name 
											id: str = weekday
											ctx: Store 
										element: Name 
											id: str = jday
											ctx: Store 
										element: Name 
											id: str = dst
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = converter
									ctx: Load 
								args: list 
									element: Name 
										id: str = t
										ctx: Load 
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = ss
									ctx: Store 
							value: Call 
								func: Name 
									id: str = min
									ctx: Load 
								args: list 
									element: Name 
										id: str = ss
										ctx: Load 
									element: Num 
										n: int = 59
								keywords: list 
						element: Return 
							value: Call 
								func: Name 
									id: str = cls
									ctx: Load 
								args: list 
									element: Name 
										id: str = y
										ctx: Load 
									element: Name 
										id: str = m
										ctx: Load 
									element: Name 
										id: str = d
										ctx: Load 
									element: Name 
										id: str = hh
										ctx: Load 
									element: Name 
										id: str = mm
										ctx: Load 
									element: Name 
										id: str = ss
										ctx: Load 
									element: Name 
										id: str = us
										ctx: Load 
									element: Name 
										id: str = tz
										ctx: Load 
								keywords: list 
					decorator_list: list 
						element: Name 
							id: str = classmethod
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = fromtimestamp
					args: arguments 
						args: list 
							element: arg 
								arg: str = cls
								annotation: NoneType = None
							element: arg 
								arg: str = t
								annotation: NoneType = None
							element: arg 
								arg: str = tz
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: NameConstant 
								value: NoneType = None
					body: list 
						element: Expr 
							value: Str 
								s: str = Construct a datetime from a POSIX timestamp (like time.time()).

        A timezone info object may be passed in as well.
        
						element: Expr 
							value: Call 
								func: Name 
									id: str = _check_tzinfo_arg
									ctx: Load 
								args: list 
									element: Name 
										id: str = tz
										ctx: Load 
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = result
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = cls
										ctx: Load 
									attr: str = _fromtimestamp
									ctx: Load 
								args: list 
									element: Name 
										id: str = t
										ctx: Load 
									element: Compare 
										left: Name 
											id: str = tz
											ctx: Load 
										ops: list 
											element: IsNot 
										comparators: list 
											element: NameConstant 
												value: NoneType = None
									element: Name 
										id: str = tz
										ctx: Load 
								keywords: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = tz
									ctx: Load 
								ops: list 
									element: IsNot 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = result
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = tz
												ctx: Load 
											attr: str = fromutc
											ctx: Load 
										args: list 
											element: Name 
												id: str = result
												ctx: Load 
										keywords: list 
							orelse: list 
						element: Return 
							value: Name 
								id: str = result
								ctx: Load 
					decorator_list: list 
						element: Name 
							id: str = classmethod
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = utcfromtimestamp
					args: arguments 
						args: list 
							element: arg 
								arg: str = cls
								annotation: NoneType = None
							element: arg 
								arg: str = t
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Construct a naive UTC datetime from a POSIX timestamp.
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = cls
										ctx: Load 
									attr: str = _fromtimestamp
									ctx: Load 
								args: list 
									element: Name 
										id: str = t
										ctx: Load 
									element: NameConstant 
										value: bool = True
									element: NameConstant 
										value: NoneType = None
								keywords: list 
					decorator_list: list 
						element: Name 
							id: str = classmethod
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = now
					args: arguments 
						args: list 
							element: arg 
								arg: str = cls
								annotation: NoneType = None
							element: arg 
								arg: str = tz
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: NameConstant 
								value: NoneType = None
					body: list 
						element: Expr 
							value: Str 
								s: str = Construct a datetime from time.time() and optional time zone info.
						element: Assign 
							targets: list 
								element: Name 
									id: str = t
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = _time
										ctx: Load 
									attr: str = time
									ctx: Load 
								args: list 
								keywords: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = cls
										ctx: Load 
									attr: str = fromtimestamp
									ctx: Load 
								args: list 
									element: Name 
										id: str = t
										ctx: Load 
									element: Name 
										id: str = tz
										ctx: Load 
								keywords: list 
					decorator_list: list 
						element: Name 
							id: str = classmethod
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = utcnow
					args: arguments 
						args: list 
							element: arg 
								arg: str = cls
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Construct a UTC datetime from time.time().
						element: Assign 
							targets: list 
								element: Name 
									id: str = t
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = _time
										ctx: Load 
									attr: str = time
									ctx: Load 
								args: list 
								keywords: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = cls
										ctx: Load 
									attr: str = utcfromtimestamp
									ctx: Load 
								args: list 
									element: Name 
										id: str = t
										ctx: Load 
								keywords: list 
					decorator_list: list 
						element: Name 
							id: str = classmethod
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = combine
					args: arguments 
						args: list 
							element: arg 
								arg: str = cls
								annotation: NoneType = None
							element: arg 
								arg: str = date
								annotation: NoneType = None
							element: arg 
								arg: str = time
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Construct a datetime from a given date and a given time.
						element: If 
							test: UnaryOp 
								op: Not 
								operand: Call 
									func: Name 
										id: str = isinstance
										ctx: Load 
									args: list 
										element: Name 
											id: str = date
											ctx: Load 
										element: Name 
											id: str = _date_class
											ctx: Load 
									keywords: list 
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = TypeError
											ctx: Load 
										args: list 
											element: Str 
												s: str = date argument must be a date instance
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: If 
							test: UnaryOp 
								op: Not 
								operand: Call 
									func: Name 
										id: str = isinstance
										ctx: Load 
									args: list 
										element: Name 
											id: str = time
											ctx: Load 
										element: Name 
											id: str = _time_class
											ctx: Load 
									keywords: list 
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = TypeError
											ctx: Load 
										args: list 
											element: Str 
												s: str = time argument must be a time instance
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: Return 
							value: Call 
								func: Name 
									id: str = cls
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = date
											ctx: Load 
										attr: str = year
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = date
											ctx: Load 
										attr: str = month
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = date
											ctx: Load 
										attr: str = day
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = time
											ctx: Load 
										attr: str = hour
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = time
											ctx: Load 
										attr: str = minute
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = time
											ctx: Load 
										attr: str = second
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = time
											ctx: Load 
										attr: str = microsecond
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = time
											ctx: Load 
										attr: str = tzinfo
										ctx: Load 
								keywords: list 
					decorator_list: list 
						element: Name 
							id: str = classmethod
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = timetuple
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return local time tuple compatible with time.localtime().
						element: Assign 
							targets: list 
								element: Name 
									id: str = dst
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = dst
									ctx: Load 
								args: list 
								keywords: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = dst
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = dst
											ctx: Store 
									value: UnaryOp 
										op: USub 
										operand: Num 
											n: int = 1
							orelse: list 
								element: If 
									test: Name 
										id: str = dst
										ctx: Load 
									body: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = dst
													ctx: Store 
											value: Num 
												n: int = 1
									orelse: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = dst
													ctx: Store 
											value: Num 
												n: int = 0
						element: Return 
							value: Call 
								func: Name 
									id: str = _build_struct_time
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = year
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = month
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = day
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = hour
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = minute
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = second
										ctx: Load 
									element: Name 
										id: str = dst
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = timestamp
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return POSIX timestamp as float
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _tzinfo
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Return 
									value: BinOp 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = _time
													ctx: Load 
												attr: str = mktime
												ctx: Load 
											args: list 
												element: Tuple 
													elts: list 
														element: Attribute 
															value: Name 
																id: str = self
																ctx: Load 
															attr: str = year
															ctx: Load 
														element: Attribute 
															value: Name 
																id: str = self
																ctx: Load 
															attr: str = month
															ctx: Load 
														element: Attribute 
															value: Name 
																id: str = self
																ctx: Load 
															attr: str = day
															ctx: Load 
														element: Attribute 
															value: Name 
																id: str = self
																ctx: Load 
															attr: str = hour
															ctx: Load 
														element: Attribute 
															value: Name 
																id: str = self
																ctx: Load 
															attr: str = minute
															ctx: Load 
														element: Attribute 
															value: Name 
																id: str = self
																ctx: Load 
															attr: str = second
															ctx: Load 
														element: UnaryOp 
															op: USub 
															operand: Num 
																n: int = 1
														element: UnaryOp 
															op: USub 
															operand: Num 
																n: int = 1
														element: UnaryOp 
															op: USub 
															operand: Num 
																n: int = 1
													ctx: Load 
											keywords: list 
										op: Add 
										right: BinOp 
											left: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = microsecond
												ctx: Load 
											op: Div 
											right: Num 
												n: float = 1000000.0
							orelse: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = __pragma__
											ctx: Load 
										args: list 
											element: Str 
												s: str = opov
										keywords: list 
								element: Return 
									value: Call 
										func: Attribute 
											value: BinOp 
												left: Name 
													id: str = self
													ctx: Load 
												op: Sub 
												right: Name 
													id: str = _EPOCH
													ctx: Load 
											attr: str = total_seconds
											ctx: Load 
										args: list 
										keywords: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = __pragma__
											ctx: Load 
										args: list 
											element: Str 
												s: str = noopov
										keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = utctimetuple
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return UTC time tuple compatible with time.gmtime().
						element: Assign 
							targets: list 
								element: Name 
									id: str = offset
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = utcoffset
									ctx: Load 
								args: list 
								keywords: list 
						element: If 
							test: Name 
								id: str = offset
								ctx: Load 
							body: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = __pragma__
											ctx: Load 
										args: list 
											element: Str 
												s: str = opov
										keywords: list 
								element: AugAssign 
									target: Name 
										id: str = self
										ctx: Store 
									op: Sub 
									value: Name 
										id: str = offset
										ctx: Load 
								element: Expr 
									value: Call 
										func: Name 
											id: str = __pragma__
											ctx: Load 
										args: list 
											element: Str 
												s: str = noopov
										keywords: list 
							orelse: list 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = y
											ctx: Store 
										element: Name 
											id: str = m
											ctx: Store 
										element: Name 
											id: str = d
											ctx: Store 
									ctx: Store 
							value: Tuple 
								elts: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = year
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = month
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = day
										ctx: Load 
								ctx: Load 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = hh
											ctx: Store 
										element: Name 
											id: str = mm
											ctx: Store 
										element: Name 
											id: str = ss
											ctx: Store 
									ctx: Store 
							value: Tuple 
								elts: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = hour
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = minute
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = second
										ctx: Load 
								ctx: Load 
						element: Return 
							value: Call 
								func: Name 
									id: str = _build_struct_time
									ctx: Load 
								args: list 
									element: Name 
										id: str = y
										ctx: Load 
									element: Name 
										id: str = m
										ctx: Load 
									element: Name 
										id: str = d
										ctx: Load 
									element: Name 
										id: str = hh
										ctx: Load 
									element: Name 
										id: str = mm
										ctx: Load 
									element: Name 
										id: str = ss
										ctx: Load 
									element: Num 
										n: int = 0
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = date
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return the date part.
						element: Return 
							value: Call 
								func: Name 
									id: str = date
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _year
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _month
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _day
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = time
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return the time part, with tzinfo None.
						element: Return 
							value: Call 
								func: Name 
									id: str = time
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = hour
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = minute
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = second
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = microsecond
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = timetz
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return the time part, with same tzinfo.
						element: Return 
							value: Call 
								func: Name 
									id: str = time
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = hour
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = minute
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = second
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = microsecond
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _tzinfo
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = kwargs
						keywords: list 
				element: FunctionDef 
					name: str = replace
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = year
								annotation: NoneType = None
							element: arg 
								arg: str = month
								annotation: NoneType = None
							element: arg 
								arg: str = day
								annotation: NoneType = None
							element: arg 
								arg: str = hour
								annotation: NoneType = None
							element: arg 
								arg: str = minute
								annotation: NoneType = None
							element: arg 
								arg: str = second
								annotation: NoneType = None
							element: arg 
								arg: str = microsecond
								annotation: NoneType = None
							element: arg 
								arg: str = tzinfo
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: NoneType = None
							element: NameConstant 
								value: bool = True
					body: list 
						element: Expr 
							value: Str 
								s: str = Return a new datetime with new values for the specified fields.
						element: If 
							test: Compare 
								left: Name 
									id: str = year
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = year
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = year
										ctx: Load 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = month
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = month
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = month
										ctx: Load 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = day
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = day
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = day
										ctx: Load 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = hour
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = hour
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = hour
										ctx: Load 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = minute
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = minute
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = minute
										ctx: Load 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = second
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = second
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = second
										ctx: Load 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = microsecond
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = microsecond
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = microsecond
										ctx: Load 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = tzinfo
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: bool = True
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = tzinfo
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = tzinfo
										ctx: Load 
							orelse: list 
						element: Return 
							value: Call 
								func: Name 
									id: str = datetime
									ctx: Load 
								args: list 
									element: Name 
										id: str = year
										ctx: Load 
									element: Name 
										id: str = month
										ctx: Load 
									element: Name 
										id: str = day
										ctx: Load 
									element: Name 
										id: str = hour
										ctx: Load 
									element: Name 
										id: str = minute
										ctx: Load 
									element: Name 
										id: str = second
										ctx: Load 
									element: Name 
										id: str = microsecond
										ctx: Load 
									element: Name 
										id: str = tzinfo
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = nokwargs
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = kwargs
						keywords: list 
				element: FunctionDef 
					name: str = astimezone
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = tz
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: NameConstant 
								value: NoneType = None
					body: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = tz
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: If 
									test: Compare 
										left: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = tzinfo
											ctx: Load 
										ops: list 
											element: Is 
										comparators: list 
											element: NameConstant 
												value: NoneType = None
									body: list 
										element: Raise 
											exc: Call 
												func: Name 
													id: str = ValueError
													ctx: Load 
												args: list 
													element: Str 
														s: str = astimezone() requires an aware datetime
												keywords: list 
											cause: NoneType = None
									orelse: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = __pragma__
											ctx: Load 
										args: list 
											element: Str 
												s: str = opov
										keywords: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = ts
											ctx: Store 
									value: BinOp 
										left: BinOp 
											left: Name 
												id: str = self
												ctx: Load 
											op: Sub 
											right: Name 
												id: str = _EPOCH
												ctx: Load 
										op: FloorDiv 
										right: Call 
											func: Name 
												id: str = timedelta
												ctx: Load 
											args: list 
											keywords: list 
												element: keyword 
													arg: str = seconds
													value: Num 
														n: int = 1
								element: Expr 
									value: Call 
										func: Name 
											id: str = __pragma__
											ctx: Load 
										args: list 
											element: Str 
												s: str = noopov
										keywords: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = localtm
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = _time
												ctx: Load 
											attr: str = localtime
											ctx: Load 
										args: list 
											element: Name 
												id: str = ts
												ctx: Load 
										keywords: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = local
											ctx: Store 
									value: Call 
										func: Name 
											id: str = datetime
											ctx: Load 
										args: list 
											element: Starred 
												value: Subscript 
													value: Name 
														id: str = localtm
														ctx: Load 
													slice: Slice 
														lower: NoneType = None
														upper: Num 
															n: int = 6
														step: NoneType = None
													ctx: Load 
												ctx: Load 
										keywords: list 
								element: If 
									test: Compare 
										left: Call 
											func: Name 
												id: str = len
												ctx: Load 
											args: list 
												element: Name 
													id: str = localtm
													ctx: Load 
											keywords: list 
										ops: list 
											element: Gt 
										comparators: list 
											element: Num 
												n: int = 9
									body: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = gmtoff
													ctx: Store 
											value: Subscript 
												value: Name 
													id: str = localtm
													ctx: Load 
												slice: Index 
													value: Num 
														n: int = 10
												ctx: Load 
										element: Assign 
											targets: list 
												element: Name 
													id: str = zone
													ctx: Store 
											value: Subscript 
												value: Name 
													id: str = localtm
													ctx: Load 
												slice: Index 
													value: Num 
														n: int = 9
												ctx: Load 
										element: Assign 
											targets: list 
												element: Name 
													id: str = tz
													ctx: Store 
											value: Call 
												func: Name 
													id: str = timezone
													ctx: Load 
												args: list 
													element: Call 
														func: Name 
															id: str = timedelta
															ctx: Load 
														args: list 
														keywords: list 
															element: keyword 
																arg: str = seconds
																value: Name 
																	id: str = gmtoff
																	ctx: Load 
													element: Name 
														id: str = zone
														ctx: Load 
												keywords: list 
									orelse: list 
										element: Expr 
											value: Call 
												func: Name 
													id: str = __pragma__
													ctx: Load 
												args: list 
													element: Str 
														s: str = opov
												keywords: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = delta
													ctx: Store 
											value: BinOp 
												left: Name 
													id: str = local
													ctx: Load 
												op: Sub 
												right: Call 
													func: Name 
														id: str = datetime
														ctx: Load 
													args: list 
														element: Starred 
															value: Subscript 
																value: Call 
																	func: Attribute 
																		value: Name 
																			id: str = _time
																			ctx: Load 
																		attr: str = gmtime
																		ctx: Load 
																	args: list 
																		element: Name 
																			id: str = ts
																			ctx: Load 
																	keywords: list 
																slice: Slice 
																	lower: NoneType = None
																	upper: Num 
																		n: int = 6
																	step: NoneType = None
																ctx: Load 
															ctx: Load 
													keywords: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = dst
													ctx: Store 
											value: BoolOp 
												op: And 
												values: list 
													element: Attribute 
														value: Name 
															id: str = _time
															ctx: Load 
														attr: str = daylight
														ctx: Load 
													element: Compare 
														left: Subscript 
															value: Name 
																id: str = localtm
																ctx: Load 
															slice: Index 
																value: Num 
																	n: int = 8
															ctx: Load 
														ops: list 
															element: Gt 
														comparators: list 
															element: Num 
																n: int = 0
										element: Assign 
											targets: list 
												element: Name 
													id: str = gmtoff
													ctx: Store 
											value: UnaryOp 
												op: USub 
												operand: IfExp 
													test: Name 
														id: str = dst
														ctx: Load 
													body: Attribute 
														value: Name 
															id: str = _time
															ctx: Load 
														attr: str = altzone
														ctx: Load 
													orelse: Attribute 
														value: Name 
															id: str = _time
															ctx: Load 
														attr: str = timezone
														ctx: Load 
										element: If 
											test: Compare 
												left: Name 
													id: str = delta
													ctx: Load 
												ops: list 
													element: Eq 
												comparators: list 
													element: Call 
														func: Name 
															id: str = timedelta
															ctx: Load 
														args: list 
														keywords: list 
															element: keyword 
																arg: str = seconds
																value: Name 
																	id: str = gmtoff
																	ctx: Load 
											body: list 
												element: Assign 
													targets: list 
														element: Name 
															id: str = tz
															ctx: Store 
													value: Call 
														func: Name 
															id: str = timezone
															ctx: Load 
														args: list 
															element: Name 
																id: str = delta
																ctx: Load 
															element: Subscript 
																value: Attribute 
																	value: Name 
																		id: str = _time
																		ctx: Load 
																	attr: str = tzname
																	ctx: Load 
																slice: Index 
																	value: Name 
																		id: str = dst
																		ctx: Load 
																ctx: Load 
														keywords: list 
											orelse: list 
												element: Assign 
													targets: list 
														element: Name 
															id: str = tz
															ctx: Store 
													value: Call 
														func: Name 
															id: str = timezone
															ctx: Load 
														args: list 
															element: Name 
																id: str = delta
																ctx: Load 
														keywords: list 
										element: Expr 
											value: Call 
												func: Name 
													id: str = __pragma__
													ctx: Load 
												args: list 
													element: Str 
														s: str = noopov
												keywords: list 
							orelse: list 
								element: If 
									test: UnaryOp 
										op: Not 
										operand: Call 
											func: Name 
												id: str = isinstance
												ctx: Load 
											args: list 
												element: Name 
													id: str = tz
													ctx: Load 
												element: Name 
													id: str = tzinfo
													ctx: Load 
											keywords: list 
									body: list 
										element: Raise 
											exc: Call 
												func: Name 
													id: str = TypeError
													ctx: Load 
												args: list 
													element: Str 
														s: str = tz argument must be an instance of tzinfo
												keywords: list 
											cause: NoneType = None
									orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = mytz
									ctx: Store 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = tzinfo
								ctx: Load 
						element: If 
							test: Compare 
								left: Name 
									id: str = mytz
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = ValueError
											ctx: Load 
										args: list 
											element: Str 
												s: str = astimezone() requires an aware datetime
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = tz
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: Name 
										id: str = mytz
										ctx: Load 
							body: list 
								element: Return 
									value: Name 
										id: str = self
										ctx: Load 
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = myoffset
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = utcoffset
									ctx: Load 
								args: list 
								keywords: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = myoffset
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = ValueError
											ctx: Load 
										args: list 
											element: Str 
												s: str = astimezone() requires an aware datetime
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = opov
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = utc
									ctx: Store 
							value: Call 
								func: Attribute 
									value: BinOp 
										left: Name 
											id: str = self
											ctx: Load 
										op: Sub 
										right: Name 
											id: str = myoffset
											ctx: Load 
									attr: str = replace
									ctx: Load 
								args: list 
								keywords: list 
									element: keyword 
										arg: str = tzinfo
										value: Name 
											id: str = tz
											ctx: Load 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = noopov
								keywords: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = tz
										ctx: Load 
									attr: str = fromutc
									ctx: Load 
								args: list 
									element: Name 
										id: str = utc
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = nokwargs
						keywords: list 
				element: FunctionDef 
					name: str = ctime
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return ctime() style string.
						element: Assign 
							targets: list 
								element: Name 
									id: str = weekday
									ctx: Store 
							value: BoolOp 
								op: Or 
								values: list 
									element: BinOp 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = toordinal
												ctx: Load 
											args: list 
											keywords: list 
										op: Mod 
										right: Num 
											n: int = 7
									element: Num 
										n: int = 7
						element: Return 
							value: Call 
								func: Attribute 
									value: Str 
										s: str = {} {} {} {}:{}:{} {}
									attr: str = format
									ctx: Load 
								args: list 
									element: Subscript 
										value: Name 
											id: str = _DAYNAMES
											ctx: Load 
										slice: Index 
											value: Name 
												id: str = weekday
												ctx: Load 
										ctx: Load 
									element: Subscript 
										value: Name 
											id: str = _MONTHNAMES
											ctx: Load 
										slice: Index 
											value: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _month
												ctx: Load 
										ctx: Load 
									element: Call 
										func: Name 
											id: str = zfill
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _day
												ctx: Load 
											element: Num 
												n: int = 2
										keywords: list 
									element: Call 
										func: Name 
											id: str = zfill
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _hour
												ctx: Load 
											element: Num 
												n: int = 2
										keywords: list 
									element: Call 
										func: Name 
											id: str = zfill
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _minute
												ctx: Load 
											element: Num 
												n: int = 2
										keywords: list 
									element: Call 
										func: Name 
											id: str = zfill
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _second
												ctx: Load 
											element: Num 
												n: int = 2
										keywords: list 
									element: Call 
										func: Name 
											id: str = zfill
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _year
												ctx: Load 
											element: Num 
												n: int = 4
										keywords: list 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = isoformat
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = sep
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: Str 
								s: str = T
					body: list 
						element: Expr 
							value: Str 
								s: str = Return the time formatted according to ISO.

        This is 'YYYY-MM-DD HH:MM:SS.mmmmmm', or 'YYYY-MM-DD HH:MM:SS' if
        self.microsecond == 0.

        If self.tzinfo is not None, the UTC offset is also attached, giving
        'YYYY-MM-DD HH:MM:SS.mmmmmm+HH:MM' or 'YYYY-MM-DD HH:MM:SS+HH:MM'.

        Optional argument sep specifies the separator between date and
        time, default 'T'.
        
						element: Assign 
							targets: list 
								element: Name 
									id: str = s
									ctx: Store 
							value: BinOp 
								left: Call 
									func: Attribute 
										value: Str 
											s: str = {}-{}-{}{}
										attr: str = format
										ctx: Load 
									args: list 
										element: Call 
											func: Name 
												id: str = zfill
												ctx: Load 
											args: list 
												element: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = _year
													ctx: Load 
												element: Num 
													n: int = 4
											keywords: list 
										element: Call 
											func: Name 
												id: str = zfill
												ctx: Load 
											args: list 
												element: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = _month
													ctx: Load 
												element: Num 
													n: int = 2
											keywords: list 
										element: Call 
											func: Name 
												id: str = zfill
												ctx: Load 
											args: list 
												element: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = _day
													ctx: Load 
												element: Num 
													n: int = 2
											keywords: list 
										element: Name 
											id: str = sep
											ctx: Load 
									keywords: list 
								op: Add 
								right: Call 
									func: Name 
										id: str = _format_time
										ctx: Load 
									args: list 
										element: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _hour
											ctx: Load 
										element: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _minute
											ctx: Load 
										element: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _second
											ctx: Load 
										element: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _microsecond
											ctx: Load 
									keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = off
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = utcoffset
									ctx: Load 
								args: list 
								keywords: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = off
									ctx: Load 
								ops: list 
									element: IsNot 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: If 
									test: Compare 
										left: Attribute 
											value: Name 
												id: str = off
												ctx: Load 
											attr: str = days
											ctx: Load 
										ops: list 
											element: Lt 
										comparators: list 
											element: Num 
												n: int = 0
									body: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = sign
													ctx: Store 
											value: Str 
												s: str = -
										element: Assign 
											targets: list 
												element: Name 
													id: str = off
													ctx: Store 
											value: UnaryOp 
												op: USub 
												operand: Name 
													id: str = off
													ctx: Load 
									orelse: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = sign
													ctx: Store 
											value: Str 
												s: str = +
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = hh
													ctx: Store 
												element: Name 
													id: str = mm
													ctx: Store 
											ctx: Store 
									value: Call 
										func: Name 
											id: str = divmod
											ctx: Load 
										args: list 
											element: Name 
												id: str = off
												ctx: Load 
											element: Call 
												func: Name 
													id: str = timedelta
													ctx: Load 
												args: list 
												keywords: list 
													element: keyword 
														arg: str = hours
														value: Num 
															n: int = 1
										keywords: list 
								element: Assert 
									test: UnaryOp 
										op: Not 
										operand: BinOp 
											left: Name 
												id: str = mm
												ctx: Load 
											op: Mod 
											right: Call 
												func: Name 
													id: str = timedelta
													ctx: Load 
												args: list 
												keywords: list 
													element: keyword 
														arg: str = minutes
														value: Num 
															n: int = 1
									msg: Str 
										s: str = whole minute
								element: AugAssign 
									target: Name 
										id: str = mm
										ctx: Store 
									op: FloorDiv 
									value: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
										keywords: list 
											element: keyword 
												arg: str = minutes
												value: Num 
													n: int = 1
								element: AugAssign 
									target: Name 
										id: str = s
										ctx: Store 
									op: Add 
									value: Call 
										func: Attribute 
											value: Str 
												s: str = {}{}:{}
											attr: str = format
											ctx: Load 
										args: list 
											element: Name 
												id: str = sign
												ctx: Load 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Name 
														id: str = hh
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Name 
														id: str = mm
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
										keywords: list 
							orelse: list 
						element: Return 
							value: Name 
								id: str = s
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __repr__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Convert to formal string, for repr().
						element: Assign 
							targets: list 
								element: Name 
									id: str = L
									ctx: Store 
							value: List 
								elts: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _year
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _month
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _day
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _hour
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _minute
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _second
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _microsecond
										ctx: Load 
								ctx: Load 
						element: If 
							test: Compare 
								left: Subscript 
									value: Name 
										id: str = L
										ctx: Load 
									slice: Index 
										value: BinOp 
											left: Call 
												func: Name 
													id: str = len
													ctx: Load 
												args: list 
													element: Name 
														id: str = L
														ctx: Load 
												keywords: list 
											op: Sub 
											right: Num 
												n: int = 1
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Num 
										n: int = 0
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = L
												ctx: Load 
											attr: str = pop
											ctx: Load 
										args: list 
										keywords: list 
							orelse: list 
						element: If 
							test: Compare 
								left: Subscript 
									value: Name 
										id: str = L
										ctx: Load 
									slice: Index 
										value: BinOp 
											left: Call 
												func: Name 
													id: str = len
													ctx: Load 
												args: list 
													element: Name 
														id: str = L
														ctx: Load 
												keywords: list 
											op: Sub 
											right: Num 
												n: int = 1
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Num 
										n: int = 0
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = L
												ctx: Load 
											attr: str = pop
											ctx: Load 
										args: list 
										keywords: list 
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = s
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Str 
										s: str = datetime.datetime({})
									attr: str = format
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Str 
												s: str = , 
											attr: str = join
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = map
													ctx: Load 
												args: list 
													element: Name 
														id: str = str
														ctx: Load 
													element: Name 
														id: str = L
														ctx: Load 
												keywords: list 
										keywords: list 
								keywords: list 
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _tzinfo
									ctx: Load 
								ops: list 
									element: IsNot 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assert 
									test: Compare 
										left: Subscript 
											value: Name 
												id: str = s
												ctx: Load 
											slice: Slice 
												lower: UnaryOp 
													op: USub 
													operand: Num 
														n: int = 1
												upper: NoneType = None
												step: NoneType = None
											ctx: Load 
										ops: list 
											element: Eq 
										comparators: list 
											element: Str 
												s: str = )
									msg: NoneType = None
								element: Assign 
									targets: list 
										element: Name 
											id: str = s
											ctx: Store 
									value: BinOp 
										left: BinOp 
											left: Subscript 
												value: Name 
													id: str = s
													ctx: Load 
												slice: Slice 
													lower: NoneType = None
													upper: BinOp 
														left: Call 
															func: Name 
																id: str = len
																ctx: Load 
															args: list 
																element: Name 
																	id: str = s
																	ctx: Load 
															keywords: list 
														op: Sub 
														right: Num 
															n: int = 1
													step: NoneType = None
												ctx: Load 
											op: Add 
											right: Call 
												func: Attribute 
													value: Str 
														s: str = , tzinfo={}
													attr: str = format
													ctx: Load 
												args: list 
													element: Call 
														func: Attribute 
															value: Attribute 
																value: Name 
																	id: str = self
																	ctx: Load 
																attr: str = _tzinfo
																ctx: Load 
															attr: str = __repr__
															ctx: Load 
														args: list 
														keywords: list 
												keywords: list 
										op: Add 
										right: Str 
											s: str = )
							orelse: list 
						element: Return 
							value: Name 
								id: str = s
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __str__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Convert to string, for str().
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = isoformat
									ctx: Load 
								args: list 
								keywords: list 
									element: keyword 
										arg: str = sep
										value: Str 
											s: str =  
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = strptime
					args: arguments 
						args: list 
							element: arg 
								arg: str = cls
								annotation: NoneType = None
							element: arg 
								arg: str = date_string
								annotation: NoneType = None
							element: arg 
								arg: str = format
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = string, format -> new datetime parsed from a string (like time.strptime()).
						element: Return 
							value: Call 
								func: Name 
									id: str = cls
									ctx: Load 
								args: list 
									element: Starred 
										value: Subscript 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = _time
														ctx: Load 
													attr: str = strptime
													ctx: Load 
												args: list 
													element: Name 
														id: str = date_string
														ctx: Load 
													element: Name 
														id: str = format
														ctx: Load 
												keywords: list 
											slice: Slice 
												lower: NoneType = None
												upper: Num 
													n: int = 6
												step: NoneType = None
											ctx: Load 
										ctx: Load 
								keywords: list 
					decorator_list: list 
						element: Name 
							id: str = classmethod
							ctx: Load 
					returns: NoneType = None
				element: FunctionDef 
					name: str = utcoffset
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return the timezone offset in minutes east of UTC (negative west of
        UTC).
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _tzinfo
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Return 
									value: NameConstant 
										value: NoneType = None
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = offset
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _tzinfo
										ctx: Load 
									attr: str = utcoffset
									ctx: Load 
								args: list 
									element: Name 
										id: str = self
										ctx: Load 
								keywords: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = _check_utc_offset
									ctx: Load 
								args: list 
									element: Str 
										s: str = utcoffset
									element: Name 
										id: str = offset
										ctx: Load 
								keywords: list 
						element: Return 
							value: Name 
								id: str = offset
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = tzname
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return the timezone name.

        Note that the name is 100% informational -- there's no requirement that
        it mean anything in particular. For example, "GMT", "UTC", "-500",
        "-5:00", "EDT", "US/Eastern", "America/New York" are all valid replies.
        
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _tzinfo
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Return 
									value: NameConstant 
										value: NoneType = None
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = name
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _tzinfo
										ctx: Load 
									attr: str = tzname
									ctx: Load 
								args: list 
									element: Name 
										id: str = self
										ctx: Load 
								keywords: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = _check_tzname
									ctx: Load 
								args: list 
									element: Name 
										id: str = name
										ctx: Load 
								keywords: list 
						element: Return 
							value: Name 
								id: str = name
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = dst
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Return 0 if DST is not in effect, or the DST offset (in minutes
        eastward) if DST is in effect.

        This is purely informational; the DST offset has already been added to
        the UTC offset returned by utcoffset() if applicable, so there's no
        need to consult dst() unless you're interested in displaying the DST
        info.
        
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _tzinfo
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Return 
									value: NameConstant 
										value: NoneType = None
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = offset
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _tzinfo
										ctx: Load 
									attr: str = dst
									ctx: Load 
								args: list 
									element: Name 
										id: str = self
										ctx: Load 
								keywords: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = _check_utc_offset
									ctx: Load 
								args: list 
									element: Str 
										s: str = dst
									element: Name 
										id: str = offset
										ctx: Load 
								keywords: list 
						element: Return 
							value: Name 
								id: str = offset
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __eq__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = datetime
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
												element: keyword 
													arg: str = allow_mixed
													value: NameConstant 
														value: bool = True
										ops: list 
											element: Eq 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: If 
									test: UnaryOp 
										op: Not 
										operand: Call 
											func: Name 
												id: str = isinstance
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
												element: Name 
													id: str = date
													ctx: Load 
											keywords: list 
									body: list 
										element: Return 
											value: Name 
												id: str = NotImplemented
												ctx: Load 
									orelse: list 
										element: Return 
											value: NameConstant 
												value: bool = False
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __le__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = datetime
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: LtE 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: If 
									test: UnaryOp 
										op: Not 
										operand: Call 
											func: Name 
												id: str = isinstance
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
												element: Name 
													id: str = date
													ctx: Load 
											keywords: list 
									body: list 
										element: Return 
											value: Name 
												id: str = NotImplemented
												ctx: Load 
									orelse: list 
										element: Expr 
											value: Call 
												func: Name 
													id: str = _cmperror
													ctx: Load 
												args: list 
													element: Name 
														id: str = self
														ctx: Load 
													element: Name 
														id: str = other
														ctx: Load 
												keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __lt__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = datetime
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: Lt 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: If 
									test: UnaryOp 
										op: Not 
										operand: Call 
											func: Name 
												id: str = isinstance
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
												element: Name 
													id: str = date
													ctx: Load 
											keywords: list 
									body: list 
										element: Return 
											value: Name 
												id: str = NotImplemented
												ctx: Load 
									orelse: list 
										element: Expr 
											value: Call 
												func: Name 
													id: str = _cmperror
													ctx: Load 
												args: list 
													element: Name 
														id: str = self
														ctx: Load 
													element: Name 
														id: str = other
														ctx: Load 
												keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __ge__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = datetime
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: GtE 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: If 
									test: UnaryOp 
										op: Not 
										operand: Call 
											func: Name 
												id: str = isinstance
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
												element: Name 
													id: str = date
													ctx: Load 
											keywords: list 
									body: list 
										element: Return 
											value: Name 
												id: str = NotImplemented
												ctx: Load 
									orelse: list 
										element: Expr 
											value: Call 
												func: Name 
													id: str = _cmperror
													ctx: Load 
												args: list 
													element: Name 
														id: str = self
														ctx: Load 
													element: Name 
														id: str = other
														ctx: Load 
												keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __gt__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = datetime
										ctx: Load 
								keywords: list 
							body: list 
								element: Return 
									value: Compare 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _cmp
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
											keywords: list 
										ops: list 
											element: Gt 
										comparators: list 
											element: Num 
												n: int = 0
							orelse: list 
								element: If 
									test: UnaryOp 
										op: Not 
										operand: Call 
											func: Name 
												id: str = isinstance
												ctx: Load 
											args: list 
												element: Name 
													id: str = other
													ctx: Load 
												element: Name 
													id: str = date
													ctx: Load 
											keywords: list 
									body: list 
										element: Return 
											value: Name 
												id: str = NotImplemented
												ctx: Load 
									orelse: list 
										element: Expr 
											value: Call 
												func: Name 
													id: str = _cmperror
													ctx: Load 
												args: list 
													element: Name 
														id: str = self
														ctx: Load 
													element: Name 
														id: str = other
														ctx: Load 
												keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = _cmp
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
							element: arg 
								arg: str = allow_mixed
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: NameConstant 
								value: bool = False
					body: list 
						element: Assert 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
									element: Name 
										id: str = datetime
										ctx: Load 
								keywords: list 
							msg: NoneType = None
						element: Assign 
							targets: list 
								element: Name 
									id: str = mytz
									ctx: Store 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = _tzinfo
								ctx: Load 
						element: Assign 
							targets: list 
								element: Name 
									id: str = ottz
									ctx: Store 
							value: Attribute 
								value: Name 
									id: str = other
									ctx: Load 
								attr: str = _tzinfo
								ctx: Load 
						element: Assign 
							targets: list 
								element: Name 
									id: str = myoff
									ctx: Store 
								element: Name 
									id: str = otoff
									ctx: Store 
							value: NameConstant 
								value: NoneType = None
						element: If 
							test: Compare 
								left: Name 
									id: str = mytz
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: Name 
										id: str = ottz
										ctx: Load 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = base_compare
											ctx: Store 
									value: NameConstant 
										value: bool = True
							orelse: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = myoff
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = utcoffset
											ctx: Load 
										args: list 
										keywords: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = otoff
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = other
												ctx: Load 
											attr: str = utcoffset
											ctx: Load 
										args: list 
										keywords: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = base_compare
											ctx: Store 
									value: Compare 
										left: Name 
											id: str = myoff
											ctx: Load 
										ops: list 
											element: Eq 
										comparators: list 
											element: Name 
												id: str = otoff
												ctx: Load 
						element: If 
							test: Name 
								id: str = base_compare
								ctx: Load 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = s1
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Str 
												s: str = {}{}{}{}{}{}{}
											attr: str = format
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = _year
														ctx: Load 
													element: Num 
														n: int = 4
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = _month
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = _day
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = _hour
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = _minute
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = _second
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = _microsecond
														ctx: Load 
													element: Num 
														n: int = 6
												keywords: list 
										keywords: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = s2
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Str 
												s: str = {}{}{}{}{}{}{}
											attr: str = format
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = other
															ctx: Load 
														attr: str = _year
														ctx: Load 
													element: Num 
														n: int = 4
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = other
															ctx: Load 
														attr: str = _month
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = other
															ctx: Load 
														attr: str = _day
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = other
															ctx: Load 
														attr: str = _hour
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = other
															ctx: Load 
														attr: str = _minute
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = other
															ctx: Load 
														attr: str = _second
														ctx: Load 
													element: Num 
														n: int = 2
												keywords: list 
											element: Call 
												func: Name 
													id: str = zfill
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = other
															ctx: Load 
														attr: str = _microsecond
														ctx: Load 
													element: Num 
														n: int = 6
												keywords: list 
										keywords: list 
								element: Return 
									value: Call 
										func: Name 
											id: str = _cmp
											ctx: Load 
										args: list 
											element: Name 
												id: str = s1
												ctx: Load 
											element: Name 
												id: str = s2
												ctx: Load 
										keywords: list 
							orelse: list 
						element: If 
							test: BoolOp 
								op: Or 
								values: list 
									element: Compare 
										left: Name 
											id: str = myoff
											ctx: Load 
										ops: list 
											element: Is 
										comparators: list 
											element: NameConstant 
												value: NoneType = None
									element: Compare 
										left: Name 
											id: str = otoff
											ctx: Load 
										ops: list 
											element: Is 
										comparators: list 
											element: NameConstant 
												value: NoneType = None
							body: list 
								element: If 
									test: Name 
										id: str = allow_mixed
										ctx: Load 
									body: list 
										element: Return 
											value: Num 
												n: int = 2
									orelse: list 
										element: Raise 
											exc: Call 
												func: Name 
													id: str = TypeError
													ctx: Load 
												args: list 
													element: Str 
														s: str = cannot compare naive and aware datetimes
												keywords: list 
											cause: NoneType = None
							orelse: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = opov
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = diff
									ctx: Store 
							value: BinOp 
								left: Name 
									id: str = self
									ctx: Load 
								op: Sub 
								right: Name 
									id: str = other
									ctx: Load 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = noopov
								keywords: list 
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = diff
										ctx: Load 
									attr: str = days
									ctx: Load 
								ops: list 
									element: Lt 
								comparators: list 
									element: Num 
										n: int = 0
							body: list 
								element: Return 
									value: UnaryOp 
										op: USub 
										operand: Num 
											n: int = 1
							orelse: list 
						element: Return 
							value: BoolOp 
								op: Or 
								values: list 
									element: BoolOp 
										op: And 
										values: list 
											element: Name 
												id: str = diff
												ctx: Load 
											element: Num 
												n: int = 1
									element: Num 
										n: int = 0
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __add__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Add a datetime and a timedelta.
						element: If 
							test: UnaryOp 
								op: Not 
								operand: Call 
									func: Name 
										id: str = isinstance
										ctx: Load 
									args: list 
										element: Name 
											id: str = other
											ctx: Load 
										element: Name 
											id: str = timedelta
											ctx: Load 
									keywords: list 
							body: list 
								element: Return 
									value: Name 
										id: str = NotImplemented
										ctx: Load 
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = delta
									ctx: Store 
							value: Call 
								func: Name 
									id: str = timedelta
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = toordinal
											ctx: Load 
										args: list 
										keywords: list 
								keywords: list 
									element: keyword 
										arg: str = hours
										value: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _hour
											ctx: Load 
									element: keyword 
										arg: str = minutes
										value: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _minute
											ctx: Load 
									element: keyword 
										arg: str = seconds
										value: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _second
											ctx: Load 
									element: keyword 
										arg: str = microseconds
										value: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _microsecond
											ctx: Load 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = opov
								keywords: list 
						element: AugAssign 
							target: Name 
								id: str = delta
								ctx: Store 
							op: Add 
							value: Name 
								id: str = other
								ctx: Load 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = noopov
								keywords: list 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = hour
											ctx: Store 
										element: Name 
											id: str = rem
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = divmod
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = delta
											ctx: Load 
										attr: str = seconds
										ctx: Load 
									element: Num 
										n: int = 3600
								keywords: list 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = minute
											ctx: Store 
										element: Name 
											id: str = second
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = divmod
									ctx: Load 
								args: list 
									element: Name 
										id: str = rem
										ctx: Load 
									element: Num 
										n: int = 60
								keywords: list 
						element: If 
							test: Compare 
								left: Num 
									n: int = 0
								ops: list 
									element: Lt 
									element: LtE 
								comparators: list 
									element: Attribute 
										value: Name 
											id: str = delta
											ctx: Load 
										attr: str = days
										ctx: Load 
									element: Name 
										id: str = _MAXORDINAL
										ctx: Load 
							body: list 
								element: Return 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = datetime
												ctx: Load 
											attr: str = combine
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = date
														ctx: Load 
													attr: str = fromordinal
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = delta
															ctx: Load 
														attr: str = days
														ctx: Load 
												keywords: list 
											element: Call 
												func: Name 
													id: str = time
													ctx: Load 
												args: list 
													element: Name 
														id: str = hour
														ctx: Load 
													element: Name 
														id: str = minute
														ctx: Load 
													element: Name 
														id: str = second
														ctx: Load 
													element: Attribute 
														value: Name 
															id: str = delta
															ctx: Load 
														attr: str = microseconds
														ctx: Load 
												keywords: list 
													element: keyword 
														arg: str = tzinfo
														value: Attribute 
															value: Name 
																id: str = self
																ctx: Load 
															attr: str = _tzinfo
															ctx: Load 
										keywords: list 
							orelse: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = OverflowError
									ctx: Load 
								args: list 
									element: Str 
										s: str = result out of range
								keywords: list 
							cause: NoneType = None
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __radd__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = __add__
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __sub__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Subtract two datetimes, or a datetime and a timedelta.
						element: If 
							test: UnaryOp 
								op: Not 
								operand: Call 
									func: Name 
										id: str = isinstance
										ctx: Load 
									args: list 
										element: Name 
											id: str = other
											ctx: Load 
										element: Name 
											id: str = datetime
											ctx: Load 
									keywords: list 
							body: list 
								element: If 
									test: Call 
										func: Name 
											id: str = isinstance
											ctx: Load 
										args: list 
											element: Name 
												id: str = other
												ctx: Load 
											element: Name 
												id: str = timedelta
												ctx: Load 
										keywords: list 
									body: list 
										element: Expr 
											value: Call 
												func: Name 
													id: str = __pragma__
													ctx: Load 
												args: list 
													element: Str 
														s: str = opov
												keywords: list 
										element: Return 
											value: BinOp 
												left: Name 
													id: str = self
													ctx: Load 
												op: Add 
												right: UnaryOp 
													op: USub 
													operand: Name 
														id: str = other
														ctx: Load 
										element: Expr 
											value: Call 
												func: Name 
													id: str = __pragma__
													ctx: Load 
												args: list 
													element: Str 
														s: str = noopov
												keywords: list 
									orelse: list 
								element: Return 
									value: Name 
										id: str = NotImplemented
										ctx: Load 
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = days1
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = toordinal
									ctx: Load 
								args: list 
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = days2
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = other
										ctx: Load 
									attr: str = toordinal
									ctx: Load 
								args: list 
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = secs1
									ctx: Store 
							value: BinOp 
								left: BinOp 
									left: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _second
										ctx: Load 
									op: Add 
									right: BinOp 
										left: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _minute
											ctx: Load 
										op: Mult 
										right: Num 
											n: int = 60
								op: Add 
								right: BinOp 
									left: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _hour
										ctx: Load 
									op: Mult 
									right: Num 
										n: int = 3600
						element: Assign 
							targets: list 
								element: Name 
									id: str = secs2
									ctx: Store 
							value: BinOp 
								left: BinOp 
									left: Attribute 
										value: Name 
											id: str = other
											ctx: Load 
										attr: str = _second
										ctx: Load 
									op: Add 
									right: BinOp 
										left: Attribute 
											value: Name 
												id: str = other
												ctx: Load 
											attr: str = _minute
											ctx: Load 
										op: Mult 
										right: Num 
											n: int = 60
								op: Add 
								right: BinOp 
									left: Attribute 
										value: Name 
											id: str = other
											ctx: Load 
										attr: str = _hour
										ctx: Load 
									op: Mult 
									right: Num 
										n: int = 3600
						element: Assign 
							targets: list 
								element: Name 
									id: str = base
									ctx: Store 
							value: Call 
								func: Name 
									id: str = timedelta
									ctx: Load 
								args: list 
									element: BinOp 
										left: Name 
											id: str = days1
											ctx: Load 
										op: Sub 
										right: Name 
											id: str = days2
											ctx: Load 
									element: BinOp 
										left: Name 
											id: str = secs1
											ctx: Load 
										op: Sub 
										right: Name 
											id: str = secs2
											ctx: Load 
									element: BinOp 
										left: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _microsecond
											ctx: Load 
										op: Sub 
										right: Attribute 
											value: Name 
												id: str = other
												ctx: Load 
											attr: str = _microsecond
											ctx: Load 
								keywords: list 
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _tzinfo
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: Attribute 
										value: Name 
											id: str = other
											ctx: Load 
										attr: str = _tzinfo
										ctx: Load 
							body: list 
								element: Return 
									value: Name 
										id: str = base
										ctx: Load 
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = myoff
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = utcoffset
									ctx: Load 
								args: list 
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = otoff
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = other
										ctx: Load 
									attr: str = utcoffset
									ctx: Load 
								args: list 
								keywords: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = myoff
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Name 
										id: str = otoff
										ctx: Load 
							body: list 
								element: Return 
									value: Name 
										id: str = base
										ctx: Load 
							orelse: list 
						element: If 
							test: BoolOp 
								op: Or 
								values: list 
									element: Compare 
										left: Name 
											id: str = myoff
											ctx: Load 
										ops: list 
											element: Is 
										comparators: list 
											element: NameConstant 
												value: NoneType = None
									element: Compare 
										left: Name 
											id: str = otoff
											ctx: Load 
										ops: list 
											element: Is 
										comparators: list 
											element: NameConstant 
												value: NoneType = None
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = TypeError
											ctx: Load 
										args: list 
											element: Str 
												s: str = cannot mix naive and timezone-aware time
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = opov
								keywords: list 
						element: Return 
							value: BinOp 
								left: BinOp 
									left: Name 
										id: str = base
										ctx: Load 
									op: Add 
									right: Name 
										id: str = otoff
										ctx: Load 
								op: Sub 
								right: Name 
									id: str = myoff
									ctx: Load 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = noopov
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: Assign 
					targets: list 
						element: Name 
							id: str = resolution
							ctx: Store 
					value: Call 
						func: Name 
							id: str = timedelta
							ctx: Load 
						args: list 
						keywords: list 
							element: keyword 
								arg: str = microseconds
								value: Num 
									n: int = 1
			decorator_list: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _dt_min
					ctx: Store 
			value: Call 
				func: Name 
					id: str = datetime
					ctx: Load 
				args: list 
					element: Num 
						n: int = 1
					element: Num 
						n: int = 1
					element: Num 
						n: int = 1
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _dt_max
					ctx: Store 
			value: Call 
				func: Name 
					id: str = datetime
					ctx: Load 
				args: list 
					element: Num 
						n: int = 9999
					element: Num 
						n: int = 12
					element: Num 
						n: int = 31
					element: Num 
						n: int = 23
					element: Num 
						n: int = 59
					element: Num 
						n: int = 59
					element: Num 
						n: int = 999999
				keywords: list 
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = js
					element: Str 
						s: str = {}
					element: Str 
						s: str = Object.defineProperty (datetime, 'min', {get: function () {return _dt_min;}})
				keywords: list 
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = js
					element: Str 
						s: str = {}
					element: Str 
						s: str = Object.defineProperty (datetime, 'max', {get: function () {return _dt_max;}})
				keywords: list 
		element: FunctionDef 
			name: str = _isoweek1monday
			args: arguments 
				args: list 
					element: arg 
						arg: str = year
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = THURSDAY
							ctx: Store 
					value: Num 
						n: int = 3
				element: Assign 
					targets: list 
						element: Name 
							id: str = firstday
							ctx: Store 
					value: Call 
						func: Name 
							id: str = _ymd2ord
							ctx: Load 
						args: list 
							element: Name 
								id: str = year
								ctx: Load 
							element: Num 
								n: int = 1
							element: Num 
								n: int = 1
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = firstweekday
							ctx: Store 
					value: BinOp 
						left: BinOp 
							left: Name 
								id: str = firstday
								ctx: Load 
							op: Add 
							right: Num 
								n: int = 6
						op: Mod 
						right: Num 
							n: int = 7
				element: Assign 
					targets: list 
						element: Name 
							id: str = week1monday
							ctx: Store 
					value: BinOp 
						left: Name 
							id: str = firstday
							ctx: Load 
						op: Sub 
						right: Name 
							id: str = firstweekday
							ctx: Load 
				element: If 
					test: Compare 
						left: Name 
							id: str = firstweekday
							ctx: Load 
						ops: list 
							element: Gt 
						comparators: list 
							element: Name 
								id: str = THURSDAY
								ctx: Load 
					body: list 
						element: AugAssign 
							target: Name 
								id: str = week1monday
								ctx: Store 
							op: Add 
							value: Num 
								n: int = 7
					orelse: list 
				element: Return 
					value: Name 
						id: str = week1monday
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: Assign 
			targets: list 
				element: Name 
					id: str = _Omitted
					ctx: Store 
			value: Str 
				s: str = @#$^&$^
		element: ClassDef 
			name: str = timezone
			bases: list 
				element: Name 
					id: str = tzinfo
					ctx: Load 
			keywords: list 
			body: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = kwargs
						keywords: list 
				element: FunctionDef 
					name: str = __init__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = offset
								annotation: NoneType = None
							element: arg 
								arg: str = name
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: Name 
								id: str = _Omitted
								ctx: Load 
					body: list 
						element: If 
							test: UnaryOp 
								op: Not 
								operand: Call 
									func: Name 
										id: str = isinstance
										ctx: Load 
									args: list 
										element: Name 
											id: str = offset
											ctx: Load 
										element: Name 
											id: str = timedelta
											ctx: Load 
									keywords: list 
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = TypeError
											ctx: Load 
										args: list 
											element: Str 
												s: str = offset must be a timedelta
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = name
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: Name 
										id: str = _Omitted
										ctx: Load 
							body: list 
								element: If 
									test: UnaryOp 
										op: Not 
										operand: Name 
											id: str = offset
											ctx: Load 
									body: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = offset
													ctx: Store 
											value: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = utc
												ctx: Load 
									orelse: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = name
											ctx: Store 
									value: NameConstant 
										value: NoneType = None
							orelse: list 
								element: If 
									test: UnaryOp 
										op: Not 
										operand: Call 
											func: Name 
												id: str = isinstance
												ctx: Load 
											args: list 
												element: Name 
													id: str = name
													ctx: Load 
												element: Name 
													id: str = str
													ctx: Load 
											keywords: list 
									body: list 
										element: Raise 
											exc: Call 
												func: Name 
													id: str = TypeError
													ctx: Load 
												args: list 
													element: Str 
														s: str = name must be a string
												keywords: list 
											cause: NoneType = None
									orelse: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = opov
								keywords: list 
						element: If 
							test: UnaryOp 
								op: Not 
								operand: Compare 
									left: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _minoffset
										ctx: Load 
									ops: list 
										element: LtE 
										element: LtE 
									comparators: list 
										element: Name 
											id: str = offset
											ctx: Load 
										element: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _maxoffset
											ctx: Load 
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = ValueError
											ctx: Load 
										args: list 
											element: Str 
												s: str = offset must be a timedelta strictly between -timedelta(hours=24) and timedelta(hours=24).
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = noopov
								keywords: list 
						element: If 
							test: BoolOp 
								op: Or 
								values: list 
									element: Compare 
										left: Attribute 
											value: Name 
												id: str = offset
												ctx: Load 
											attr: str = microseconds
											ctx: Load 
										ops: list 
											element: NotEq 
										comparators: list 
											element: Num 
												n: int = 0
									element: Compare 
										left: BinOp 
											left: Attribute 
												value: Name 
													id: str = offset
													ctx: Load 
												attr: str = seconds
												ctx: Load 
											op: Mod 
											right: Num 
												n: int = 60
										ops: list 
											element: NotEq 
										comparators: list 
											element: Num 
												n: int = 0
							body: list 
								element: Raise 
									exc: Call 
										func: Name 
											id: str = ValueError
											ctx: Load 
										args: list 
											element: Str 
												s: str = offset must be a timedelta representing a whole number of minutes
										keywords: list 
									cause: NoneType = None
							orelse: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _offset
									ctx: Store 
							value: Name 
								id: str = offset
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _name
									ctx: Store 
							value: Name 
								id: str = name
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = nokwargs
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = kwargs
						keywords: list 
				element: FunctionDef 
					name: str = _create
					args: arguments 
						args: list 
							element: arg 
								arg: str = cls
								annotation: NoneType = None
							element: arg 
								arg: str = offset
								annotation: NoneType = None
							element: arg 
								arg: str = name
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: Name 
								id: str = _Omitted
								ctx: Load 
					body: list 
						element: Return 
							value: Call 
								func: Name 
									id: str = cls
									ctx: Load 
								args: list 
									element: Name 
										id: str = offset
										ctx: Load 
									element: Name 
										id: str = name
										ctx: Load 
								keywords: list 
					decorator_list: list 
						element: Name 
							id: str = classmethod
							ctx: Load 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = nokwargs
						keywords: list 
				element: FunctionDef 
					name: str = __eq__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Compare 
								left: Call 
									func: Name 
										id: str = type
										ctx: Load 
									args: list 
										element: Name 
											id: str = other
											ctx: Load 
									keywords: list 
								ops: list 
									element: NotEq 
								comparators: list 
									element: Name 
										id: str = timezone
										ctx: Load 
							body: list 
								element: Return 
									value: NameConstant 
										value: bool = False
							orelse: list 
						element: Return 
							value: Compare 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _offset
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Attribute 
										value: Name 
											id: str = other
											ctx: Load 
										attr: str = _offset
										ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __repr__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str = Convert to formal string, for repr().

        >>> tz = timezone.utc
        >>> repr(tz)
        'datetime.timezone.utc'
        >>> tz = timezone(timedelta(hours=-5), 'EST')
        >>> repr(tz)
        "datetime.timezone(datetime.timedelta(-1, 68400), 'EST')"
        
						element: If 
							test: Compare 
								left: Name 
									id: str = self
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = utc
										ctx: Load 
							body: list 
								element: Return 
									value: Str 
										s: str = datetime.timezone.utc
							orelse: list 
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _name
									ctx: Load 
								ops: list 
									element: Is 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Return 
									value: Call 
										func: Attribute 
											value: Str 
												s: str = datetime.timezone({})
											attr: str = format
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = _offset
														ctx: Load 
													attr: str = __repr__
													ctx: Load 
												args: list 
												keywords: list 
										keywords: list 
							orelse: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Str 
										s: str = datetime.timezone({}, {})
									attr: str = format
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _offset
												ctx: Load 
											attr: str = __repr__
											ctx: Load 
										args: list 
										keywords: list 
									element: Call 
										func: Attribute 
											value: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = _name
												ctx: Load 
											attr: str = __repr__
											ctx: Load 
										args: list 
										keywords: list 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __str__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = tzname
									ctx: Load 
								args: list 
									element: NameConstant 
										value: NoneType = None
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = utcoffset
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = dt
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: BoolOp 
								op: Or 
								values: list 
									element: Call 
										func: Name 
											id: str = isinstance
											ctx: Load 
										args: list 
											element: Name 
												id: str = dt
												ctx: Load 
											element: Name 
												id: str = datetime
												ctx: Load 
										keywords: list 
									element: Compare 
										left: Name 
											id: str = dt
											ctx: Load 
										ops: list 
											element: Is 
										comparators: list 
											element: NameConstant 
												value: NoneType = None
							body: list 
								element: Return 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _offset
										ctx: Load 
							orelse: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = TypeError
									ctx: Load 
								args: list 
									element: Str 
										s: str = utcoffset() argument must be a datetime instance or None
								keywords: list 
							cause: NoneType = None
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = tzname
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = dt
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: BoolOp 
								op: Or 
								values: list 
									element: Call 
										func: Name 
											id: str = isinstance
											ctx: Load 
										args: list 
											element: Name 
												id: str = dt
												ctx: Load 
											element: Name 
												id: str = datetime
												ctx: Load 
										keywords: list 
									element: Compare 
										left: Name 
											id: str = dt
											ctx: Load 
										ops: list 
											element: Is 
										comparators: list 
											element: NameConstant 
												value: NoneType = None
							body: list 
								element: If 
									test: Compare 
										left: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _name
											ctx: Load 
										ops: list 
											element: Is 
										comparators: list 
											element: NameConstant 
												value: NoneType = None
									body: list 
										element: Return 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = _name_from_offset
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = _offset
														ctx: Load 
												keywords: list 
									orelse: list 
								element: Return 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _name
										ctx: Load 
							orelse: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = TypeError
									ctx: Load 
								args: list 
									element: Str 
										s: str = tzname() argument must be a datetime instance or None
								keywords: list 
							cause: NoneType = None
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = dst
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = dt
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: BoolOp 
								op: Or 
								values: list 
									element: Call 
										func: Name 
											id: str = isinstance
											ctx: Load 
										args: list 
											element: Name 
												id: str = dt
												ctx: Load 
											element: Name 
												id: str = datetime
												ctx: Load 
										keywords: list 
									element: Compare 
										left: Name 
											id: str = dt
											ctx: Load 
										ops: list 
											element: Is 
										comparators: list 
											element: NameConstant 
												value: NoneType = None
							body: list 
								element: Return 
									value: NameConstant 
										value: NoneType = None
							orelse: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = TypeError
									ctx: Load 
								args: list 
									element: Str 
										s: str = dst() argument must be a datetime instance or None
								keywords: list 
							cause: NoneType = None
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = fromutc
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = dt
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Call 
								func: Name 
									id: str = isinstance
									ctx: Load 
								args: list 
									element: Name 
										id: str = dt
										ctx: Load 
									element: Name 
										id: str = datetime
										ctx: Load 
								keywords: list 
							body: list 
								element: If 
									test: Compare 
										left: Attribute 
											value: Name 
												id: str = dt
												ctx: Load 
											attr: str = tzinfo
											ctx: Load 
										ops: list 
											element: IsNot 
										comparators: list 
											element: Name 
												id: str = self
												ctx: Load 
									body: list 
										element: Raise 
											exc: Call 
												func: Name 
													id: str = ValueError
													ctx: Load 
												args: list 
													element: Str 
														s: str = fromutc: dt.tzinfo is not self
												keywords: list 
											cause: NoneType = None
									orelse: list 
								element: Expr 
									value: Call 
										func: Name 
											id: str = __pragma__
											ctx: Load 
										args: list 
											element: Str 
												s: str = opov
										keywords: list 
								element: Return 
									value: BinOp 
										left: Name 
											id: str = dt
											ctx: Load 
										op: Add 
										right: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _offset
											ctx: Load 
								element: Expr 
									value: Call 
										func: Name 
											id: str = __pragma__
											ctx: Load 
										args: list 
											element: Str 
												s: str = noopov
										keywords: list 
							orelse: list 
						element: Raise 
							exc: Call 
								func: Name 
									id: str = TypeError
									ctx: Load 
								args: list 
									element: Str 
										s: str = fromutc() argument must be a datetime instance or None
								keywords: list 
							cause: NoneType = None
					decorator_list: list 
					returns: NoneType = None
				element: Assign 
					targets: list 
						element: Name 
							id: str = _maxoffset
							ctx: Store 
					value: Call 
						func: Name 
							id: str = timedelta
							ctx: Load 
						args: list 
						keywords: list 
							element: keyword 
								arg: str = hours
								value: Num 
									n: int = 23
							element: keyword 
								arg: str = minutes
								value: Num 
									n: int = 59
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = opov
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = _minoffset
							ctx: Store 
					value: UnaryOp 
						op: USub 
						operand: Call 
							func: Name 
								id: str = timedelta
								ctx: Load 
							args: list 
							keywords: list 
								element: keyword 
									arg: str = hours
									value: Num 
										n: int = 23
								element: keyword 
									arg: str = minutes
									value: Num 
										n: int = 59
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = noopov
						keywords: list 
				element: FunctionDef 
					name: str = _name_from_offset
					args: arguments 
						args: list 
							element: arg 
								arg: str = delta
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = opov
								keywords: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = delta
									ctx: Load 
								ops: list 
									element: Lt 
								comparators: list 
									element: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
											element: Num 
												n: int = 0
										keywords: list 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = sign
											ctx: Store 
									value: Str 
										s: str = -
								element: Assign 
									targets: list 
										element: Name 
											id: str = delta
											ctx: Store 
									value: UnaryOp 
										op: USub 
										operand: Name 
											id: str = delta
											ctx: Load 
							orelse: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = sign
											ctx: Store 
									value: Str 
										s: str = +
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = hours
											ctx: Store 
										element: Name 
											id: str = rest
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = divmod
									ctx: Load 
								args: list 
									element: Name 
										id: str = delta
										ctx: Load 
									element: Call 
										func: Name 
											id: str = timedelta
											ctx: Load 
										args: list 
										keywords: list 
											element: keyword 
												arg: str = hours
												value: Num 
													n: int = 1
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = minutes
									ctx: Store 
							value: BinOp 
								left: Name 
									id: str = rest
									ctx: Load 
								op: FloorDiv 
								right: Call 
									func: Name 
										id: str = timedelta
										ctx: Load 
									args: list 
									keywords: list 
										element: keyword 
											arg: str = minutes
											value: Num 
												n: int = 1
						element: Expr 
							value: Call 
								func: Name 
									id: str = __pragma__
									ctx: Load 
								args: list 
									element: Str 
										s: str = noopov
								keywords: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Str 
										s: str = UTC{}{}:{}
									attr: str = format
									ctx: Load 
								args: list 
									element: Name 
										id: str = sign
										ctx: Load 
									element: Call 
										func: Name 
											id: str = zfill
											ctx: Load 
										args: list 
											element: Name 
												id: str = hours
												ctx: Load 
											element: Num 
												n: int = 2
										keywords: list 
									element: Call 
										func: Name 
											id: str = zfill
											ctx: Load 
										args: list 
											element: Name 
												id: str = minutes
												ctx: Load 
											element: Num 
												n: int = 2
										keywords: list 
								keywords: list 
					decorator_list: list 
						element: Name 
							id: str = staticmethod
							ctx: Load 
					returns: NoneType = None
			decorator_list: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _tz_utc
					ctx: Store 
			value: Call 
				func: Attribute 
					value: Name 
						id: str = timezone
						ctx: Load 
					attr: str = _create
					ctx: Load 
				args: list 
					element: Call 
						func: Name 
							id: str = timedelta
							ctx: Load 
						args: list 
							element: Num 
								n: int = 0
						keywords: list 
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _tz_min
					ctx: Store 
			value: Call 
				func: Attribute 
					value: Name 
						id: str = timezone
						ctx: Load 
					attr: str = _create
					ctx: Load 
				args: list 
					element: Attribute 
						value: Name 
							id: str = timezone
							ctx: Load 
						attr: str = _minoffset
						ctx: Load 
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _tz_max
					ctx: Store 
			value: Call 
				func: Attribute 
					value: Name 
						id: str = timezone
						ctx: Load 
					attr: str = _create
					ctx: Load 
				args: list 
					element: Attribute 
						value: Name 
							id: str = timezone
							ctx: Load 
						attr: str = _maxoffset
						ctx: Load 
				keywords: list 
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = js
					element: Str 
						s: str = {}
					element: Str 
						s: str = Object.defineProperty (timezone, 'utc', {get: function () {return _tz_utc;}})
				keywords: list 
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = js
					element: Str 
						s: str = {}
					element: Str 
						s: str = Object.defineProperty (timezone, 'min', {get: function () {return _tz_min;}})
				keywords: list 
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = js
					element: Str 
						s: str = {}
					element: Str 
						s: str = Object.defineProperty (timezone, 'max', {get: function () {return _tz_max;}})
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = _EPOCH
					ctx: Store 
			value: Call 
				func: Name 
					id: str = datetime
					ctx: Load 
				args: list 
					element: Num 
						n: int = 1970
					element: Num 
						n: int = 1
					element: Num 
						n: int = 1
				keywords: list 
					element: keyword 
						arg: str = tzinfo
						value: Attribute 
							value: Name 
								id: str = timezone
								ctx: Load 
							attr: str = utc
							ctx: Load 