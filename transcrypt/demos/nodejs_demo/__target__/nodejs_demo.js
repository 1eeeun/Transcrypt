'use strict';var time={};import{__envir__,__nest__,__init__,__get__,__getcm__,__getsm__,py_metatype,object,__class__,__pragma__,__call__,__kwargtrans__,__globals__,__super__,property,__setProperty__,assert,__merge__,dir,setattr,getattr,hasattr,delattr,__in__,__specialattrib__,len,__i__,__k__,__t__,float,int,bool,py_typeof,issubclass,isinstance,callable,repr,chr,ord,max,min,round,__jsUsePyNext__,__pyUseJsNext__,py_iter,py_next,__PyIterator__,__JsIterator__,py_reversed,zip,range,any,all,sum,enumerate,
copy,deepcopy,list,tuple,set,bytearray,bytes,str,dict,__jsmod__,__mod__,__pow__,__neg__,__matmul__,__mul__,__truediv__,__floordiv__,__add__,__sub__,__lshift__,__rshift__,__or__,__xor__,__and__,__eq__,__ne__,__lt__,__le__,__gt__,__ge__,__imatmul__,__ipow__,__ijsmod__,__imod__,__imul__,__idiv__,__iadd__,__isub__,__ilshift__,__irshift__,__ior__,__ixor__,__iand__,__getitem__,__setitem__,__getslice__,__setslice__,BaseException,Exception,IterableError,StopIteration,ValueError,KeyError,AssertionError,NotImplementedError,
IndexError,AttributeError,py_TypeError,Warning,UserWarning,DeprecationWarning,RuntimeWarning,__sort__,sorted,map,filter,divmod,__Terminal__,__terminal__,print}from"./org.transcrypt.__runtime__.js";var __name__="__main__";import*as __module_time__ from"./time.js";__nest__(time,"",__module_time__);export var http=require("http");export var Demo=__class__("Demo",[object],{__module__:__name__,texts:tuple(["Welcome to the world of node.js","You can have your cake and eat it","Use node's ecosystem while programming in Python",
"Using node.js from Transcrypt is easy","Take a Python ride into the node.js world"]),get __init__(){return __get__(this,function(self,port){print("Demo server started on port",port);self.server=http.createServer(self.serve);self.server.listen(port);self.oldIndex=0;self.newIndex=0;self.count=0})},get serve(){return __get__(this,function(self,request,response){time.__adapt__(request);response.writeHead(200);print("Serving page",self.count);self.count++;while(self.newIndex==self.oldIndex)self.newIndex=
int(Math.random()*len(self.texts));self.oldIndex=self.newIndex;response.end("<h1>{}</h1><h1>{}</h1>".format(self.texts[self.newIndex],time.localtime()))})}});export var demo=Demo(8080);

//# sourceMappingURL=nodejs_demo.map